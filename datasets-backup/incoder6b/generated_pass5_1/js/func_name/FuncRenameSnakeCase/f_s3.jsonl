{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = '';\n  let closed_paren_group = '';\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group += char;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group += char;\n    } else if (char ==='') {\n      current_group += char;\n    } else if (char === ',' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char === ',' && open_brace_count > closed_paren_count) {\n      open_brace_group += char;\n    } else if (char === ')' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    }\n  }\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = '';\n  let closed_paren_group = '';\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group += char;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group += char;\n    } else if (char ==='') {\n      current_group += char;\n    } else if (char === ',' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char === ',' && open_brace_count > closed_paren_count) {\n      open_brace_group += char;\n    } else if (char === ')' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    }\n  }\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = '';\n  let closed_paren_group = '';\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group += char;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group += char;\n    } else if (char ==='') {\n      current_group += char;\n    } else if (char === ',' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char === ',' && open_brace_count > closed_paren_count) {\n      open_brace_group += char;\n    } else if (char === ')' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    }\n  }\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = '';\n  let closed_paren_group = '';\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group += char;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group += char;\n    } else if (char ==='') {\n      current_group += char;\n    } else if (char === ',' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char === ',' && open_brace_count > closed_paren_count) {\n      open_brace_group += char;\n    } else if (char === ')' && open_brace_count === closed_paren_count) {\n      groups.push(current_group);\n      current_group = '';\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    }\n  }\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = '';\n  let closed_paren_group = '';\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  let longestPalindromeSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverse = '';\n  let longestPalindromeSuffixReverseSuffixReverseLength = 0;\n  let longestPalindromeSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverse = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverse = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReversePrefix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffix = '';\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixReverseSuffixLength = 0;\n  let longestPalindromeSuffixReverseSuffixReverseSuffixReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return choose_num(y, x);\n  }\n  return choose_num(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 12\n  choose_num(13, 12) = -1\n  */\nconst choose_num_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_odd(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return choose_num_odd(y, x);\n  }\n  return choose_num_odd(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range(y, x);\n  }\n  if (x > y) {\n    return choose_num_range(y, x);\n  }\n  return choose_num_range(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_odd(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_odd(y, x);\n  }\n  return choose_num_range_odd(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choose_num_range_even(y, x);\n  }\n  if (x > y) {\n    return choose_num_range_even(y, x);\n  }\n  return choose_num_range_even(x, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") => 0\n  count_times(0, \"abracadabra\") => -1\n  count_times(4, \"abracadabra\") => -1\n*/\nconst count_times = (num, str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of \n  times the number occurs in the given string.\n  Example:\n  count_times(5, \"abracadabra\") => 3\n  count_times(3, \"abracadabra\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any negative digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_negative_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] < 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any positive digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_positive_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] > 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zero = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros_and_one = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros_and_ones = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros_and_one_and_zero = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros_and_one_and_zeros = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_in_range_with_zeros_and_one_and_zero_and_one = (x, a, b) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 32", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    const digit = reversed[i];\n    const name = digitToName[digit];\n    result.push(name);\n  }\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  {\n    name: \"factorial of 0\",\n    fn: () => factorial(0),\n    expected: []\n  },\n  {\n    name: \"factorial of 1\",\n    fn: () => factorial(1),\n    expected: [[1]]\n  },\n  {\n    name: \"factorial of 2\",\n    fn: () => factorial(2),\n    expected: [[1, 2]]\n  },\n  {\n    name: \"factorial of 3\",\n    fn: () => factorial(3),\n    expected: [1, 2, 6]\n  },\n  {\n    name: \"factorial of 4\",\n    fn: () => factorial(4),\n    expected: [1, 2, 6, 24]\n  },\n  {\n    name: \"factorial of 5\",\n    fn: () => factorial(5),\n    expected: [1, 2, 6, 24, 15]\n  },\n  {\n    name: \"factorial of 6\",\n    fn: () => factorial(6),\n    expected: [1, 2, 6, 24, 15, 120]\n  },\n  {\n    name: \"factorial of 7\",\n    fn: () => factorial(7),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800]\n  },\n  {\n    name: \"factorial of 8\",\n    fn: () => factorial(8),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600]\n  },\n  {\n    name: \"factorial of 9\",\n    fn: () => factorial(9),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200]\n  },\n  {\n    name: \"factorial of 10\",\n    fn: () => factorial(10),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817664, 5109094217170912, 11240007277776080, 25852016738884976]\n  },\n  {\n    name: \"factorial of 11\",\n    fn: () => factorial(11),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817664, 5109094217170912, 11240007277776080, 25852016738884976,\n      5242880, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648]\n  },\n  {\n    name: \"factorial of 12\",\n    fn: () => factorial(12),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817664, 5109094217170912, 11240007277776080, 25852016738884976,\n      5242880, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 34359738368, 68719476736, 1374389534720, 2748779069440, 5497558138880, 10995116277760, 21990232555520]\n  },\n  {\n    name: \"factorial of 13\",\n    fn: () => factorial(13),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817664, 5109094217170912, 11240007277776080, 25852016738884976,\n      5242880, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 34359738368, 68719476736, 1374389534720, 2748779069440, 5497558138880, 10995116277760, 21990232555520, 34002969600]\n  },\n  {\n    name: \"factorial of 14\",\n    fn: () => factorial(14),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817664, 5109094217170912, 11240007277776080, 25852016738884976,\n      5242880, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 34359738368, 68719476736, 1374389534720, 2748779069440, 5497558138880, 10995116277760, 21990232555520, 34002969600, 41615240963200]\n  },\n  {\n    name: \"factorial of 15\",\n    fn: () => factorial(15),\n    expected: [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 13076743680, 209227898880, 3556874280960, 6402373705760, 12164510040880, 243290200817", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { even_odd_palindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 2; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { even_odd_palindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 3; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { even_odd_palindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 4; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { even_odd_palindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 5; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { even_odd_palindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  let temp = 0;\n  \n  for(let i = 0; i < n; i++){\n    temp = arr[i];\n    for(let j = i; j < n; j++){\n      if(arr[j] > temp){\n        arr[j] = arr[j+1];\n      }\n    }\n    arr[i] = temp;\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] > arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(let i = 0; i < n; i++){\n    for(let j = i; j < n; j++){\n      if(arr[j] < arr[i]){\n        arr[j] = arr[j+1];\n      }\n    }\n  }\n  \n  for(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const aChar = a.charCodeAt(i);\n    const bChar = b.charCodeAt(i);\n    const aCharInt = aChar ^ carry;\n    const bCharInt = bChar ^ carry;\n    result.push(String.fromCharCode(aCharInt | bCharInt));\n    carry = aCharInt >> 8;\n  }\n  return result.join('');\n};\n\n/* Given two strings s and t, perform XOR on them and return the result\n  as a string.\n  >>> string_xor('abc', 'def')\n  'fedcba'\n  */\nconst string_xor_strings = (s, t) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const bChar = t.charCodeAt(i);\n    const aCharInt = aChar ^ bChar;\n    result.push(String.fromCharCode(aCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number = (s, n) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    result.push(String.fromCharCode(aCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings = (s, n) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    result.push(String.fromCharCode(aCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number = (s, n) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    result.push(String.fromCharCode(aCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings = (s, n, t) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings_number = (s, n, t) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings_number_strings = (s, n, t, u) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    const cChar = u.charCodeAt(i);\n    const cCharInt = cChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt | cCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings_number_strings_number = (s, n, t, u, v) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    const cChar = u.charCodeAt(i);\n    const cCharInt = cChar ^ n;\n    const dChar = v.charCodeAt(i);\n    const dCharInt = dChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt | cCharInt | dCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings_number_strings_number_strings = (s, n, t, u, v, w) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    const cChar = u.charCodeAt(i);\n    const cCharInt = cChar ^ n;\n    const dChar = v.charCodeAt(i);\n    const dCharInt = dChar ^ n;\n    const eChar = w.charCodeAt(i);\n    const eCharInt = eChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt | cCharInt | dCharInt | eCharInt));\n  }\n  return result.join('');\n};\n\n/* Given a string s and a number n, perform XOR on s and return result as a\n  string.\n  >>> string_xor_number('abc', 5)\n  'abc'\n  */\nconst string_xor_number_strings_number_strings_number_strings_number_strings_number = (s, n, t, u, v, w, x) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const aChar = s.charCodeAt(i);\n    const aCharInt = aChar ^ n;\n    const bChar = t.charCodeAt(i);\n    const bCharInt = bChar ^ n;\n    const cChar = u.charCodeAt(i);\n    const cCharInt = cChar ^ n;\n    const dChar = v.charCodeAt(i);\n    const dCharInt = dChar ^ n;\n    const eChar = w.charCodeAt(i);\n    const eCharInt = eChar ^ n;\n    const fChar = x.charCodeAt(i);\n    const fCharInt = fChar ^ n;\n    result.push(String.fromCharCode(aCharInt | bCharInt | cCharInt | dCharInt | eCharInt | fCharInt));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letters = test.split(' ');\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== c[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete2 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete3 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete4 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete5 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete6 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete7 = (s, k) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[i];\n  }\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i += 1) {\n    if (rev[i]!== k[i]) {\n      result = rev;\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete8 = (s, k) => {\n  let rev = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const odd_count = str.match(/\\d/g).length;\n    odd_counts.push(odd_count);\n  }\n  return odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  const even_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_count = str.match(/\\d/g).length;\n    even_counts.push(even_count);\n  }\n  return even_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  const even_odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_odd_count = str.match(/\\d/g).length;\n    even_odd_counts.push(even_odd_count);\n  }\n  return even_odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  const even_odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_odd_count = str.match(/\\d/g).length;\n    even_odd_counts.push(even_odd_count);\n  }\n  return even_odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  const even_odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_odd_count = str.match(/\\d/g).length;\n    even_odd_counts.push(even_odd_count);\n  }\n  return even_odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  const even_odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_odd_count = str.match(/\\d/g).length;\n    even_odd_counts.push(even_odd_count);\n  }\n  return even_odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  const even_odd_counts = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const even_odd_count = str.match(/\\d/g).length;\n    even_odd_counts.push(even_odd_count);\n  }\n  return even_odd_counts;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 6\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product < min) {\n      min = product;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product_of_nums([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product_of_nums = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product_of_nums([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product_of_nums = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product < min) {\n      min = product;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product_of_nums([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product_of_nums = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product_of_nums([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product_of_nums = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product < min) {\n      min = product;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product_of_nums([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product_of_nums = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product_of_nums([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product_of_nums = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product < min) {\n      min = product;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product_of_nums([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product_of_nums = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product_of_nums([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product_of_nums = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product < min) {\n      min = product;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  max_sub_array_product_of_nums([-1, -2, -3]) == 6\n  */\nconst max_sub_array_product_of_nums = (nums) => {\n  let max = 1;\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_product_of_nums([2, 3, 4, 1, 2, 4]) == 24\n  min_sub_array_product_of_nums([-1, -2, -3]) == -6\n  */\nconst min_sub_array_product_of_nums = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let product = 1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst max_fill_test = (input, expected) => {\n    const actual = max_fill(input[0], input[1]);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_2 = (grid, expected) => {\n    const actual = max_fill(grid, 1);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_3 = (grid, expected) => {\n    const actual = max_fill(grid, 2);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_4 = (grid, expected) => {\n    const actual = max_fill(grid, 5);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_5 = (grid, expected) => {\n    const actual = max_fill(grid, 10);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_6 = (grid, expected) => {\n    const actual = max_fill(grid, 15);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_7 = (grid, expected) => {\n    const actual = max_fill(grid, 20);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_8 = (grid, expected) => {\n    const actual = max_fill(grid, 25);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_9 = (grid, expected) => {\n    const actual = max_fill(grid, 30);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_10 = (grid, expected) => {\n    const actual = max_fill(grid, 35);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_11 = (grid, expected) => {\n    const actual = max_fill(grid, 40);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_12 = (grid, expected) => {\n    const actual = max_fill(grid, 45);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_13 = (grid, expected) => {\n    const actual = max_fill(grid, 50);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_14 = (grid, expected) => {\n    const actual = max_fill(grid, 55);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_15 = (grid, expected) => {\n    const actual = max_fill(grid, 60);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_16 = (grid, expected) => {\n    const actual = max_fill(grid, 65);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_17 = (grid, expected) => {\n    const actual = max_fill(grid, 70);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_18 = (grid, expected) => {\n    const actual = max_fill(grid, 75);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_19 = (grid, expected) => {\n    const actual = max_fill(grid, 80);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_20 = (grid, expected) => {\n    const actual = max_fill(grid, 85);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_21 = (grid, expected) => {\n    const actual = max_fill(grid, 90);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_22 = (grid, expected) => {\n    const actual = max_fill(grid, 95);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_23 = (grid, expected) => {\n    const actual = max_fill(grid, 100);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_24 = (grid, expected) => {\n    const actual = max_fill(grid, 105);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_25 = (grid, expected) => {\n    const actual = max_fill(grid, 110);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_26 = (grid, expected) => {\n    const actual = max_fill(grid, 115);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_27 = (grid, expected) => {\n    const actual = max_fill(grid, 120);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_28 = (grid, expected) => {\n    const actual = max_fill(grid, 125);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_29 = (grid, expected) => {\n    const actual = max_fill(grid, 130);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_30 = (grid, expected) => {\n    const actual = max_fill(grid, 135);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_31 = (grid, expected) => {\n    const actual = max_fill(grid, 140);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_32 = (grid, expected) => {\n    const actual = max_fill(grid, 145);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\nconst max_fill_test_33 = (grid, expected) => {\n    const actual = max_fill(grid, 150);\n    console.log('Max fill test:', actual, expected);\n    expect(actual).toBe(expected);\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => a - b);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse2 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse2([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse2([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse2([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse3 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse3([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse3([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse3([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse4 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse4([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse4([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse4([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse5 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse5([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse5([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse5([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse6 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ones[bin.charAt(j)] += 1;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    dec[i] = ones[i];\n  }\n\n  return dec.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse6([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse6([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse6([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse7 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const dec = [];\n\n  for (let i = 0; i < len; i++) {\n    const bin = arr[i].toString(2);\n    const len = bin.length;\n    for (let j = 0; j < len; j++) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_count = vowels.length;\n  let vowels_index = 0;\n  let vowels_index_count = 0;\n  let vowels_index_count_2 = 0;\n  let vowels_index_count_3 = 0;\n  let vowels_index_count_4 = 0;\n  let vowels_index_count_5 = 0;\n  let vowels_index_count_6 = 0;\n  let vowels_index_count_7 = 0;\n  let vowels_index_count_8 = 0;\n  let vowels_index_count_9 = 0;\n  let vowels_index_count_10 = 0;\n  let vowels_index_count_11 = 0;\n  let vowels_index_count_12 = 0;\n  let vowels_index_count_13 = 0;\n  let vowels_index_count_14 = 0;\n  let vowels_index_count_15 = 0;\n  let vowels_index_count_16 = 0;\n  let vowels_index_count_17 = 0;\n  let vowels_index_count_18 = 0;\n  let vowels_index_count_19 = 0;\n  let vowels_index_count_20 = 0;\n  let vowels_index_count_21 = 0;\n  let vowels_index_count_22 = 0;\n  let vowels_index_count_23 = 0;\n  let vowels_index_count_24 = 0;\n  let vowels_index_count_25 = 0;\n  let vowels_index_count_26 = 0;\n  let vowels_index_count_27 = 0;\n  let vowels_index_count_28 = 0;\n  let vowels_index_count_29 = 0;\n  let vowels_index_count_30 = 0;\n  let vowels_index_count_31 = 0;\n  let vowels_index_count_32 = 0;\n  let vowels_index_count_33 = 0;\n  let vowels_index_count_34 = 0;\n  let vowels_index_count_35 = 0;\n  let vowels_index_count_36 = 0;\n  let vowels_index_count_37 = 0;\n  let vowels_index_count_38 = 0;\n  let vowels_index_count_39 = 0;\n  let vowels_index_count_40 = 0;\n  let vowels_index_count_41 = 0;\n  let vowels_index_count_42 = 0;\n  let vowels_index_count_43 = 0;\n  let vowels_index_count_44 = 0;\n  let vowels_index_count_45 = 0;\n  let vowels_index_count_46 = 0;\n  let vowels_index_count_47 = 0;\n  let vowels_index_count_48 = 0;\n  let vowels_index_count_49 = 0;\n  let vowels_index_count_50 = 0;\n  let vowels_index_count_51 = 0;\n  let vowels_index_count_52 = 0;\n  let vowels_index_count_53 = 0;\n  let vowels_index_count_54 = 0;\n  let vowels_index_count_55 = 0;\n  let vowels_index_count_56 = 0;\n  let vowels_index_count_57 = 0;\n  let vowels_index_count_58 = 0;\n  let vowels_index_count_59 = 0;\n  let vowels_index_count_60 = 0;\n  let vowels_index_count_61 = 0;\n  let vowels_index_count_62 = 0;\n  let vowels_index_count_63 = 0;\n  let vowels_index_count_64 = 0;\n  let vowels_index_count_65 = 0;\n  let vowels_index_count_66 = 0;\n  let vowels_index_count_67 = 0;\n  let vowels_index_count_68 = 0;\n  let vowels_index_count_69 = 0;\n  let vowels_index_count_70 = 0;\n  let vowels_index_count_71 = 0;\n  let vowels_index_count_72 = 0;\n  let vowels_index_count_73 = 0;\n  let vowels_index_count_74 = 0;\n  let vowels_index_count_75 = 0;\n  let vowels_index_count_76 = 0;\n  let vowels_index_count_77 = 0;\n  let vowels_index_count_78 = 0;\n  let vowels_index_count_79 = 0;\n  let vowels_index_count_80 = 0;\n  let vowels_index_count_81 = 0;\n  let vowels_index_count_82 = 0;\n  let vowels_index_count_83 = 0;\n  let vowels_index_count_84 = 0;\n  let vowels_index_count_85 = 0;\n  let vowels_index_count_86 = 0;\n  let vowels_index_count_87 = 0;\n  let vowels_index_count_88 = 0;\n  let vowels_index_count_89 = 0;\n  let vowels_index_count_90 = 0;\n  let vowels_index_count_91 = 0;\n  let vowels_index_count_92 = 0;\n  let vowels_index_count_93 = 0;\n  let vowels_index_count_94 = 0;\n  let vowels_index_count_95 = 0;\n  let vowels_index_count_96 = 0;\n  let vowels_index_count_97 = 0;\n  let vowels_index_count_98 = 0;\n  let vowels_index_count_99 = 0;\n  let vowels_index_count_100 = 0;\n  let vowels_index_count_101 = 0;\n  let vowels_index_count_102 = 0;\n  let vowels_index_count_103 = 0;\n  let vowels_index_count_104 = 0;\n  let vowels_index_count_105 = 0;\n  let vowels_index_count_106 = 0;\n  let vowels_index_count_107 = 0;\n  let vowels_index_count_108 = 0;\n  let vowels_index_count_109 = 0;\n  let vowels_index_count_110 = 0;\n  let vowels_index_count_111 = 0;\n  let vowels_index_count_112 = 0;\n  let vowels_index_count_113 = 0;\n  let vowels_index_count_114 = 0;\n  let vowels_index_count_115 = 0;\n  let vowels_index_count_116 = 0;\n  let vowels_index_count_117 = 0;\n  let vowels_index_count_118 = 0;\n  let vowels_index_count_119 = 0;\n  let vowels_index_count_120 = 0;\n  let vowels_index_count_121 = 0;\n  let vowels_index_count_122 = 0;\n  let vowels_index_count_123 = 0;\n  let vowels_index_count_124 = 0;\n  let vowels_index_count_125 = 0;\n  let vowels_index_count_126 = 0;\n  let vowels_index_count_127 = 0;\n  let vowels_index_count_128 = 0;\n  let vowels_index_count_129 = 0;\n  let vowels_index_count_130 = 0;\n  let vowels_index_count_131 = 0;\n  let vowels_index_count_132 = 0;\n  let vowels_index_count_133 = 0;\n  let vowels_index_count_134 = 0;\n  let vowels_index_count_135 = 0;\n  let vowels_index_count_136 = 0;\n  let vowels_index_count_137 = 0;\n  let vowels_index_count_138 = 0;\n  let vowels_index_count_139 = 0;\n  let vowels_index_count_140 = 0;\n  let vowels_index_count_141 = 0;\n  let vowels_index_count_142 = 0;\n  let vowels_index_count_143 = 0;\n  let vowels_index_count_144 = 0;\n  let vowels_index_count_145 = 0;\n  let vowels_index_count_146 = 0;\n  let vowels_index_count_147 = 0;\n  let vowels_index_count_148 = 0;\n  let vowels_index_count_149 = 0;\n  let vowels_index_count_150 = 0;\n  let vowels_index_count_151 = 0;\n  let vowels_index_count_152 = 0;\n  let vowels_index_count_153 = 0;\n  let vowels_index_count_154 = 0;\n  let vowels_index_count_155 = 0;\n  let vowels_index_count_156 = 0;\n  let vowels_index_count_157 = 0;\n  let vowels_index_count_158 = 0;\n  let vowels_index_count_159 = 0;\n  let vowels_index_count_160 = 0;\n  let vowels_index_count_161 = 0;\n  let vowels_index_count_162 = 0;\n  let vowels_index_count_163 = 0;\n  let vowels_index_count_164 = 0;\n  let vowels_index_count_165 = 0;\n  let vowels_index_count_166 = 0;\n  let vowels_index_count_167 = 0;\n  let vowels_index_count_168 = 0;\n  let vowels_index_count_169 = 0;\n  let vowels_index_count_170 = 0;\n  let vowels_index_count_171 = 0;\n  let vowels_index_count_172 = 0;\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n      i++;\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    } else {\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      stack.push(lst[i]);\n      i++;\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n      i++;\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* You are given a list of n integers, where each integer is between 1 and n^2.\n  Your job is to find the maximum number of consecutive integers that can be\n  obtained by adding up all the integers in the list.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max_consecutive([1,2,3]) == 'Yes'\n  max_consecutive([1,3,5]) == 'No'\n  max_consecutive([1,3,5,7,9]) == 'Yes'\n  max_consecutive([1,3,5,7,9,11,13,15]) == 'No'\n  */\nconst max_consecutive = (lst) => {\n  let stack = [];\n  let i = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: Add tests for these functions\n\n// TODO: ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(max);\n    result.push(arr[index]);\n    max = Math.max(max, arr[index]);\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  let result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(min);\n    result.push(arr[index]);\n    min = Math.min(min, arr[index]);\n  }\n  return result;\n};\n\nexport { minimum, minimum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [3, 6, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargest = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(max);\n    result.push(arr[index]);\n    max = Math.max(max, arr[index]);\n  }\n  return result;\n};\n\nexport { kthLargest, kthLargest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthSmallest = (arr, k) => {\n  let result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(min);\n    result.push(arr[index]);\n    min = Math.min(min, arr[index]);\n  }\n  return result;\n};\n\nexport { kthSmallest, kthSmallest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the largest number in the array.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [6, 4, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst largest = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(max);\n    result.push(arr[index]);\n    max = Math.max(max, arr[index]);\n  }\n  return result;\n};\n\nexport { largest, largest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the smallest number in the array.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 1]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst smallest = (arr, k) => {\n  let result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(min);\n    result.push(arr[index]);\n    min = Math.min(min, arr[index]);\n  }\n  return result;\n};\n\nexport { smallest, smallest2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [6, 4, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargestDescending = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let index = arr.indexOf(max);\n    result.push(arr[index]);\n    max = Math.max(max, arr[index]);\n  }\n  return result;\n};\n\nexport { kthLargestDescending, kthLargestDescending2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 2, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  solution([5, 5, 5, 5, 5]) ==> [5, 5, 5]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [];\n  let prev_term = 1;\n  let next_term = 1;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (prev_term % 2 === 0) {\n      next_term = prev_term / 2;\n    } else {\n      next_term = prev_term * 3 + 1;\n    }\n    odd_collatz.push(next_term);\n    prev_term = next_term;\n  }\n\n  return odd_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let prev_term = 1;\n  let next_term = 1;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (prev_term % 2 === 0) {\n      next_term = prev_term / 2;\n    } else {\n      next_term = prev_term * 3 + 1;\n    }\n    even_collatz.push(next_term);\n    prev_term = next_term;\n  }\n\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz_desc = (n) => {\n  let even_collatz = [];\n  let prev_term = 1;\n  let next_term = 1;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (prev_term % 2 === 0) {\n      next_term = prev_term / 2;\n    } else {\n      next_term = prev_term * 3 + 1;\n    }\n    even_collatz.push(next_term);\n    prev_term = next_term;\n  }\n\n  return even_collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz_desc = (n) => {\n  let odd_collatz = [];\n  let prev_term = 1;\n  let next_term = 1;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (prev_term % 2 === 0) {\n      next_term = prev_term / 2;\n    } else {\n      next_term = prev_term * 3 + 1;\n    }\n    odd_collatz.push(next_term);\n    prev_term = next_term;\n  }\n\n  return odd_collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz_desc = (n) => {\n  let even_collatz = [];\n  let prev_term = 1;\n  let next_term = 1;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (prev_term % 2 === 0) {\n      next_term = prev_term / 2;\n    } else {\n      next_term = prev_term * 3 + 1;\n    }\n    even_collatz.push(next_term);\n    prev_term = next_term;\n  }\n\n  return even_collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  let dateArray = date.split('-');\n  let daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonthArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let monthArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_comma = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_comma2 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space3 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space4 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space5 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space6 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 10, ord('B') = 20,... ord('Z') = 90\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_space7 = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word =>!!word);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with even order in the\n  alphabet, ord('A", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reverse = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed_no_repeat = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed_no_repeat = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed_no_repeat = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed_no_repeat = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_reversed_no_repeat = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start2 === end1 && start1 === end2) return \"YES\";\n  if (start2 === end1 && start1!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2 === end2) return \"YES\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2 === end2) return \"YES\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2 === end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2 === end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start1 === end2 && start2 === end1) return \"YES\";\n  if (start1!== end1 && start2!== end2) return \"NO\";\n  if (start1 === end1 && start2!== end2) return \"NO\";\n  if (start1 === end2 && start1!== end2) return \"NO\";\n  if (start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * N).fill(false);\n  const path = new Array(k).fill(0);\n  let minPath = [];\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (!visited[i * N + j]) {\n        visited[i * N + j] = true;\n        path[0] = 1;\n        DFS(grid, i, j, k, path, minPath);\n      }\n    }\n  }\n\n  return minPath;\n};\n\nconst DFS = (grid, i, j, k, path, minPath) => {\n  if (path[k] === N) {\n    minPath.push(grid[i][j]);\n    return;\n  }\n\n  if (path[k] === 0) {\n    return;\n  }\n\n  if (grid[i][j] > minPath[path.length - 1]) {\n    minPath[path.length] = grid[i][j];\n  }\n\n  for (let k = 0; k < N; k++) {\n    if (grid[i][k] === grid[i][j]) {\n      path[k] += 1;\n      DFS(grid, i, k, k, path, minPath);\n      path[k] -= 1;\n      DFS(grid, k, j, k, path, minPath);\n    }\n  }\n};\n\n// --------------------------------------------------\n// Tests\nconst tests = [\n  {\n    name: 'empty grid',\n    grid: [],\n    k: 1\n  },\n  {\n    name: 'grid of size 0',\n    grid: [],\n    k: 1\n  },\n  {\n    name: 'grid of size 1',\n    grid: [1],\n    k: 1\n  },\n  {\n    name: 'grid of size 2',\n    grid: [[1, 2]],\n    k: 1\n  },\n  {\n    name: 'grid of size 3',\n    grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\n    k: 1\n  },\n  {\n    name: 'grid of size 4',\n    grid: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]],\n    k: 1\n  },\n  {\n    name: 'grid of size 5',\n    grid: [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]],\n    k: 1\n  },\n  {\n    name: 'grid of size 6',\n    grid: [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24]],\n    k: 1\n  },\n  {\n    name: 'grid of size 7',\n    grid: [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]],\n    k: 1\n  },\n  {\n    name: 'grid of size 8',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32]],\n    k: 1\n  },\n  {\n    name: 'grid of size 9',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38]],\n    k: 1\n  },\n  {\n    name: 'grid of size 10',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 30, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48]],\n    k: 1\n  },\n  {\n    name: 'grid of size 11',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [44, 45, 46, 47, 48, 49, 50, 51, 52]],\n    k: 1\n  },\n  {\n    name: 'grid of size 12',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54]],\n    k: 1\n  },\n  {\n    name: 'grid of size 13',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]],\n    k: 1\n  },\n  {\n    name: 'grid of size 14',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]],\n    k: 1\n  },\n  {\n    name: 'grid of size 15',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]],\n    k: 1\n  },\n  {\n    name: 'grid of size 16',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69]],\n    k: 1\n  },\n  {\n    name: 'grid of size 17',\n    grid: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  return greatest_common_divisor(b, a % b)\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(21, 5)\n  7\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  return least_common_multiple(b, a % b)\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(21, 5)\n  7\n  */\nconst least_common_multiple_of_three = (a, b, c) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  return least_common_multiple_of_three(b, a % b, c % a)\n}\n\n/* Return the least common multiple of three integers a and b and c\n  >>> least_common_multiple_of_three(7, 5, 3)\n  21\n  >>> least_common_multiple_of_three(21, 5, 3)\n  7\n  */\nconst least_common_multiple_of_four = (a, b, c, d) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  return least_common_multiple_of_four(b, a % b, c % a, d % b)\n}\n\n/* Return the least common multiple of four integers a and b and c and d\n  >>> least_common_multiple_of_four(7, 5, 3, 1)\n  21\n  >>> least_common_multiple_of_four(21, 5, 3, 1)\n  7\n  */\nconst least_common_multiple_of_five = (a, b, c, d, e) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  return least_common_multiple_of_five(b, a % b, c % a, d % b, e % a)\n}\n\n/* Return the least common multiple of five integers a and b and c and d and e\n  >>> least_common_multiple_of_five(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_five(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_six = (a, b, c) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  return least_common_multiple_of_six(b, a % b, c % a)\n}\n\n/* Return the least common multiple of six integers a and b and c\n  >>> least_common_multiple_of_six(7, 5, 3)\n  21\n  >>> least_common_multiple_of_six(21, 5, 3)\n  7\n  */\nconst least_common_multiple_of_seven = (a, b, c, d, e) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  return least_common_multiple_of_seven(b, a % b, c % a, d % b, e % a)\n}\n\n/* Return the least common multiple of seven integers a and b and c and d and e\n  >>> least_common_multiple_of_seven(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_seven(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_eight = (a, b, c, d, e, f) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  if (f === 0) return b\n  return least_common_multiple_of_eight(b, a % b, c % a, d % b, e % a, f % b)\n}\n\n/* Return the least common multiple of eight integers a and b and c and d and e\n  >>> least_common_multiple_of_eight(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_eight(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_nine = (a, b, c, d, e, f, g) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  if (f === 0) return b\n  if (g === 0) return a\n  return least_common_multiple_of_nine(b, a % b, c % a, d % b, e % a, f % b, g % a)\n}\n\n/* Return the least common multiple of nine integers a and b and c and d and e\n  >>> least_common_multiple_of_nine(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_nine(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_ten = (a, b, c, d, e, f, g, h) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  if (f === 0) return b\n  if (g === 0) return a\n  if (h === 0) return b\n  return least_common_multiple_of_ten(b, a % b, c % a, d % b, e % a, f % b, g % a, h % b)\n}\n\n/* Return the least common multiple of ten integers a and b and c and d and e\n  >>> least_common_multiple_of_ten(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_ten(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_eleven = (a, b, c, d, e, f, g, h, i, j, k) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  if (f === 0) return b\n  if (g === 0) return a\n  if (h === 0) return b\n  if (i === 0) return a\n  if (j === 0) return b\n  if (k === 0) return a\n  return least_common_multiple_of_eleven(b, a % b, c % a, d % b, e % a, f % b, g % a, h % b, i % a, j % b, k % a)\n}\n\n/* Return the least common multiple of eleven integers a and b and c and d and e\n  >>> least_common_multiple_of_eleven(7, 5, 3, 1, 2)\n  21\n  >>> least_common_multiple_of_eleven(21, 5, 3, 1, 2)\n  7\n  */\nconst least_common_multiple_of_twelve = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (c === 0) return a\n  if (d === 0) return b\n  if (e === 0) return a\n  if (f === 0) return b\n  if (g === 0) return a\n  if (h === 0) return b\n  if (i === 0) return a\n  if (j === 0) return b\n  if (k === 0) return a\n  if (l === 0) return b\n  if (m === 0) return a\n  if (n === 0) return b\n  if (o === 0) return a\n  if (p === 0) return b\n  if (q === 0) return a\n  if (r === 0) return b\n  if (s === 0) return a\n  return least_common_multiple_of_twelve(b, a % b, c % a, d % b, e % a, f % ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  arr.push(1);\n  arr.push(2);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(1);\n  arr.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2\n  digits(235) == 7\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfTwo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 2;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6\n  digits(235) == 18\n  */\nconst digitSumOfThree = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 3;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 8\n  digits(235) == 24\n  */\nconst digitSumOfFour = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 4;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 10\n  digits(235) == 30\n  */\nconst digitSumOfFive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 5;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 42\n  */\nconst digitSumOfSix = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 6;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 14\n  digits(235) == 56\n  */\nconst digitSumOfSeven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 7;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 16\n  digits(235) == 68\n  */\nconst digitSumOfEight = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 8;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 9.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 18\n  digits(235) == 78\n  */\nconst digitSumOfNine = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 9;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 20\n  digits(235) == 88\n  */\nconst digitSumOfTen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 10;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 11.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 22\n  digits(235) == 98\n  */\nconst digitSumOfEleven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 11;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 12.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 100\n  */\nconst digitSumOfTwelve = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 12;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 13.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 26\n  digits(235) == 108\n  */\nconst digitSumOfThirteen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 13;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 14.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 28\n  digits(235) == 120\n  */\nconst digitSumOfFourteen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 14;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 15.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 30\n  digits(235) == 132\n  */\nconst digitSumOfFifteen = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i * 15;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 16.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 32\n  digits(235) == 144\n  */\nconst digitSumOfSixteen = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[' || string[i + 1]!== ']') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sum_numbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the largest number in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = [1,4,9] the output should be 9\n  For lst = [1,3,5,7] the output should be 7\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst largest_number = (lst) => {\n  let largest = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (largest < lst[i]) {\n      largest = lst[i];\n    }\n  }\n  return Math.round(largest);\n};\n\n/*You are given a list of numbers.\n  You need to return the smallest number in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -2\n  */\nconst smallest_number = (lst) => {\n  let smallest = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest > lst[i]) {\n      smallest = lst[i];\n    }\n  }\n  return Math.round(smallest);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of cubes in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = [1,4,9] the output should be 81\n  For lst = [1,3,5,7] the output should be 55\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sum_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of cubes in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_cubes = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 3);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the largest cube in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = [1,4,9] the output should be 81\n  For lst = [1,3,5,7] the output should be 55\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst largest_cube = (lst) => {\n  let largest = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (largest < Math.pow(lst[i], 3)) {\n      largest = Math.pow(lst[i], 3);\n    }\n  }\n  return Math.round(largest);\n};\n\n/*You are given a list of numbers.\n  You need to return the smallest cube in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -2\n  */\nconst smallest_cube = (lst) => {\n  let smallest = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest > Math.pow(lst[i], 3)) {\n      smallest = Math.pow(lst[i], 3);\n    }\n  }\n  return Math.round(smallest);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of cubes in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = [1,4,9] the output should be 81\n  For lst = [1,3,5,7] the output should be 55\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sum_cubes_2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of cubes in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_cubes_2 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the largest cube in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_letter = last_char.match(/[a-z]/i);\n  return!last_char_is_a_letter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_digit = last_char.match(/[0-9]/i);\n  return!last_char_is_a_digit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_space = last_char.match(/\\s/i);\n  return!last_char_is_a_space;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_symbol(\"apple pie\") ➞ false\n  check_if_last_char_is_a_symbol(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_symbol(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_symbol(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_symbol = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_symbol = last_char.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/i);\n  return!last_char_is_a_symbol;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_punctuation = last_char.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/i);\n  return!last_char_is_a_punctuation;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_word = last_char.match(/[a-z]+/i);\n  return!last_char_is_a_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_number = last_char.match(/[0-9]+/i);\n  return!last_char_is_a_number;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_special_character(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_character(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_character(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_character(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_character = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_special_character = last_char.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/i);\n  return!last_char_is_a_special_character;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_special_character(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_character(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_character(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_character(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_character = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_special_character = last_char.match(/[!@#$%", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"==\") return b\n  if (b === \"==\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"==\") return b\n  if (b === \"==\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_negative_odd(4) == false\n  is_equal_to_sum_negative_odd(6) == false\n  is_equal_to_sum_negative_odd(8) == true\n  */\nconst is_equal_to_sum_negative_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  is_equal_to_sum_positive(4) == false\n  is_equal_to_sum_positive(6) == false\n  is_equal_to_sum_positive(8) == true\n  */\nconst is_equal_to_sum_positive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_positive_even(4) == false\n  is_equal_to_sum_positive_even(6) == false\n  is_equal_to_sum_positive_even(8) == true\n  */\nconst is_equal_to_sum_positive_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_positive_odd(4) == false\n  is_equal_to_sum_positive_odd(6) == false\n  is_equal_to_sum_positive_odd(8) == true\n  */\nconst is_equal_to_sum_positive_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_negative_odd(4) == false\n  is_equal_to_sum_negative_odd(6) == false\n  is_equal_to_sum_negative_odd(8) == true\n  */\nconst is_equal_to_sum_negative_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  is_equal_to_sum_positive(4) == false\n  is_equal_to_sum_positive(6) == false\n  is_equal_to_sum_positive(8) == true\n  */\nconst is_equal_to_sum_positive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_positive_even(4) == false\n  is_equal_to_sum_positive_even(6) == false\n  is_equal_to_sum_positive_even(8) == true\n  */\nconst is_equal_to_sum_positive_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_positive_odd(4) == false\n  is_equal_to_sum_positive_odd(6) == false\n  is_equal_to_sum_positive_odd(8) == true\n  */\nconst is_equal_to_sum_positive_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Write a function that will receive a number as input and will return the sum\n  of the factorials of the numbers from 1 to that number.\n  For example:\n  >>> factorial_sum(1)\n  1\n  >>> factorial_sum(2)\n  2\n  >>> factorial_sum(3)\n  6\n  >>> factorial_sum(10)\n  3628800\n  >>> factorial_sum(100)\n  3628800\n  >>> factorial_sum(1000)\n  3628800\n  >>> factorial_sum(10000)\n  3628800\n  >>> factorial_sum(100000)\n  3628800\n  >>> factorial_sum(1000000)\n  3628800\n  >>> factorial_sum(10000000)\n  3628800\n  >>> factorial_sum(100000000)\n  3628800\n  >>> factorial_sum(1000000000)\n  3628800\n  >>> factorial_sum(10000000000)\n  3628800\n  >>> factorial_sum(100000000000)\n  3628800\n  >>> factorial_sum(1000000000000)\n  3628800\n  >>> factorial_sum(10000000000000)\n  3628800\n  >>> factorial_sum(100000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  3628800\n  >>> factorial_sum(100", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      suffixes.push(char);\n      i -= 1;\n    } else {\n      i -= 1;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  text = text.replace(/\\s+/g, \"_\");\n  text = text.replace(/\\s{2,}/g, \"-\");\n  return text;\n};\n\n/*\n  Given a string text, capitalize every word in the string\n  \n  capitalize(\"Example\") == \"Example\"\n  capitalize(\"Example 1\") == \"Example 1\"\n  capitalize(\"Example 2\") == \"Example 2\"\n  capitalize(\"Example 3\") == \"Example 3\"\n  capitalize(\"Example 4\") == \"Example 4\"\n  capitalize(\"Example 5\") == \"Example 5\"\n  capitalize(\"Example 6\") == \"Example 6\"\n  capitalize(\"Example 7\") == \"Example 7\"\n  capitalize(\"Example 8\") == \"Example 8\"\n  capitalize(\"Example 9\") == \"Example 9\"\n  capitalize(\"Example 10\") == \"Example 10\"\n  capitalize(\"Example 11\") == \"Example 11\"\n  capitalize(\"Example 12\") == \"Example 12\"\n  capitalize(\"Example 13\") == \"Example 13\"\n  capitalize(\"Example 14\") == \"Example 14\"\n  capitalize(\"Example 15\") == \"Example 15\"\n  capitalize(\"Example 16\") == \"Example 16\"\n  capitalize(\"Example 17\") == \"Example 17\"\n  capitalize(\"Example 18\") == \"Example 18\"\n  capitalize(\"Example 19\") == \"Example 19\"\n  capitalize(\"Example 20\") == \"Example 20\"\n  capitalize(\"Example 21\") == \"Example 21\"\n  capitalize(\"Example 22\") == \"Example 22\"\n  capitalize(\"Example 23\") == \"Example 23\"\n  capitalize(\"Example 24\") == \"Example 24\"\n  capitalize(\"Example 25\") == \"Example 25\"\n  capitalize(\"Example 26\") == \"Example 26\"\n  capitalize(\"Example 27\") == \"Example 27\"\n  capitalize(\"Example 28\") == \"Example 28\"\n  capitalize(\"Example 29\") == \"Example 29\"\n  capitalize(\"Example 30\") == \"Example 30\"\n  capitalize(\"Example 31\") == \"Example 31\"\n  capitalize(\"Example 32\") == \"Example 32\"\n  capitalize(\"Example 33\") == \"Example 33\"\n  capitalize(\"Example 34\") == \"Example 34\"\n  capitalize(\"Example 35\") == \"Example 35\"\n  capitalize(\"Example 36\") == \"Example 36\"\n  capitalize(\"Example 37\") == \"Example 37\"\n  capitalize(\"Example 38\") == \"Example 38\"\n  capitalize(\"Example 39\") == \"Example 39\"\n  capitalize(\"Example 40\") == \"Example 40\"\n  capitalize(\"Example 41\") == \"Example 41\"\n  capitalize(\"Example 42\") == \"Example 42\"\n  capitalize(\"Example 43\") == \"Example 43\"\n  capitalize(\"Example 44\") == \"Example 44\"\n  capitalize(\"Example 45\") == \"Example 45\"\n  capitalize(\"Example 46\") == \"Example 46\"\n  capitalize(\"Example 47\") == \"Example 47\"\n  capitalize(\"Example 48\") == \"Example 48\"\n  capitalize(\"Example 49\") == \"Example 49\"\n  capitalize(\"Example 50\") == \"Example 50\"\n  capitalize(\"Example 51\") == \"Example 51\"\n  capitalize(\"Example 52\") == \"Example 52\"\n  capitalize(\"Example 53\") == \"Example 53\"\n  capitalize(\"Example 54\") == \"Example 54\"\n  capitalize(\"Example 55\") == \"Example 55\"\n  capitalize(\"Example 56\") == \"Example 56\"\n  capitalize(\"Example 57\") == \"Example 57\"\n  capitalize(\"Example 58\") == \"Example 58\"\n  capitalize(\"Example 59\") == \"Example 59\"\n  capitalize(\"Example 60\") == \"Example 60\"\n  capitalize(\"Example 61\") == \"Example 61\"\n  capitalize(\"Example 62\") == \"Example 62\"\n  capitalize(\"Example 63\") == \"Example 63\"\n  capitalize(\"Example 64\") == \"Example 64\"\n  capitalize(\"Example 65\") == \"Example 65\"\n  capitalize(\"Example 66\") == \"Example 66\"\n  capitalize(\"Example 67\") == \"Example 67\"\n  capitalize(\"Example 68\") == \"Example 68\"\n  capitalize(\"Example 69\") == \"Example 69\"\n  capitalize(\"Example 70\") == \"Example 70\"\n  capitalize(\"Example 71\") == \"Example 71\"\n  capitalize(\"Example 72\") == \"Example 72\"\n  capitalize(\"Example 73\") == \"Example 73\"\n  capitalize(\"Example 74\") == \"Example 74\"\n  capitalize(\"Example 75\") == \"Example 75\"\n  capitalize(\"Example 76\") == \"Example 76\"\n  capitalize(\"Example 77\") == \"Example 77\"\n  capitalize(\"Example 78\") == \"Example 78\"\n  capitalize(\"Example 79\") == \"Example 79\"\n  capitalize(\"Example 80\") == \"Example 80\"\n  capitalize(\"Example 81\") == \"Example 81\"\n  capitalize(\"Example 82\") == \"Example 82\"\n  capitalize(\"Example 83\") == \"Example 83\"\n  capitalize(\"Example 84\") == \"Example 84\"\n  capitalize(\"Example 85\") == \"Example 85\"\n  capitalize(\"Example 86\") == \"Example 86\"\n  capitalize(\"Example 87\") == \"Example 87\"\n  capitalize(\"Example 88\") == \"Example 88\"\n  capitalize(\"Example 89\") == \"Example 89\"\n  capitalize(\"Example 90\") == \"Example 90\"\n  capitalize(\"Example 91\") == \"Example 91\"\n  capitalize(\"Example 92\") == \"Example 92\"\n  capitalize(\"Example 93\") == \"Example 93\"\n  capitalize(\"Example 94\") == \"Example 94\"\n  capitalize(\"Example 95\") == \"Example 95\"\n  capitalize(\"Example 96\") == \"Example 96\"\n  capitalize(\"Example 97\") == \"Example 97\"\n  capitalize(\"Example 98\") == \"Example 98\"\n  capitalize(\"Example 99\") == \"Example 99\"\n  capitalize(\"Example 100\") == \"Example 100\"\n  capitalize(\"Example 101\") == \"Example 101\"\n  capitalize(\"Example 102\") == \"Example 102\"\n  capitalize(\"Example 103\") == \"Example 103\"\n  capitalize(\"Example 104\") == \"Example 104\"\n  capitalize(\"Example 105\") == \"Example 105\"\n  capitalize(\"Example 106\") == \"Example 106\"\n  capitalize(\"Example 107\") == \"Example 107\"\n  capitalize(\"Example 108\") == \"Example 108\"\n  capitalize(\"Example 109\") == \"Example 109\"\n  capitalize(\"Example 110\") == \"Example 110\"\n  capitalize(\"Example 111\") == \"Example 111\"\n  capitalize(\"Example 112\") == \"Example 112\"\n  capitalize(\"Example 113\") == \"Example 113\"\n  capitalize(\"Example 114\") == \"Example 114\"\n  capitalize(\"Example 115\") == \"Example 115\"\n  capitalize(\"Example 116\") == \"Example 116\"\n  capitalize(\"Example 117\") == \"Example 117\"\n  capitalize(\"Example 118\") == \"Example 118\"\n  capitalize(\"Example 119\") == \"Example 119\"\n  capitalize(\"Example 120\") == \"Example 120\"\n  capitalize(\"Example 121\") == \"Example 121\"\n  capitalize(\"Example 122\") == \"Example 122\"\n  capitalize(\"Example 123\") == \"Example 123\"\n  capitalize(\"Example 124\") == \"Example 124\"\n  capitalize(\"Example 125\") == \"Example 125\"\n  capitalize(\"Example 126\") == \"Example 126\"\n  capitalize(\"Example 127\") == \"Example 127\"\n  capitalize(\"Example 128", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/^\\s+|\\s+$/g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/^0+/, '');\n  let file_name = file_name.replace(/\\.+$/, '');\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_divisible_by_3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_divisible_by_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 5. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 5\n  */\nconst count_divisible_by_5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 6. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 6\n  */\nconst count_divisible_by_6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 6 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 7. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 7\n  */\nconst count_divisible_by_7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 8. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 8\n  */\nconst count_divisible_by_8 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 8 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 9. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 9\n  */\nconst count_divisible_by_9 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 10\n  */\nconst count_divisible_by_10 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 11. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 11\n  */\nconst count_divisible_by_11 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 12. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 12\n  */\nconst count_divisible_by_12 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 12 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 13. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 13\n  */\nconst count_divisible_by_13 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 14. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 14\n  */\nconst count_divisible_by_14 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 14 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 15. \n  \n  Examples:\n  For lst = [1,2,3] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = prime_number(word.length);\n    if (prime === word.length) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst special_filter_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -43\n  special_sum([33, -2, -3, 45, 21, 109]) => -54\n  */\nconst special_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -70\n  special_product([33, -2, -3, 45, 21, 109]) => -278\n  */\nconst special_product = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -43\n  special_sum([33, -2, -3, 45, 21, 109]) => -54\n  */\nconst special_sum_squares = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -70\n  special_product([33, -2, -3, 45, 21, 109]) => -278\n  */\nconst special_product_squares = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i] * nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max_squares = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min_squares = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the cubes of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -43\n  special_sum([33, -2, -3, 45, 21, 109]) => -54\n  */\nconst special_sum_cubes = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the cubes of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -70\n  special_product([33, -2, -3, 45, 21, 109]) => -278\n  */\nconst special_product_cubes = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i] * nums[i] * nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max_cubes = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min_cubes = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -43\n  special_sum([33, -2, -3, 45, 21, 109]) => -54\n  */\nconst special_sum_squares_cubes = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -70\n  special_product([33, -2, -3, 45, 21, 109]) => -278\n  */\nconst special_product_squares_cubes = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nThis solution is O(n^3) which is very inefficient.\n<|/ c |>\n<| c |>\nYes, I agree. I'm just trying to give a solution that is as close as possible to the OP's code.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = planet1 === planet2? [planet1, planet2] : [planet2, planet1];\n  const orbits = planets.map(planet => {\n    const [x, y] = planet.split(\"_\");\n    return { planet, x, y };\n  });\n  const sun = { x: 0, y: 0 };\n  const sunOrbits = orbits.filter(orbit => {\n    const [x, y] = orbit.planet.split(\"_\");\n    return Math.abs(x - sun.x) + Math.abs(y - sun.y) < 1;\n  });\n  return sunOrbits.sort((a, b) => a.x - b.x).map(orbit => orbit.planet);\n};\n\n// TESTS\nconst planet1 = \"Mercury\";\nconst planet2 = \"Neptune\";\nconst planet3 = \"Venus\";\nconst planet4 = \"Earth\";\nconst planet5 = \"Mars\";\nconst planet6 = \"Jupiter\";\nconst planet7 = \"Saturn\";\nconst planet8 = \"Uranus\";\nconst planet9 = \"Neptune\";\nconst planet10 = \"Mercury\";\nconst planet11 = \"Venus\";\nconst planet12 = \"Earth\";\nconst planet13 = \"Mars\";\nconst planet14 = \"Jupiter\";\nconst planet15 = \"Saturn\";\nconst planet16 = \"Uranus\";\nconst planet17 = \"Neptune\";\nconst planet18 = \"Mercury\";\nconst planet19 = \"Venus\";\nconst planet20 = \"Earth\";\nconst planet21 = \"Mars\";\nconst planet22 = \"Jupiter\";\nconst planet23 = \"Saturn\";\nconst planet24 = \"Uranus\";\nconst planet25 = \"Neptune\";\nconst planet26 = \"Mercury\";\nconst planet27 = \"Venus\";\nconst planet28 = \"Earth\";\nconst planet29 = \"Mars\";\nconst planet30 = \"Jupiter\";\nconst planet31 = \"Saturn\";\nconst planet32 = \"Uranus\";\nconst planet33 = \"Neptune\";\nconst planet34 = \"Mercury\";\nconst planet35 = \"Venus\";\nconst planet36 = \"Earth\";\nconst planet37 = \"Mars\";\nconst planet38 = \"Jupiter\";\nconst planet39 = \"Saturn\";\nconst planet40 = \"Uranus\";\nconst planet41 = \"Neptune\";\nconst planet42 = \"Mercury\";\nconst planet43 = \"Venus\";\nconst planet44 = \"Earth\";\nconst planet45 = \"Mars\";\nconst planet46 = \"Jupiter\";\nconst planet47 = \"Saturn\";\nconst planet48 = \"Uranus\";\nconst planet49 = \"Neptune\";\nconst planet50 = \"Mercury\";\nconst planet51 = \"Venus\";\nconst planet52 = \"Earth\";\nconst planet53 = \"Mars\";\nconst planet54 = \"Jupiter\";\nconst planet55 = \"Saturn\";\nconst planet56 = \"Uranus\";\nconst planet57 = \"Neptune\";\nconst planet58 = \"Mercury\";\nconst planet59 = \"Venus\";\nconst planet60 = \"Earth\";\nconst planet61 = \"Mars\";\nconst planet62 = \"Jupiter\";\nconst planet63 = \"Saturn\";\nconst planet64 = \"Uranus\";\nconst planet65 = \"Neptune\";\nconst planet66 = \"Mercury\";\nconst planet67 = \"Venus\";\nconst planet68 = \"Earth\";\nconst planet69 = \"Mars\";\nconst planet70 = \"Jupiter\";\nconst planet71 = \"Saturn\";\nconst planet72 = \"Uranus\";\nconst planet73 = \"Neptune\";\nconst planet74 = \"Mercury\";\nconst planet75 = \"Venus\";\nconst planet76 = \"Earth\";\nconst planet77 = \"Mars\";\nconst planet78 = \"Jupiter\";\nconst planet79 = \"Saturn\";\nconst planet80 = \"Uranus\";\nconst planet81 = \"Neptune\";\nconst planet82 = \"Mercury\";\nconst planet83 = \"Venus\";\nconst planet84 = \"Earth\";\nconst planet85 = \"Mars\";\nconst planet86 = \"Jupiter\";\nconst planet87 = \"Saturn\";\nconst planet88 = \"Uranus\";\nconst planet89 = \"Neptune\";\nconst planet90 = \"Mercury\";\nconst planet91 = \"Venus\";\nconst planet92 = \"Earth\";\nconst planet93 = \"Mars\";\nconst planet94 = \"Jupiter\";\nconst planet95 = \"Saturn\";\nconst planet96 = \"Uranus\";\nconst planet97 = \"Neptune\";\nconst planet98 = \"Mercury\";\nconst planet99 = \"Venus\";\nconst planet100 = \"Earth\";\nconst planet101 = \"Mars\";\nconst planet102 = \"Jupiter\";\nconst planet103 = \"Saturn\";\nconst planet104 = \"Uranus\";\nconst planet105 = \"Neptune\";\nconst planet106 = \"Mercury\";\nconst planet107 = \"Venus\";\nconst planet108 = \"Earth\";\nconst planet109 = \"Mars\";\nconst planet110 = \"Jupiter\";\nconst planet111 = \"Saturn\";\nconst planet112 = \"Uranus\";\nconst planet113 = \"Neptune\";\nconst planet114 = \"Mercury\";\nconst planet115 = \"Venus\";\nconst planet116 = \"Earth\";\nconst planet117 = \"Mars\";\nconst planet118 = \"Jupiter\";\nconst planet119 = \"Saturn\";\nconst planet120 = \"Uranus\";\nconst planet121 = \"Neptune\";\nconst planet122 = \"Mercury\";\nconst planet123 = \"Venus\";\nconst planet124 = \"Earth\";\nconst planet125 = \"Mars\";\nconst plan", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => word.length)\n   .sort((a, b) => b - a)\n   .map((word) => word)\n   .sort((a, b) => a.localeCompare(b));\n  return sorted_list;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end_and_separator = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + separator + separator + separator + separator + separator + separator + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end_and_separator_at_start_and_end_and_separator = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. The numbers in the list must be integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map(score => Math.abs(score));\n  const guessesScores = guess.map(score => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessesScore = guessesScores.reduce((acc, cur) => acc + cur);\n  const difference = guessesScore - gameScore;\n  return difference;\n};\n\n// test case\nconst testCases = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, -2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [4, 1, 1, 0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const strength = class_name_length - extension_length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a list of strings and returns the length of the shortest one.\n  Example:\n  my_list = ['hello', 'world', 'this', 'is','my', 'list']\n  my_list_length = get_list_length(my_list)\n  my_list_length == 14\n  */\nconst get_list_length = (my_list) => {\n  let shortest = 0;\n  for (let i = 0; i < my_list.length; i++) {\n    if (my_list[i].length < shortest) {\n      shortest = my_list[i].length;\n    }\n  }\n  return shortest;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears in the string.\n  Example:\n  my_string = 'hello'\n  my_string_length = count_in_string(my_string)\n  my_string_length == 3\n  */\nconst count_in_string = (my_string) => {\n  let count = 0;\n  for (let i = 0; i < my_string.length; i++) {\n    if (my_string[i] === my_string) {\n      count++;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === l && j === m) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_2 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_3 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_4 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_5 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_6 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_7 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_8 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_9 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_10 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_11 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_12 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_13 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_14 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_15 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_roman(19) == 'xix'\n  >>> int_to_decimal_roman(152) == 'cld'\n  >>> int_to_decimal_roman(426) == 'cddxvi'\n  */\nconst int_to_decimal_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLD'\n  >>> int_to_decimal_upper(426) == 'CDDXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'XIX'\n  >>> int_to_decimal_lower(152) == 'CLD'\n  >>> int_to_decimal_lower(426) == 'CDDXVI'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restriction", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac > bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all duplicates removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"string\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"aaaaaaa\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicates = (words) => {\n  let duplicates = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j) == word) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      duplicates.push(words[i]);\n    }\n  }\n  return duplicates;\n};\n\n/*Write a function that accepts a list of strings and returns a list of\n  strings with all words starting with same letter removed.\n\n  find_duplicates([\"name\", \"of\", \"string\"]) ==> [\"of\"]\n  find_duplicates([\"aaaaaaa\", \"bb\",\"cc\"]) ==> [\"bb\", \"cc\"]\n  */\nconst find_duplicate", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  if (needs > 0) {\n    result.push(needs);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  // TODO: Implement the algorithm here\n}\n\n// TODO: Test your algorithm here\nconst result = do_algebra(operator, array);\nconsole.log(result);</code>\n\nHope this helps!\n<|/ a |>\n<| c |>\nThanks for your answer! I understand your solution, but I still don't understand how it works. I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operand` is an array with all the operands, but how does `operator` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator` is an array with all the operators, but how does `operand` work? I understand that `operator", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newStr += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newStr += s.charAt(i).toUpperCase();\n    } else {\n      newStr += s.charAt(i);\n    }\n  }\n  return newStr;\n};\n\n/*You are given a string s.\n  Your task is to find and return the longest substring in s that is a palindrome.\n  Examples\n  longestPalindrome(\"aba\") = \"aba\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"abca\"\n  longestPalindrome(\"abca\") = \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '8da4e775a5c8c6d79f3a6fa0f29a2c4ab6'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha1').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'b86b27f45a35e8bb5a03d37d59f95601890afd80709'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha256').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_ripemd160('Hello world') == 'f70b163d9c665caf89f19f34c994be7a03e'\n  */\nconst string_to_ripemd160 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('ripemd160').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '8da4e775a5c8c6d79f3a6fa0f29a2c4ab6'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha1').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'b86b27f45a35e8bb5a03d37d59f95601890afd80709'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha256').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_ripemd160('Hello world') == 'f70b163d9c665caf89f19f34c994be7a03e'\n  */\nconst string_to_ripemd160 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('ripemd160').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '8da4e775a5c8c6d79f3a6fa0f29a2c4ab6'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha1').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'b86b27f45a35e8bb5a03d37d59f95601890afd80709'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha256').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its ripemd160 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: base_repr(123, 2) => 3\n  base_repr(123, 1) => 2\n  base_repr(123, 0) => 1\n  base_repr(123, -1) => 0\n  base_repr(123, -2) => 0\n  base_repr(123, -3) => 0\n  base_repr(123, -4) => 0\n  base_repr(123, -5) => 0\n  base_repr(123, -6) => 0\n  base_repr(123, -7) => 0\n  base_repr(123, -8) => 0\n  base_repr(123, -9) => 0\n  base_repr(123, -10) => 0\n  base_repr(123, -11) => 0\n  base_repr(123, -12) => 0\n  base_repr(123, -13) => 0\n  base_repr(123, -14) => 0\n  base_repr(123, -15) => 0\n  base_repr(123, -16) => 0\n  base_repr(123, -17) => 0\n  base_repr(123, -18) => 0\n  base_repr(123, -19) => 0\n  base_repr(123, -20) => 0\n  base_repr(123, -21) => 0\n  base_repr(123, -22) => 0\n  base_repr(123, -23) => 0\n  base_repr(123, -24) => 0\n  base_repr(123, -25) => 0\n  base_repr(123, -26) => 0\n  base_repr(123, -27) => 0\n  base_repr(123, -28) => 0\n  base_repr(123, -29) => 0\n  base_repr(123, -30) => 0\n  base_repr(123, -31) => 0\n  base_repr(123, -32) => 0\n  base_repr(123, -33) => 0\n  base_repr(123, -34) => 0\n  base_repr(123, -35) => 0\n  base_repr(123, -36) => 0\n  base_repr(123, -37) => 0\n  base_repr(123, -38) => 0\n  base_repr(123, -39) => 0\n  base_repr(123, -40) => 0\n  base_repr(123, -41) => 0\n  base_repr(123, -42) => 0\n  base_repr(123, -43) => 0\n  base_repr(123, -44) => 0\n  base_repr(123, -45) => 0\n  base_repr(123, -46) => 0\n  base_repr(123, -47) => 0\n  base_repr(123, -48) => 0\n  base_repr(123, -49) => 0\n  base_repr(123, -50) => 0\n  base_repr(123, -51) => 0\n  base_repr(123, -52) => 0\n  base_repr(123, -53) => 0\n  base_repr(123, -54) => 0\n  base_repr(123, -55) => 0\n  base_repr(123, -56) => 0\n  base_repr(123, -57) => 0\n  base_repr(123, -58) => 0\n  base_repr(123, -59) => 0\n  base_repr(123, -60) => 0\n  base_repr(123, -61) => 0\n  base_repr(123, -62) => 0\n  base_repr(123, -63) => 0\n  base_repr(123, -64) => 0\n  base_repr(123, -65) => 0\n  base_repr(123, -66) => 0\n  base_repr(123, -67) => 0\n  base_repr(123, -68) => 0\n  base_repr(123, -69) => 0\n  base_repr(123, -70) => 0\n  base_repr(123, -71) => 0\n  base_repr(123, -72) => 0\n  base_repr(123, -73) => 0\n  base_repr(123, -74) => 0\n  base_repr(123, -75) => 0\n  base_repr(123, -76) => 0\n  base_repr(123, -77) => 0\n  base_repr(123, -78) => 0\n  base_repr(123, -79) => 0\n  base_repr(123, -80) => 0\n  base_repr(123, -81) => 0\n  base_repr(123, -82) => 0\n  base_repr(123, -83) => 0\n  base_repr(123, -84) => 0\n  base_repr(123, -85) => 0\n  base_repr(123, -86) => 0\n  base_repr(123, -87) => 0\n  base_repr(123, -88) => 0\n  base_repr(123, -89) => 0\n  base_repr(123, -90) => 0\n  base_repr(123, -91) => 0\n  base_repr(123, -92) => 0\n  base_repr(123, -93) => 0\n  base_repr(123, -94) => 0\n  base_repr(123, -95) => 0\n  base_repr(123, -96) => 0\n  base_repr(123, -97) => 0\n  base_repr(123, -98) => 0\n  base_repr(123, -99) => 0\n  base_repr(123, -100) => 0\n  base_repr(123, -101) => 0\n  base_repr(123, -102) => 0\n  base_repr(123, -103) => 0\n  base_repr(123, -104) => 0\n  base_repr(123, -105) => 0\n  base_repr(123, -106) => 0\n  base_repr(123, -107) => 0\n  base_repr(123, -108) => 0\n  base_repr(123, -109) => 0\n  base_repr(123, -110) => 0\n  base_repr(123, -111) => 0\n  base_repr(123, -112) => 0\n  base_repr(123, -113) => 0\n  base_repr(123, -114) => 0\n  base_repr(123, -115) => 0\n  base_repr(123, -116) => 0\n  base_repr(123, -117) => 0\n  base_repr(123, -118) => 0\n  base_repr(123, -119) => 0\n  base_repr(123, -120) => 0\n  base_repr(123, -121) => 0\n  base_repr(123, -122) => 0\n  base_repr(123, -123) => 0\n  base_repr(123, -124) => 0\n  base_repr(123, -125) => 0\n  base_repr(123, -126) => 0\n  base_repr(123, -127) => 0\n  base_repr(123, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let current_beat = 0;\n  let current_note = '';\n  let current_note_length = 0;\n  let current_note_octave = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_char = music_array[i];\n    const music_char_index = music_string.indexOf(music_char);\n\n    if (music_char_index === -1) {\n      music_beats.push(current_beat);\n      current_beat = 0;\n      current_note = music_char;\n      current_note_length = 1;\n      current_note_octave = 0;\n    } else {\n      if (music_char === 'o') {\n        current_note_length = 4;\n        current_note_octave = 0;\n      } else if (music_char === '|') {\n        current_note_length = 2;\n        current_note_octave = 1;\n      } else if (music_char === '.') {\n        current_note_length = 1;\n        current_note_octave = 0;\n      } else {\n        throw new Error(`Unexpected music character \"${music_char}\"`);\n      }\n\n      current_beat += current_note_length;\n      current_note += music_char;\n    }\n  }\n\n  music_beats.push(current_beat);\n  return music_beats;\n};\n\n// Tests\nconst music_tests = [\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 2],\n  ['o o|.| o| o|.|.|.|.| o o', 1],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlapping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Given a string, return a string with the first letter capitalized.\n  >>> capitalize_first('hello')\n  'Hello'\n  */\nconst capitalize_first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, return a string with the first letter of each word capitalized.\n  >>> capitalize_first_word('hello world')\n  'Hello World'\n  */\nconst capitalize_first_word = (string) => {\n  return string.split(' ').map((word) => capitalize_first(word)).join(' ');\n};\n\n/* Given a string, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseFloat(integer);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int2 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10).toFixed(precision);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int3 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int4 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int5 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int6 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int7 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int8 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int9 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int10 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int11 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int12 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int13 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int14 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\nconst truncate_number_int15 = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseInt(integer, 10);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to the given precision.\n  >>> truncate_number(3.5, 2)\n  3.5\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest_number = numbers[0];\n  const biggest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    } else if (numbers[i] > biggest_number) {\n      biggest_number = numbers[i];\n    }\n  }\n  return [smallest_number, biggest_number];\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst stepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number multiplied by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSize = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number multiplied by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStep = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSize = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStep = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSize = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStepSize = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSizeByStepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStepSizeByStepSize = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSizeByStepSizeByStepSize = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst divideStepSizeByStepSizeByStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number / step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n */\nconst multiplyStepSizeByStepSizeByStepSizeByStepSizeByStepSizeByStepSizeByStep = (number, step) => {\n  return number * step;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * given number divided by the step size. E.g. stepSize(0.5, 3)\n * returns 0.25\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return numbers.map(n => n * scale);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scale = range / numbers.length;\n  return [min_number - scale * 0.5, max_number + scale * 0.5];\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_min_max_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset_and_scale_and_offset = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  const integers = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      integers.push(value);\n    }\n  });\n  return integers;\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_floats = (values) => {\n  const floats = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      floats.push(value);\n    }\n  });\n  return floats;\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_strings = (values) => {\n  const strings = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      strings.push(value);\n    }\n  });\n  return strings;\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [true, false]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_booleans = (values) => {\n  const booleans = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      booleans.push(value);\n    }\n  });\n  return booleans;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const none = [];\n  values.forEach((value) => {\n    if (value === null) {\n      none.push(value);\n    }\n  });\n  return none;\n};\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filter_dict(['a', 3.14, 5])\n  [{}]\n  >>> filter_dict(['a', 3.14, 5, 'abc', {}, []])\n  [{}]\n  */\nconst filter_dict = (values) => {\n  const dicts = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      dicts.push(value);\n    }\n  });\n  return dicts;\n};\n\n/**\n * Filter given list of any python values only for lists\n  >>> filter_list(['a', 3.14, 5])\n  [[]]\n  >>> filter_list(['a', 3.14, 5, 'abc', {}, []])\n  [[]]\n  */\nconst filter_list = (values) => {\n  const lists = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      lists.push(value);\n    }\n  });\n  return lists;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filter_tuple(['a', 3.14, 5])\n  [('a',)]\n  >>> filter_tuple(['a', 3.14, 5, 'abc', {}, []])\n  [('a',)]\n  */\nconst filter_tuple = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filter_tuple(['a', 3.14, 5])\n  [('a',)]\n  >>> filter_tuple(['a', 3.14, 5, 'abc', {}, []])\n  [('a',)]\n  */\nconst filter_tuple = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filter_tuple(['a', 3.14, 5])\n  [('a',)]\n  >>> filter_tuple(['a', 3.14, 5, 'abc', {}, []])\n  [('a',)]\n  */\nconst filter_tuple = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filter_tuple(['a', 3.14, 5])\n  [('a',)]\n  >>> filter_tuple(['a', 3.14, 5, 'abc', {}, []])\n  [('a',)]\n  */\nconst filter_tuple = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filter_tuple(['a', 3.14, 5])\n  [('a',)]\n  >>> filter_tuple(['a', 3.14, 5, 'abc', {}, []])\n  [('a',)]\n  */\nconst filter_tuple = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filter_set(['a', 3.14, 5])\n  [set()]\n  >>> filter_set(['a', 3.14, 5, 'abc', {}, []])\n  [set()]\n  */\nconst filter_set = (values) => {\n  const sets = [];\n  values.forEach", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2;\n    } else {\n      length++;\n    }\n  }\n  return length;\n};\n\n/* Return index of first occurrence of given substring in given string\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'b')\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates_less_than_or_equal_to_one_with_duplicates = (numbers) => {\n  const output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n    } else if (output.indexOf(numbers[i])!== i) {\n      output.splice(i, 0, numbers[i]);\n    }\n  }\n  return output;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_less_th", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().split('').map(letter => letter.toUpperCase()).join('');\n};\n\n/* Given a string, remove all spaces.\n  >>> remove_spaces('Hello World')\n  'HelloWorld'\n  */\nconst remove_spaces = (string) => {\n  return string.replace(/ /g, '');\n};\n\n/* Given a string, remove all punctuation.\n  >>> remove_punctuation('Hello World!')\n  'HelloWorld'\n  */\nconst remove_punctuation = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, remove all numbers.\n  >>> remove_numbers('Hello World!')\n  'HelloWorld'\n  */\nconst remove_numbers = (string) => {\n  return string.replace(/[0-9]/g, '');\n};\n\n/* Given a string, remove all special characters.\n  >>> remove_special_characters('Hello World!')\n  'HelloWorld'\n  */\nconst remove_special_characters = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters.\n  >>> remove_non_alphanumeric('Hello World!')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/* Given a string, remove all whitespace.\n  >>> remove_whitespace('Hello World!')\n  'HelloWorld'\n  */\nconst remove_whitespace = (string) => {\n  return string.replace(/\\s/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace.\n  >>> remove_non_alphanumeric_whitespace('Hello World!')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_whitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase('Hello World!')\n  'helloworld'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and uppercase.\n  >>> remove_non_alphanumeric_whitespace_uppercase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and uppercase and lowercase.\n  >>> remove_non_alphanumeric_whitespace_uppercase_lowercase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase_lowercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase('Hello World!')\n  'helloWorld'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and uppercase and lowercase and swap case.\n  >>> remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and uppercase and lowercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and uppercase and lowercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase_swapcase_swapcase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_uppercase_lowercase_swapcase_uppercase_swapcase_swapcase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase();\n};\n\n/* Given a string, remove all non-alphanumeric characters and whitespace and lowercase and uppercase and swap case and uppercase.\n  >>> remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase_swapcase_swapcase_swapcase('Hello World!')\n  'HELLOWORLD'\n  */\nconst remove_non_alphanumeric_whitespace_lowercase_uppercase_swapcase_uppercase_swapcase_swapcase_swapcase_swapcase = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all whitespace from a string\n  >>> removeWhiteSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  foo bar  ')\n  'foo bar'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const prefix_regex = new RegExp(`^${prefix}`, 'i');\n  return strings.filter(s => prefix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  const suffix_regex = new RegExp(`${suffix}$`, 'i');\n  return strings.filter(s => suffix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, 'i');\n  return strings.filter(s => substring_search.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_search = new RegExp(substring, '", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible_by_three([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_three = (l) => {\n  return l.filter(x => x % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible_by_five([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_five([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_five = (l) => {\n  return l.filter(x => x % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible_by_seven([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_seven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_seven = (l) => {\n  return l.filter(x => x % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible_by_eleven([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_eleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_eleven = (l) => {\n  return l.filter(x => x % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible_by_thirteen([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_thirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_thirteen = (l) => {\n  return l.filter(x => x % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible_by_seventeen([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_seventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_seventeen = (l) => {\n  return l.filter(x => x % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible_by_nineteen([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_nineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_nineteen = (l) => {\n  return l.filter(x => x % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> get_divisible_by_twenty([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_twenty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_twenty = (l) => {\n  return l.filter(x => x % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> get_divisible_by_fifty([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_fifty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_fifty = (l) => {\n  return l.filter(x => x % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 30.\n  >>> get_divisible_by_hundred([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_hundred([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_hundred = (l) => {\n  return l.filter(x => x % 30 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100.\n  >>> get_divisible_by_thousand([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_thousand([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_thousand = (l) => {\n  return l.filter(x => x % 100 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 1000.\n  >>> get_divisible_by_million([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_million([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_million = (l) => {\n  return l.filter(x => x % 1000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 10000.\n  >>> get_divisible_by_billion([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> get_divisible_by_billion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -10, -5, -5, -5, -5, -5, -5]\n  */\nconst get_divisible_by_billion = (l) => {\n  return l.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 1;\n  let zeroPoint = 0;\n  let zeroPointIndex = 0;\n  let zeroPointValue = 0;\n  let zeroPointValueIndex = 0;\n  let zeroPointValueIndex2 = 0;\n  let zeroPointValueIndex3 = 0;\n  let zeroPointValueIndex4 = 0;\n  let zeroPointValueIndex5 = 0;\n  let zeroPointValueIndex6 = 0;\n  let zeroPointValueIndex7 = 0;\n  let zeroPointValueIndex8 = 0;\n  let zeroPointValueIndex9 = 0;\n  let zeroPointValueIndex10 = 0;\n  let zeroPointValueIndex11 = 0;\n  let zeroPointValueIndex12 = 0;\n  let zeroPointValueIndex13 = 0;\n  let zeroPointValueIndex14 = 0;\n  let zeroPointValueIndex15 = 0;\n  let zeroPointValueIndex16 = 0;\n  let zeroPointValueIndex17 = 0;\n  let zeroPointValueIndex18 = 0;\n  let zeroPointValueIndex19 = 0;\n  let zeroPointValueIndex20 = 0;\n  let zeroPointValueIndex21 = 0;\n  let zeroPointValueIndex22 = 0;\n  let zeroPointValueIndex23 = 0;\n  let zeroPointValueIndex24 = 0;\n  let zeroPointValueIndex25 = 0;\n  let zeroPointValueIndex26 = 0;\n  let zeroPointValueIndex27 = 0;\n  let zeroPointValueIndex28 = 0;\n  let zeroPointValueIndex29 = 0;\n  let zeroPointValueIndex30 = 0;\n  let zeroPointValueIndex31 = 0;\n  let zeroPointValueIndex32 = 0;\n  let zeroPointValueIndex33 = 0;\n  let zeroPointValueIndex34 = 0;\n  let zeroPointValueIndex35 = 0;\n  let zeroPointValueIndex36 = 0;\n  let zeroPointValueIndex37 = 0;\n  let zeroPointValueIndex38 = 0;\n  let zeroPointValueIndex39 = 0;\n  let zeroPointValueIndex40 = 0;\n  let zeroPointValueIndex41 = 0;\n  let zeroPointValueIndex42 = 0;\n  let zeroPointValueIndex43 = 0;\n  let zeroPointValueIndex44 = 0;\n  let zeroPointValueIndex45 = 0;\n  let zeroPointValueIndex46 = 0;\n  let zeroPointValueIndex47 = 0;\n  let zeroPointValueIndex48 = 0;\n  let zeroPointValueIndex49 = 0;\n  let zeroPointValueIndex50 = 0;\n  let zeroPointValueIndex51 = 0;\n  let zeroPointValueIndex52 = 0;\n  let zeroPointValueIndex53 = 0;\n  let zeroPointValueIndex54 = 0;\n  let zeroPointValueIndex55 = 0;\n  let zeroPointValueIndex56 = 0;\n  let zeroPointValueIndex57 = 0;\n  let zeroPointValueIndex58 = 0;\n  let zeroPointValueIndex59 = 0;\n  let zeroPointValueIndex60 = 0;\n  let zeroPointValueIndex61 = 0;\n  let zeroPointValueIndex62 = 0;\n  let zeroPointValueIndex63 = 0;\n  let zeroPointValueIndex64 = 0;\n  let zeroPointValueIndex65 = 0;\n  let zeroPointValueIndex66 = 0;\n  let zeroPointValueIndex67 = 0;\n  let zeroPointValueIndex68 = 0;\n  let zeroPointValueIndex69 = 0;\n  let zeroPointValueIndex70 = 0;\n  let zeroPointValueIndex71 = 0;\n  let zeroPointValueIndex72 = 0;\n  let zeroPointValueIndex73 = 0;\n  let zeroPointValueIndex74 = 0;\n  let zeroPointValueIndex75 = 0;\n  let zeroPointValueIndex76 = 0;\n  let zeroPointValueIndex77 = 0;\n  let zeroPointValueIndex78 = 0;\n  let zeroPointValueIndex79 = 0;\n  let zeroPointValueIndex80 = 0;\n  let zeroPointValueIndex81 = 0;\n  let zeroPointValueIndex82 = 0;\n  let zeroPointValueIndex83 = 0;\n  let zeroPointValueIndex84 = 0;\n  let zeroPointValueIndex85 = 0;\n  let zeroPointValueIndex86 = 0;\n  let zeroPointValueIndex87 = 0;\n  let zeroPointValueIndex88 = 0;\n  let zeroPointValueIndex89 = 0;\n  let zeroPointValueIndex90 = 0;\n  let zeroPointValueIndex91 = 0;\n  let zeroPointValueIndex92 = 0;\n  let zeroPointValueIndex93 = 0;\n  let zeroPointValueIndex94 = 0;\n  let zeroPointValueIndex95 = 0;\n  let zeroPointValueIndex96 = 0;\n  let zeroPointValueIndex97 = 0;\n  let zeroPointValueIndex98 = 0;\n  let zeroPointValueIndex99 = 0;\n  let zeroPointValueIndex100 = 0;\n  let zeroPointValueIndex101 = 0;\n  let zeroPointValueIndex102 = 1;\n  let zeroPointValueIndex103 = 1;\n  let zeroPointValueIndex104 = 1;\n  let zeroPointValueIndex105 = 1;\n  let zeroPointValueIndex106 = 1;\n  let zeroPointValueIndex107 = 1;\n  let zeroPointValueIndex108 = 1;\n  let zeroPointValueIndex109 = 1;\n  let zeroPointValueIndex110 = 1;\n  let zeroPointValueIndex111 = 1;\n  let zeroPointValueIndex112 = 1;\n  let zeroPointValueIndex113 = 1;\n  let zeroPointValueIndex114 = 1;\n  let zeroPointValueIndex115 = 1;\n  let zeroPointValueIndex116 = 1;\n  let zeroPointValueIndex117 = 1;\n  let zeroPointValueIndex118 = 1;\n  let zeroPointValueIndex119 = 1;\n  let zeroPointValueIndex120 = 1;\n  let zeroPointValueIndex121 = 1;\n  let zeroPointValueIndex122 = 1;\n  let zeroPointValueIndex123 = 1;\n  let zeroPointValueIndex124 = 1;\n  let zeroPointValueIndex125 = 1;\n  let zeroPointValueIndex126 = 1;\n  let zeroPointValueIndex127 = 1;\n  let zeroPointValueIndex128 = 1;\n  let zeroPointValueIndex129 = 1;\n  let zeroPointValueIndex130 = 1;\n  let zeroPointValueIndex131 = 1;\n  let zeroPointValueIndex132 = 1;\n  let zeroPointValueIndex133 = 1;\n  let zeroPointValueIndex134 = 1;\n  let zeroPointValueIndex135 = 1;\n  let zeroPointValueIndex136 = 1;\n  let zeroPointValueIndex137 = 1;\n  let zeroPointValueIndex138 = 1;\n  let zeroPointValueIndex139 = 1;\n  let zeroPointValueIndex140 = 1;\n  let zeroPointValueIndex141 = 1;\n  let zeroPointValueIndex142 = 1;\n  let zeroPointValueIndex143 = 1;\n  let zeroPointValueIndex144 = 1;\n  let zeroPointValueIndex145 = 1;\n  let zeroPointValueIndex146 = 1;\n  let zeroPointValueIndex147 = 1;\n  let zeroPointValueIndex148 = 1;\n  let zeroPointValueIndex149 = 1;\n  let zeroPointValueIndex150 = 1;\n  let zeroPointValueIndex151 = 1;\n  let zeroPointValueIndex152 = 1;\n  let zeroPointValueIndex153 = 1;\n  let zeroPointValueIndex154 = 1;\n  let zeroPointValueIndex155 = 1;\n  let zeroPointValueIndex156 = 1;\n  let zeroPointValueIndex157 = 1;\n  let zeroPointValueIndex158 = 1;\n  let zeroPointValueIndex159 = 1;\n  let zeroPointValueIndex160 = 1;\n  let zeroPointValueIndex161 = 1;\n  let zeroPointValueIndex162 = 1;\n  let zeroPoint", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_fifth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_seventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_seventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_seventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_ninth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_ninth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_ninth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twentieth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twentieth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twentieth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty five, while its values at the indicies that are divisible by twenty five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_five([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_five([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_five = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 25 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty seven, while its values at the indicies that are divisible by twenty seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_seven([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_seven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_seven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 27 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty nine, while its values at the indicies that are divisible by twenty nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_nine([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_nine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_nine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 29 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_thirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_thirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_thirty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty five, while its values at the indicies that are divisible by thirty five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_thirty_five([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_thirty_five([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_thirty_five = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 35 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty seven, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortBy = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscDescDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscDescDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscDescDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscAsc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByAscDesc = (l, key) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i][key]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  a.sort((a, b) => {\n    if (a[key] < b[key]) return 1;\n    if (a[key] > b[key]) return -1;\n    return 0;\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sum([1, 2, 3], 3)\n  2\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sum_less_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sum([1, 2, 3], 3)\n  2\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_less_than_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sum([1, 2, 3], 3)\n  2\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_greater_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum([1, 2, 3], 3)\n  2\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_greater_than_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than the given number.\n  >>> product([1, 2, 3], 3)\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst product_less_than = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than or equal to the given number.\n  >>> product([1, 2, 3], 3)\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst product_less_than_or_equal_to = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are greater than the given number.\n  >>> product([1, 2, 3], 3)\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst product_greater_than = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are greater than or equal to the given number.\n  >>> product([1, 2, 3], 3)\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst product_greater_than_or_equal_to = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are divisible by the given number.\n  >>> sum([1, 2, 3], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_divisible_by = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % num === 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by the given number or are equal to the given number.\n  >>> sum([1, 2, 3], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_divisible_by_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % num === 0 || l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by the given number or are less than the given number.\n  >>> sum([1, 2, 3], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_divisible_by_less_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % num === 0 || l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by the given number or are less than or equal to the given number.\n  >>> sum([1, 2, 3], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  55\n  */\nconst sum_divisible_by_less_than_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % num === 0 || l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_even_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_odd_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_odd_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_odd_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_odd_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_odd_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_even_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_even_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_even_odd_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_even_odd_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_even_odd_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_even_odd_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_even_odd_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_even_odd_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_even_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse function. Returns decoded string.\n  */\nconst decode_cyclic_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse2 function. Returns decoded string.\n  */\nconst decode_cyclic_reverse2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse3 function. Returns decoded string.\n  */\nconst decode_cyclic_reverse3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse4 function. Returns decoded string.\n  */\nconst decode_cyclic_reverse4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse5 function. Returns decoded string.\n  */\nconst decode_cyclic_reverse5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse6 function. Returns decoded string.\n  */\nconst decode_cyclic_reverse6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let i = 1; i <= n; i++) {\n    const temp = a;\n    a = b;\n    b = c;\n    c = temp + b;\n  }\n  return c;\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  return prime_fib(n);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(2)\n  True\n  >>> is_prime(3)\n  False\n  >>> is_prime(7)\n  True", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const mean = mean(numbers);\n    return numbers.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.5\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => numbers.sort((a, b) => a - b)[numbers.length / 2];\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.5\n  */\nconst mean_absolute_deviation_median_mode = (numbers) => {\n  const median = (numbers) => numbers.sort((a, b) => a - b)[numbers.length / 2];\n  const mode = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_mode_median = (numbers) => {\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  const median = (numbers) => numbers.sort((a, b) => a - b)[numbers.length / 2];\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.5\n  */\nconst mean_absolute_deviation_median_mode_median = (numbers) => {\n  const median = (numbers) => numbers.sort((a, b) => a - b)[numbers.length / 2];\n  const mode = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_mode_mode_median = (numbers) => {\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_mode_mode_mode_median = (numbers) => {\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  return mode(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_mode_mode_mode_mode_median = (numbers) => {\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0) / modes.length;\n  };\n  const mode = (numbers) => {\n    const modes = numbers.reduce((a, b) => {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    return modes.reduce((a, b) => a + b, 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation([1, 3, 5, 0])\n  false\n  >>> is_permutation([1, 3, -2, 1])\n  true\n  >>> is_permutation([1, 2, 3, 7])\n  false\n  >>> is_permutation([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation([1])\n  false\n  */\nconst is_permutation = (l) => {\n  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  const n = l.length;\n  if (n < size) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0], 4)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 4)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7], 4)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7], 4)\n  true\n  >>> is_permutation_of_size([1], 4)\n  false\n  */\nconst is_permutation_of_size_2 = (l, size) => {\n  const n = l.length;\n  if (n < size) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0], 5)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 5)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7], 5)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7], 5)\n  true\n  >>> is_permutation_of_size([1], 5)\n  false\n  */\nconst is_permutation_of_size_3 = (l, size) => {\n  const n = l.length;\n  if (n < size) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0], 6)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 6)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7], 6)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7], 6)\n  true\n  >>> is_permutation_of_size([1], 6)\n  false\n  */\nconst is_permutation_of_size_4 = (l, size) => {\n  const n = l.length;\n  if (n < size) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0], 7)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 7)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7], 7)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7], 7)\n  true\n  >>> is_permutation_of_size([1], 7)\n  false\n  */\nconst is_permutation_of_size_5 = (l, size) => {\n  const n = l.length;\n  if (n < size) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n      const b = l[j];\n      for (let k = j + 1; k < n; k++) {\n        const c = l[k];\n        if ((a + b + c) === 0) {\n          set.add([a, b, c]);\n        }\n      }\n    }\n  }\n  return set.size === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_2 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_3 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_4 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_5 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_6 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_7 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list = (l) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_two([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_two([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_two = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_two([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list_by_two([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list_by_two = (l) => {\n  let i = l.length - 2;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_three([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_three([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_three = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_three([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list_by_three([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list_by_three = (l) => {\n  let i = l.length - 3;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_four([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_four([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_four = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_four([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list_by_four([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list_by_four = (l) => {\n  let i = l.length - 4;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_five([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_five([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_five = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_five([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list_by_five([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list_by_five = (l) => {\n  let i = l.length - 5;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_six([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_six([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_six = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_six([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list_by_six([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 10, 1, 123]\n  */\nconst decr_list_by_six = (l) => {\n  let i = l.length - 6;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_seven([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_seven([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_seven = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++]);\n    newList.push(l[i++", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation([1, 3, 5, 0])\n  false\n  >>> is_permutation([1, 3, -2, 1])\n  false\n  >>> is_permutation([1, 2, 3, 7])\n  false\n  >>> is_permutation([2, 4, -5, 3, 5, 7])\n  true\n  >>> is_permutation([1])\n  false\n  */\nconst is_permutation = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_power_of_two takes an integer as an input.\n  it returns true if it is a power of two, and false otherwise.\n  >>> is_power_of_two(8)\n  true\n  >>> is_power_of_two(15)\n  true\n  >>> is_power_of_two(16)\n  false\n  >>> is_power_of_two(17)\n  false\n  */\nconst is_power_of_two = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/*\n  is_power_of_two_or_equal_to takes an integer as an input.\n  it returns true if it is a power of two, and false otherwise.\n  >>> is_power_of_two_or_equal_to(8)\n  true\n  >>> is_power_of_two_or_equal_to(15)\n  true\n  >>> is_power_of_two_or_equal_to(16)\n  true\n  >>> is_power_of_two_or_equal_to(17)\n  true\n  */\nconst is_power_of_two_or_equal_to = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/*\n  is_power_of_three_or_equal_to takes an integer as an input.\n  it returns true if it is a power of three, and false otherwise.\n  >>> is_power_of_three_or_equal_to(8)\n  true\n  >>> is_power_of_three_or_equal_to(15)\n  true\n  >>> is_power_of_three_or_equal_to(16)\n  true\n  >>> is_power_of_three_or_equal_to(17)\n  true\n  */\nconst is_power_of_three_or_equal_to = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0;\n};\n\n/*\n  is_power_of_five takes an integer as an input.\n  it returns true if it is a power of five, and false otherwise.\n  >>> is_power_of_five(8)\n  true\n  >>> is_power_of_five(15)\n  true\n  >>> is_power_of_five(16)\n  true\n  >>> is_power_of_five(17)\n  true\n  */\nconst is_power_of_five = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0;\n};\n\n/*\n  is_power_of_seven takes an integer as an input.\n  it returns true if it is a power of seven, and false otherwise.\n  >>> is_power_of_seven(8)\n  true\n  >>> is_power_of_seven(15)\n  true\n  >>> is_power_of_seven(16)\n  true\n  >>> is_power_of_seven(17)\n  true\n  */\nconst is_power_of_seven = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0 && (n & (n - 5)) === 0;\n};\n\n/*\n  is_power_of_eight takes an integer as an input.\n  it returns true if it is a power of eight, and false otherwise.\n  >>> is_power_of_eight(8)\n  true\n  >>> is_power_of_eight(15)\n  true\n  >>> is_power_of_eight(16)\n  true\n  >>> is_power_of_eight(17)\n  true\n  */\nconst is_power_of_eight = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0 && (n & (n - 5)) === 0 && (n & (n - 6)) === 0;\n};\n\n/*\n  is_power_of_nine takes an integer as an input.\n  it returns true if it is a power of nine, and false otherwise.\n  >>> is_power_of_nine(8)\n  true\n  >>> is_power_of_nine(15)\n  true\n  >>> is_power_of_nine(16)\n  true\n  >>> is_power_of_nine(17)\n  true\n  */\nconst is_power_of_nine = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0 && (n & (n - 5)) === 0 && (n & (n - 6)) === 0 && (n & (n - 7)) === 0;\n};\n\n/*\n  is_power_of_ten takes an integer as an input.\n  it returns true if it is a power of ten, and false otherwise.\n  >>> is_power_of_ten(8)\n  true\n  >>> is_power_of_ten(15)\n  true\n  >>> is_power_of_ten(16)\n  true\n  >>> is_power_of_ten(17)\n  true\n  */\nconst is_power_of_ten = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0 && (n & (n - 5)) === 0 && (n & (n - 6)) === 0 && (n & (n - 7)) === 0 && (n & (n - 8)) === 0 && (n & (n - 9)) === 0;\n};\n\n/*\n  is_power_of_eleven takes an integer as an input.\n  it returns true if it is a power of eleven, and false otherwise.\n  >>> is_power_of_eleven(8)\n  true\n  >>> is_power_of_eleven(15)\n  true\n  >>> is_power_of_eleven(16)\n  true\n  >>> is_power_of_eleven(17)\n  true\n  */\nconst is_power_of_eleven = (n) => {\n  return n!== 0 && (n & (n - 1)) === 0 && (n & (n - 2)) === 0 && (n & (n - 3)) === 0 && (n & (n - 4)) === 0 && (n & (n - 5)) === 0 && (n & (n - 6)) === 0 && (n & (n - 7)) === 0 && (n & (n - 8)) === 0 && (n & (n - 9)) === 0 && (n & (n - 10)) === 0;\n};\n\n/*\n  is_power_of_twelve takes an integer ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString(base);\n  return str.length < base? change_base(str, base) : str;\n};\n\n/*\n  >>> is_palindrome('racecar')\n  True\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecar')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_palindrome('racecars')\n  False\n  >>> is_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogram_area(5, 3)\n  15\n  */\nconst parallelogram_area = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoid_area(5, 3)\n  15\n  */\nconst trapezoid_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogram_area(5, 3)\n  15\n  */\nconst parallelogram_area = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoid_area(5, 3)\n  15\n  */\nconst trapezoid_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogram_area(5, 3)\n  15\n  */\nconst parallelogram_area = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoid_area(5, 3)\n  15\n  */\nconst trapezoid_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogram_area(5, 3)\n  15\n  */\nconst parallelogram_area = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoid_area(5, 3)\n  15\n  */\nconst trapezoid_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogram_area(5, 3)\n  15\n  */\nconst parallelogram_area = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoid_area(5, 3)\n  15\n  */\nconst trapezoid_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  15\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  15\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  15\n  */\nconst circle_area = (a, h) => {\n  return a * Math.PI * Math.pow(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// Problem #6\n/*\n  Write a function to compute the sum of all even Fibonacci numbers up to and including n.\n  >>> fibSum(10)\n  55\n  >>> fibSum(100)\n  1497\n  >>> fibSum(1000)\n  486\n  >>> fibSum(10000)\n  12586269025\n  >>> fibSum(100000)\n  466004661349312\n  >>> fibSum(1000000)\n  12586269025336880\n  >>> fibSum(10000000)\n  46600466134931274603647\n  >>> fibSum(100000000)\n  125862690253368801600\n  >>> fibSum(1000000000)\n  4660046613493127460364734007\n  >>> fibSum(10000000000)\n  1258626902533688016003744007\n  >>> fibSum(100000000000)\n  46600466134931274603647340074035\n  >>> fibSum(1000000000000)\n  12586269025336880160037440074035005\n  >>> fibSum(10000000000000)\n  46600466134931274603647340074035005009\n  >>> fibSum(100000000000000)\n  12586269025336880160037440074035005009007\n  >>> fibSum(1000000000000000)\n  46600466134931274603647340074035005009007000\n  >>> fibSum(10000000000000000)\n  125862690253368801600374400740350050090070000\n  >>> fibSum(100000000000000000)\n  4660046613493127460364734007403500500900700000\n  >>> fibSum(1000000000000000000)\n  12586269025336880160037440074035005009007000000\n  >>> fibSum(10000000000000000000)\n  466004661349312746036473400740350050090070000000\n  >>> fibSum(100000000000000000000)\n  1258626902533688016003744007403500500900700000000\n  >>> fibSum(1000000000000000000000)\n  46600466134931274603647340074035005009007000000000\n  >>> fibSum(10000000000000000000000)\n  125862690253368801600374400740350050090070000000000\n  >>> fibSum(100000000000000000000000)\n  4660046613493127460364734007403500500900700000000000\n  >>> fibSum(1000000000000000000000000)\n  12586269025336880160037440074035005009007000000000000\n  >>> fibSum(10000000000000000000000000)\n  466004661349312746036473400740350050090070000000000000\n  >>> fibSum(100000000000000000000000000)\n  1258626902533688016003744007403500500900700000000000000\n  >>> fibSum(1000000000000000000000000000)\n  46600466134931274603647340074035005009007000000000000000\n  >>> fibSum(10000000000000000000000000000)\n  125862690253368801600374400740350050090070000000000000000\n  >>> fibSum(100000000000000000000000000000)\n  4660046613493127460364734007403500500900700000000000000000\n  >>> fibSum(1000000000000000000000000000000)\n  12586269025336880160037440074035005009007000000000000000000\n  >>> fibSum(10000000000000000000000000000000)\n  466004661349312746036473400740350050090070000000000000000000\n  >>> fibSum(100000000000000000000000000000000)\n  1258626902533688016003744007403500500900700000000000000000000\n  >>> fibSum(1000000000000000000000000000000000)\n  46600466134931274603647340074035005009007000000000000000000000\n  >>> fibSum(10000000000000000000000000000000000)\n  125862690253368801600374400740350050090070000000000000000000000\n  >>> fibSum(100000000000000000000000000000000000)\n  4660046613493127460364734007403500500900700000000000000000000000\n  >>> fibSum(1000000000000000000000000000000000000)\n  12586269025336880160037440074035005009007000000000000000000000000\n  >>> fibSum(10000000000000000000000000000000000000)\n  466004661349312746036473400740350050090070000000000000000000000000\n  >>> fibSum(100000000000000000000000000000000000000)\n  1258626902533688016003744007403500500900700000000000000000000000000\n  >>> fibSum(1000000000000000000000000000000000000000)\n  46600466134931274603647340074035005009007000000000000000000000000000\n  >>> fibSum(10000000000000000000000000000000000000000)\n  125862690253368801600374400740350050090070000000000000000000000000000\n  >>> fibSum(100000000000000000000000000000000000000000)\n  4660046613493127460364734007403500500900700000000000000000000000000000\n  >>> fibSum(1000000000000000000000000000000000000000000)\n  12586269025336880160037440074035005009007000000000000000000000000000000\n  >>> fibSum(10000000000000000000000000000000000000000000)\n  466004661349312746036473400740350050090070000000000000000000000000000000\n  >>> fibSum(1000000000000000000000000000000000000000000)\n  125862690253368801600374400740350050090070000000000000000000000000000000\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    counts[value] = counts[value]? counts[value] + 1 : 1;\n  }\n  return Object.values(counts).sort((a, b) => b - a)[0];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/ /g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed.replace(/\\s+/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome('a b a a')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  let reversed = text;\n  reverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const r = n % p;\n  return r === 0? p : r === p? r : modp(n - r, p);\n};\n\n/**\n * Returns true if n is a power of 2.\n */\nconst isPowerOf2 = n => modp(n, 2) === 1;\n\n/**\n * Returns true if n is a power of 3\n */\nconst isPowerOf3 = n => modp(n, 3) === 1;\n\n/**\n * Returns true if n is a power of 4\n */\nconst isPowerOf4 = n => modp(n, 4) === 1;\n\n/**\n * Returns true if n is a power of 5\n */\nconst isPowerOf5 = n => modp(n, 5) === 1;\n\n/**\n * Returns true if n is a power of 6\n */\nconst isPowerOf6 = n => modp(n, 6) === 1;\n\n/**\n * Returns true if n is a power of 7\n */\nconst isPowerOf7 = n => modp(n, 7) === 1;\n\n/**\n * Returns true if n is a power of 8\n */\nconst isPowerOf8 = n => modp(n, 8) === 1;\n\n/**\n * Returns true if n is a power of 9\n */\nconst isPowerOf9 = n => modp(n, 9) === 1;\n\n/**\n * Returns true if n is a power of 10\n */\nconst isPowerOf10 = n => modp(n, 10) === 1;\n\n/**\n * Returns true if n is a power of 11\n */\nconst isPowerOf11 = n => modp(n, 11) === 1;\n\n/**\n * Returns true if n is a power of 12\n */\nconst isPowerOf12 = n => modp(n, 12) === 1;\n\n/**\n * Returns true if n is a power of 13\n */\nconst isPowerOf13 = n => modp(n, 13) === 1;\n\n/**\n * Returns true if n is a power of 14\n */\nconst isPowerOf14 = n => modp(n, 14) === 1;\n\n/**\n * Returns true if n is a power of 15\n */\nconst isPowerOf15 = n => modp(n, 15) === 1;\n\n/**\n * Returns true if n is a power of 16\n */\nconst isPowerOf16 = n => modp(n, 16) === 1;\n\n/**\n * Returns true if n is a power of 17\n */\nconst isPowerOf17 = n => modp(n, 17) === 1;\n\n/**\n * Returns true if n is a power of 18\n */\nconst isPowerOf18 = n => modp(n, 18) === 1;\n\n/**\n * Returns true if n is a power of 19\n */\nconst isPowerOf19 = n => modp(n, 19) === 1;\n\n/**\n * Returns true if n is a power of 20\n */\nconst isPowerOf20 = n => modp(n, 20) === 1;\n\n/**\n * Returns true if n is a power of 21\n */\nconst isPowerOf21 = n => modp(n, 21) === 1;\n\n/**\n * Returns true if n is a power of 22\n */\nconst isPowerOf22 = n => modp(n, 22) === 1;\n\n/**\n * Returns true if n is a power of 23\n */\nconst isPowerOf23 = n => modp(n, 23) === 1;\n\n/**\n * Returns true if n is a power of 24\n */\nconst isPowerOf24 = n => modp(n, 24) === 1;\n\n/**\n * Returns true if n is a power of 25\n */\nconst isPowerOf25 = n => modp(n, 25) === 1;\n\n/**\n * Returns true if n is a power of 26\n */\nconst isPowerOf26 = n => modp(n, 26) === 1;\n\n/**\n * Returns true if n is a power of 27\n */\nconst isPowerOf27 = n => modp(n, 27) === 1;\n\n/**\n * Returns true if n is a power of 28\n */\nconst isPowerOf28 = n => modp(n, 28) === 1;\n\n/**\n * Returns true if n is a power of 29\n */\nconst isPowerOf29 = n => modp(n, 29) === 1;\n\n/**\n * Returns true if n is a power of 30\n */\nconst isPowerOf30 = n => modp(n, 30) === 1;\n\n/**\n * Returns true if n is a power of 31\n */\nconst isPowerOf31 = n => modp(n, 31) === 1;\n\n/**\n * Returns true if n is a power of 32\n */\nconst isPowerOf32 = n => modp(n, 32) === 1;\n\n/**\n * Returns true if n is a power of 33\n */\nconst isPowerOf33 = n => modp(n, 33) === 1;\n\n/**\n * Returns true if n is a power of 34\n */\nconst isPowerOf34 = n => modp(n, 34) === 1;\n\n/**\n * Returns true if n is a power of 35\n */\nconst isPowerOf35 = n => modp(n, 35) === 1;\n\n/**\n * Returns true if n is a power of 36\n */\nconst isPowerOf36 = n => modp(n, 36) === 1;\n\n/**\n * Returns true if n is a power of 37\n */\nconst isPowerOf37 = n => modp(n, 37) === 1;\n\n/**\n * Returns true if n is a power of 38\n */\nconst isPowerOf38 = n => modp(n, 38) === 1;\n\n/**\n * Returns true if n is a power of 39\n */\nconst isPowerOf39 = n => modp(n, 39) === 1;\n\n/**\n * Returns true if n is a power of 40\n */\nconst isPowerOf40 = n => modp(n, 40) === 1;\n\n/**\n * Returns true if n is a power of 41\n */\nconst isPowerOf41 = n => modp(n, 41) === 1;\n\n/**\n * Returns true if n is a power of 42\n */\nconst isPowerOf42 = n => modp(n, 42) === 1;\n\n/**\n * Returns true if n is a power of 43\n */\nconst isPowerOf43 = n => modp(n, 43) === 1;\n\n/**\n * Returns true if n is a power of 44\n */\nconst isPowerOf44 = n => modp(n, 44) === 1;\n\n/**\n * Returns true if n is a power of 45\n */\nconst isPowerOf45 = n => modp(n, 45) === 1;\n\n/**\n * Returns true if n is a power of 46\n */\nconst isPowerOf46 = n => modp(n, 46) === 1;\n\n/**\n * Returns true if n is a power of 47\n */\nconst isPowerOf47 = n => modp(n, 47) === 1;\n\n/**\n * Returns true if n is a power of 48\n */\nconst isPowerOf48 = n => modp(n, 48) === 1;\n\n/**\n * Returns true if n is a power of 49\n */\nconst isPowerOf49 = n => modp(n, 49) === 1;\n\n/**\n * Returns true if n is a power of 50\n */\nconst isPowerOf50 = n => modp(n, 50) === 1;\n\n/**\n * Returns true if n is a power of 51\n */\nconst isPowerOf51 = n => modp(n, 51) === 1;\n\n/**\n * Returns true if n is a power of 52\n */\nconst isPowerOf52 = n => modp(n, 52) === 1;\n\n/**\n * Returns true if n is a power of 53\n */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns the number of elements in the given array\n * @param {Array} array The array to count\n * @returns {Number} The number of elements in the given array\n */\nconst count = (array) => {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    count += 1;\n  }\n  return count;\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peek = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Returns the last element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The last element of the given array\n */\nconst peekLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Returns the first element of the given array\n * @param {Array} array The array to peek at\n * @returns {*} The first element of the given array\n */\nconst peekFirst = (array) => {\n  return array[0];\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift1 function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encode_shiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminus function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encode_shiftminusy = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminusy function. Returns decoded string.\n  */\nconst decodeShiftminusy = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encode_shiftminusy3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminusy3 function. Returns decoded string.\n  */\nconst decodeShiftminusy3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encode_shiftminusy4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminusy4 function. Returns decoded string.\n  */\nconst decodeShiftminusy4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encode_shiftminusy5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminusy5 function. Returns decoded string.\n  */\nconst decodeShiftminusy5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encode_shiftminusy6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shiftminusy6 function. Returns decoded string.\n  */\nconst decodeShiftminusy6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encode_shiftminusy7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 7 - \"a\".charCodeAt(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const new_text = text.replace(/[aeiou]/g, '');\n  return new_text;\n};\n\n/*\n  is_palindrome is a function that takes string and returns true if string is a palindrome.\n  >>> is_palindrome('')\n  False\n  >>> is_palindrome('abc')\n  True\n  >>> is_palindrome('aba')\n  False\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold([1, 2, 4, 10], 100)\n  true\n  >>> equal_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equal_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  false\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false\n  >>> below_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst below_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> equal_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst equal_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false\n  >>> below_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst below_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> equal_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst equal_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false\n  >>> below_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst below_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> equal_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst equal_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false\n  >>> below_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst below_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> equal_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst equal_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false\n  >>> below_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst below_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> equal_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst equal_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold_percent([100, 200, 300, 400], 100)\n  true\n  >>> above_threshold_percent([100, 200, 300, 400], 5)\n  true\n  */\nconst above_threshold_percent = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t * 100) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold_percent([100, 200, 300, 400], 100)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x with n digits\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecision = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimal = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 2 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithTwoDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 3 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithThreeDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 4 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithFourDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 5 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithFiveDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 6 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithSixDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 7 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithSevenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 8 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithEightDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 9 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithNineDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 10 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithTenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 11 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithElevenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 12 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithTwelveDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 13 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithThirteenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 14 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithFourteenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n};\n\n/*Get the rounded value of number x with n digits after the decimal point and with 15 decimal places\n  >>> round(3.5, 2)\n  4.00\n  >>> round(3.8, 2)\n  4.00\n  */\nconst roundWithPrecisionWithDecimalWithFifteenDecimalPlaces = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  11\n  >>> fibonacci(5)\n  10\n  >>> fibonacci(4)\n  8\n  >>> fibonacci(3)\n  7\n  >>> fibonacci(2)\n  5\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n  >>> fibonacciSequence(10)\n  55\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let opening_brackets = brackets.match(/\\<+/g);\n  let closing_brackets = brackets.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  return opening_brackets_count === closing_brackets_count;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  let replaced_string = string;\n  for (let i = 0; i < opening_brackets_count; i++) {\n    replaced_string = replaced_string.replace(opening_brackets[i], closing_brackets[i]);\n  }\n  return replaced_string;\n};\n\n/* Given a string, returns a string with every opening bracket replaced by\n  a closing bracket.\n\n  >>> replace_brackets(\"<\")\n  \"<\"\n  >>> replace_brackets(\"<>\")\n  \"<>\"\n  >>> replace_brackets(\"<<><>>\")\n  \"<<><>>\"\n  >>> replace_brackets(\"><<>\")\n  \"><<>\"\n  */\nconst replace_brackets = (string) => {\n  let opening_brackets = string.match(/\\<+/g);\n  let closing_brackets = string.match(/\\>+/g);\n  let opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  let closing_brackets_count = closing_brackets? closing", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  const n = l[l.length - 1]\n  for (let i = l.length - 2; i >= 0; i--) {\n    if (l[i] > n && l[i + 1] <= n) {\n      return false\n    }\n    if (l[i] < n && l[i + 1] >= n) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10, 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  2\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors(13195)\n  5\n  >>> number_of_factors(2048)\n  2\n  */\nconst number_of_factors = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors(13195)\n  5\n  >>> number_of_factors(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> number_of_factors_desc(13195)\n  5\n  >>> number_of_factors_desc(2048)\n  2\n  */\nconst number_of_factors_desc = (n) => {\n  let i = 2;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n};\n\n/**\n  Given a string, return an array of all possible permutations of the string.\n  E.g. 'abc' returns ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> permutations('abc')\n  [\n    'abc',\n    'acb',\n    'bac',\n    'bca',\n    'cab',\n    'cba'\n  ]\n  >>> permutations('ab')\n  [\n    'ab',\n    'ba'\n  ]\n  >>> permutations('a')\n  [\n    'a'\n  ]\n  >>> permutations('')\n  []\n  */\nconst permutations = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const permutations = [];\n  const permutation_strings = [string];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < permutation_strings.length; j++) {\n      const permutation_string = permutation_strings[j];\n      const new_permutation_string = permutation_string.slice(0, i) + permutation_string.slice(i + 1);\n      permutations.push(new_permutation_string);\n    }\n  }\n  return permutations;\n};\n\n/**\n  Given a string, return an array of all possible combinations of the string.\n  E.g. 'abc' returns ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> combinations('abc')\n  [\n    'abc',\n    'acb',\n    'bac',\n    'bca',\n    'cab',\n    'cba'\n  ]\n  >>> combinations('ab')\n  [\n    'ab',\n    'ba'\n  ]\n  >>> combinations('a')\n  [\n    'a'\n  ]\n  >>> combinations('')\n  []\n  */\nconst combinations = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const combinations = [];\n  const combination_strings = [string];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < combination_strings.length; j++) {\n      const combination_string = combination_strings[j];\n      const new_combination_string = combination_string.slice(0, i) + combination_string.slice(i + 1);\n      combinations.push(new_combination_string);\n    }\n  }\n  return combinations;\n};\n\n/**\n  Given a string, return an array of all possible combinations of the string with repetitions.\n  E.g. 'abc' returns ['abc', 'aba', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> combinations_with_repetitions('abc')\n  [\n    'abc',\n    'aba',\n    'bac',\n    'bca',\n    'cab',\n    'cba'\n  ]\n  >>> combinations_with_repetitions('ab')\n  [\n    'ab',\n    'ba'\n  ]\n  >>> combinations_with_repetitions('a')\n  [\n    'a'\n  ]\n  >>> combinations_with_repetitions('')\n  []\n  */\nconst combinations_with_repetitions = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const combinations = [];\n  const combination_strings = [string];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < combination_strings.length; j++) {\n      const combination_string = combination_strings[j];\n      const new_combination_string = combination_string.slice(0, i) + combination_string.slice(i + 1);\n      combinations.push(new_combination_string);\n    }\n  }\n  return combinations;\n};\n\n/**\n  Given a string, return an array of all possible combinations of the string with repetitions.\n  E.g. 'abc' returns ['abc', 'aba', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> combinations_with_repetitions('abc')\n  [\n    'abc',\n    'aba',\n    'bac',\n    'bca',\n    'cab',\n    'cba'\n  ]\n  >>> combinations_with_repetitions('ab')\n  [\n    'ab',\n    'ba'\n  ]\n  >>> combinations_with_repetitions('a')\n  [\n    'a'\n  ]\n  >>> combinations_with_repetitions('')\n  []\n  */\nconst combinations_with_repetitions = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const combinations = [];\n  const combination_strings = [string];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < combination_strings.length; j++) {\n      const combination_string = combination_strings[j];\n      const new_combination_string = combination_string.slice(0, i) + combination_string.slice(i + 1);\n      combinations.push(new_combination_string);\n    }\n  }\n  return combinations;\n};\n\n/**\n  Given a string, return an array of all possible combinations of the string with repetitions.\n  E.g. 'abc' returns ['abc', 'aba', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> combinations_with_repetitions('abc')\n  [\n    'abc',\n    'aba',\n    'bac',\n    'bca',\n    'cab',\n    'cba'\n  ]\n  >>> combinations_with_repetitions('ab')\n  [\n    'ab',\n    'ba'\n  ]\n  >>> combinations_with_repetitions('a')\n  [\n    'a'\n  ]\n  >>> combinations_with_repetitions('')\n  []\n  */\nconst combinations_with_repetitions = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const combinations = [];\n  const combination_strings = [string];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < combination_strings.length; j++) {\n      const combination_string = combination_strings[j];\n      const new_combination_string = combination_string.slice(0, i) + combination_string.slice(i + 1);\n      combinations.push(new_combination_string);\n    }\n  }\n  return combinations;\n};\n\n/**\n  Given a string, return an array of all possible combinations of the string with repetitions.\n  E.g. 'abc' returns ['abc', 'aba', 'bac', 'bca', 'cab', 'cba']\n  E.g. 'ab' returns ['ab', 'ba']\n  E.g. 'a' returns ['a']\n  E.g. '' returns []\n\n  >>> combinations_with_repetitions('abc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n_with_memo = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo(30)\n  465\n  >>> sum_to_n_with_memo(100)\n  5050\n  >>> sum_to_n_with_memo(5)\n  15\n  >>> sum_to_n_with_memo(10)\n  55\n  >>> sum_to_n_with_memo(1)\n  1\n  */\nconst sum_to_n_with_memo_2 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_2(30)\n  465\n  >>> sum_to_n_with_memo_2(100)\n  5050\n  >>> sum_to_n_with_memo_2(5)\n  15\n  >>> sum_to_n_with_memo_2(10)\n  55\n  >>> sum_to_n_with_memo_2(1)\n  1\n  */\nconst sum_to_n_with_memo_3 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_3(30)\n  465\n  >>> sum_to_n_with_memo_3(100)\n  5050\n  >>> sum_to_n_with_memo_3(5)\n  15\n  >>> sum_to_n_with_memo_3(10)\n  55\n  >>> sum_to_n_with_memo_3(1)\n  1\n  */\nconst sum_to_n_with_memo_4 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_4(30)\n  465\n  >>> sum_to_n_with_memo_4(100)\n  5050\n  >>> sum_to_n_with_memo_4(5)\n  15\n  >>> sum_to_n_with_memo_4(10)\n  55\n  >>> sum_to_n_with_memo_4(1)\n  1\n  */\nconst sum_to_n_with_memo_5 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_5(30)\n  465\n  >>> sum_to_n_with_memo_5(100)\n  5050\n  >>> sum_to_n_with_memo_5(5)\n  15\n  >>> sum_to_n_with_memo_5(10)\n  55\n  >>> sum_to_n_with_memo_5(1)\n  1\n  */\nconst sum_to_n_with_memo_6 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_6(30)\n  465\n  >>> sum_to_n_with_memo_6(100)\n  5050\n  >>> sum_to_n_with_memo_6(5)\n  15\n  >>> sum_to_n_with_memo_6(10)\n  55\n  >>> sum_to_n_with_memo_6(1)\n  1\n  */\nconst sum_to_n_with_memo_7 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_7(30)\n  465\n  >>> sum_to_n_with_memo_7(100)\n  5050\n  >>> sum_to_n_with_memo_7(5)\n  15\n  >>> sum_to_n_with_memo_7(10)\n  55\n  >>> sum_to_n_with_memo_7(1)\n  1\n  */\nconst sum_to_n_with_memo_8 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_8(30)\n  465\n  >>> sum_to_n_with_memo_8(100)\n  5050\n  >>> sum_to_n_with_memo_8(5)\n  15\n  >>> sum_to_n_with_memo_8(10)\n  55\n  >>> sum_to_n_with_memo_8(1)\n  1\n  */\nconst sum_to_n_with_memo_9 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_9(30)\n  465\n  >>> sum_to_n_with_memo_9(100)\n  5050\n  >>> sum_to_n_with_memo_9(5)\n  15\n  >>> sum_to_n_with_memo_9(10)\n  55\n  >>> sum_to_n_with_memo_9(1)\n  1\n  */\nconst sum_to_n_with_memo_10 = (n) => {\n  let sum = 0;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (memo.hasOwnProperty(i)) {\n      memo[i] = memo[i] + sum;\n    } else {\n      memo[i] = sum;\n    }\n  }\n  return memo[n];\n};\n\n/*\n  >>> sum_to_n_with_memo_10(30)\n  465\n  >>> sum_to_n_with_memo_10(100)\n  5050\n  >>> sum_to_n_with_memo_10(5)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const opening = stack.pop();\n      if (opening!== bracket) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, returns the number of times each character appears.\n * \n * >>> count_letters(\"abracadabra\")\n * {'a': 2, 'b': 1, 'r': 1, 'c': 1, 'd': 1}\n */\nconst count_letters = (str) => {\n  const counts = {};\n  for (let i = 0; i < str.length; i++) {\n    const letter = str[i];\n    if (counts[letter]) {\n      counts[letter]++;\n    } else {\n      counts[letter] = 1;\n    }\n  }\n  return counts;\n};\n\n/**\n * Given a string of characters, returns a string where each character appears once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'abracadabra'\n */\nconst letter_frequency = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears twice and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_double = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 2;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears three times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_triple = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 3;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears four times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_quadruple = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 4;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears five times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_quintuple = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 5;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears six times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_sextuple = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 6;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears seven times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_seventimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 7;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears eight times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_eighttimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 8;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears nine times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_ninetimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 9;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears ten times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_tentimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 10;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears twenty times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_twentytimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(counts).map(([letter, count]) => {\n    return letter + count * 20;\n  });\n  return frequencies.join(\"\");\n};\n\n/**\n * Given a string of characters, returns a string where each character appears twenty-one times and all other\n * characters appear once.\n * \n * >>> letter_frequency(\"abracadabra\")\n * 'aabracdabra'\n */\nconst letter_frequency_twentyonetimes = (str) => {\n  const counts = count_letters(str);\n  const frequencies = Object.entries(count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const dxs = [];\n  for (let i = 1; i < n; i++) {\n    dxs[i] = xs[i] - xs[i - 1];\n  }\n  return dxs;\n};\n\n/* Return sum of all elements in an array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.8\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return mean(xs) / 2;\n  }\n  const middle = Math.floor((n - 1) / 2);\n  return mean(xs.slice(0, middle)) + mean(xs.slice(middle));\n};\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  const modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    const count = xs.filter((x) => x === xs[i]).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes[maxCountIndex] = xs[maxCountIndex];\n  return modes;\n};\n\n/* Return standard deviation of all elements in an array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const n = xs.length;\n  const mean = xs.reduce((a, b) => a + b, 0) / n;\n  const variance = sum((xs) => {\n    const diffs = xs.map((x) => x - mean);\n    return diffs.reduce((a, b) => a + b, 0);\n  }) / n;\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in an array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  const n = xs.length;\n  const mean = xs.reduce((a, b) => a + b, 0) / n;\n  const variance = sum((xs) => {\n    const diffs = xs.map((x) => x - mean);\n    return diffs.reduce((a, b) => a + b, 0);\n  }) / n;\n  return variance;\n};\n\n/* Return minimum of all elements in an array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs);\n};\n\n/* Return maximum of all elements in an array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs);\n};\n\n/* Return sum of squares of all elements in an array.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  25\n  */\nconst sumSquares = (xs) => {\n  return sum(xs.map((x) => x * x));\n};\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.8\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return mean(xs) / 2;\n  }\n  const middle = Math.floor((n - 1) / 2);\n  return mean(xs.slice(0, middle)) + mean(xs.slice(middle));\n};\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  const modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    const count = xs.filter((x) => x === xs[i]).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes[maxCountIndex] = xs[maxCountIndex];\n  return modes;\n};\n\n/* Return standard deviation of all elements in an array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const n = xs.length;\n  const mean = xs.reduce((a, b) => a + b, 0) / n;\n  const variance = sum((xs) => {\n    const diffs = xs.map((x) => x - mean);\n    return diffs.reduce((a, b) => a + b, 0);\n  }) / n;\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in an array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  const n = xs.length;\n  const mean = xs.reduce((a, b) => a + b, 0) / n;\n  const variance = sum((xs) => {\n    const diffs = xs.map((x) => x - mean);\n    return diffs.reduce((a, b) => a + b, 0);\n  }) / n;\n  return variance;\n};\n\n/* Return minimum of all elements in an array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs);\n};\n\n/* Return maximum of all elements in an array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs);\n};\n\n/* Return sum of squares of all elements in an array.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  25\n  */\nconst sumSquares = (xs) => {\n  return sum(xs.map((x) => x * x));\n};\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.8\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return mean(xs) / 2;\n  }\n  const middle = Math.floor((n - 1) / 2);\n  return mean(xs.slice(0, middle)) + mean(xs.slice(middle));\n};\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  const modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    const count = xs.filter((x) => x === xs[i]).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes[maxCountIndex] = xs[maxCountIndex];\n  return modes;\n};\n\n/* Return standard deviation of all elements in an array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const n = xs.length;\n  const mean = xs.reduce((a, b) => a + b, 0) / n;\n  const variance = sum((xs) => {\n    const diffs = xs.map((x) => x - mean);\n    return diffs.reduce((a, b) => a + b, 0);\n  }) / n;\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in an array.\n  >>> variance([1, 2, 3, 4, 5])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// TESTS\n// fibfib(0)\n// fibfib(1)\n// fibfib(2)\n// fibfib(3)\n// fibfib(4)\n// fibfib(5)\n// fibfib(6)\n// fibfib(7)\n// fibfib(8)\n// fibfib(9)\n// fibfib(-10)\n// fibfib(-11)\n// fibfib(-12)\n// fibfib(-13)\n// fibfib(-14)\n// fibfib(-15)\n// fibfib(-16)\n// fibfib(-17)\n// fibfib(-18)\n// fibfib(-19)\n// fibfib(-20)\n// fibfib(-21)\n// fibfib(-22)\n// fibfib(-23)\n// fibfib(-24)\n// fibfib(-25)\n// fibfib(-26)\n// fibfib(-27)\n// fibfib(-28)\n// fibfib(-29)\n// fibfib(-30)\n// fibfib(-31)\n// fibfib(-32)\n// fibfib(-33)\n// fibfib(-34)\n// fibfib(-35)\n// fibfib(-36)\n// fibfib(-37)\n// fibfib(-38)\n// fibfib(-39)\n// fibfib(-40)\n// fibfib(-41)\n// fibfib(-42)\n// fibfib(-43)\n// fibfib(-44)\n// fibfib(-45)\n// fibfib(-46)\n// fibfib(-47)\n// fibfib(-48)\n// fibfib(-49)\n// fibfib(-50)\n// fibfib(-51)\n// fibfib(-52)\n// fibfib(-53)\n// fibfib(-54)\n// fibfib(-55)\n// fibfib(-56)\n// fibfib(-57)\n// fibfib(-58)\n// fibfib(-59)\n// fibfib(-60)\n// fibfib(-61)\n// fibfib(-62)\n// fibfib(-63)\n// fibfib(-64)\n// fibfib(-65)\n// fibfib(-66)\n// fibfib(-67)\n// fibfib(-68)\n// fibfib(-69)\n// fibfib(-70)\n// fibfib(-71)\n// fibfib(-72)\n// fibfib(-73)\n// fibfib(-74)\n// fibfib(-75)\n// fibfib(-76)\n// fibfib(-77)\n// fibfib(-78)\n// fibfib(-79)\n// fibfib(-80)\n// fibfib(-81)\n// fibfib(-82)\n// fibfib(-83)\n// fibfib(-84)\n// fibfib(-85)\n// fibfib(-86)\n// fibfib(-87)\n// fibfib(-88)\n// fibfib(-89)\n// fibfib(-90)\n// fibfib(-91)\n// fibfib(-92)\n// fibfib(-93)\n// fibfib(-94)\n// fibfib(-95)\n// fibfib(-96)\n// fibfib(-97)\n// fibfib(-98)\n// fibfib(-99)\n// fibfib(-100)\n// fibfib(-101)\n// fibfib(-102)\n// fibfib(-103)\n// fibfib(-104)\n// fibfib(-105)\n// fibfib(-106)\n// fibfib(-107)\n// fibfib(-108)\n// fibfib(-109)\n// fibfib(-110)\n// fibfib(-111)\n// fibfib(-112)\n// fibfib(-113)\n// fibfib(-114)\n// fibfib(-115)\n// fibfib(-116)\n// fibfib(-117)\n// fibfib(-118)\n// fibfib(-119)\n// fibfib(-120)\n// fibfib(-121)\n// fibfib(-122)\n// fibfib(-123)\n// fibfib(-124)\n// fibfib(-125)\n// fibfib(-126)\n// fibfib(-127)\n// fibfib(-128)\n// fibfib(-129)\n// fibfib(-130)\n// fibfib(-131)\n// fibfib(-132)\n// fibfib(-133)\n// fibfib(-134)\n// fibfib(-135)\n// fibfib(-136)\n// fibfib(-137)\n// fibfib(-138)\n// fibfib(-139)\n// fibfib(-140)\n// fibfib(-141)\n// fibfib(-142)\n// fibfib(-143)\n// fibfib(-144)\n// fibfib(-145)\n// fibfib(-146)\n// fibfib(-147)\n// fibfib(-148)\n// fibfib(-149)\n// fibfib(-150)\n// fibfib(-151)\n// fibfib(-152)\n// fibfib(-153)\n// fibfib(-154)\n// fibfib(-155)\n// fibfib(-156)\n// fibfib(-157)\n// fibfib(-158)\n// fibfib(-159)\n// fibfib(-160)\n// fibfib(-161)\n// fibfib(-162)\n// fibfib(-163)\n// fibfib(-164)\n// fibfib(-165)\n// fibfib(-166)\n// fibfib(-167)\n// fibfib(-168)\n// fibfib(-169)\n// fibfib(-170)\n// fibfib(-171)\n// fibfib(-172)\n// fibfib(-173)\n// fibfib(-174)\n// fibfib(-175)\n// fibfib(-176)\n// fibfib(-177)\n// fibfib(-178)\n// fibfib(-179)\n// fibfib(-180)\n// fibfib(-181)\n// fibfib(-182)\n// fibfib(-183)\n// fibfib(-184)\n// fibfib(-185)\n// fibfib(-186)\n// fibfib(-187)\n// fibfib(-188)\n// fibfib(-189)\n// fibfib(-190)\n// fibfib(-191)\n// fibfib(-192)\n// fibfib(-193)\n// fibfib(-194)\n// fibfib(-195)\n// fibfib(-196)\n// fibfib(-197)\n// fibfib(-198)\n// fibfib(-199)\n// fibfib(-200)\n// fibfib(-201)\n// fibfib(-202)\n// fib", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map(\"abcde\")\n  2\n  >>> vowels_count_with_map(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_filter.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_reduce which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_reduce(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_reduce(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_reduce = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_reduce.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_filter.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_reduce which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_reduce(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_reduce(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_reduce = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_reduce.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_filter.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_reduce which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_reduce(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_reduce(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_reduce = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_reduce.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_filter.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_reduce which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also\n  a vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_reduce(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_reduce(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_reduce = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i]) && vowels_reduce.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter which takes a string\n  representing a word as input and returns the number of vowels in the\n  string. Vowels in this case are ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n};\n\n/*\n  Given a string, return a new string with each character replaced by\n  the character at the same index in the original string.\n  >>> replace_at('abcde', 2, 'x')\n  'axcde'\n  >>> replace_at('abcde', 3, 'x')\n  'axcde'\n  >>> replace_at('abcde', 4, 'x')\n  'axcde'\n  >>> replace_at('abcde', 0, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 5, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 6, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 7, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 8, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 9, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 10, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 11, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 12, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 13, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 14, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 15, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 16, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 17, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 18, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 19, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 20, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 21, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 22, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 23, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 24, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 25, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 26, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 27, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 28, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 29, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 30, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 31, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 32, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 33, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 34, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 35, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 36, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 37, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 38, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 39, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 40, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 41, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 42, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 43, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 44, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 45, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 46, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 47, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 48, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 49, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 50, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 51, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 52, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 53, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 54, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 55, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 56, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 57, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 58, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 59, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 60, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 61, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 62, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 63, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 64, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 65, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 66, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 67, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 68, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 69, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 70, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 71, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 72, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 73, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 74, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 75, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 76, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 77, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 78, 'x')\n  'xbcde'\n  >>> replace_at('abcde', 79, 'x')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 47 && char < 58) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_lower(\"\") => 0\n      digit_sum_lower(\"abAB\") => 131\n      digit_sum_lower(\"abcCd\") => 67\n      digit_sum_lower(\"helloE\") => 69\n      digit_sum_lower(\"woArBld\") => 131\n      digit_sum_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits(\"\") => 0\n      digit_sum_digits(\"abAB\") => 131\n      digit_sum_digits(\"abcCd\") => 67\n      digit_sum_digits(\"helloE\") => 69\n      digit_sum_digits(\"woArBld\") => 131\n      digit_sum_digits(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 47 && char < 58) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_upper_lower(\"\") => 0\n      digit_sum_upper_lower(\"abAB\") => 131\n      digit_sum_upper_lower(\"abcCd\") => 67\n      digit_sum_upper_lower(\"helloE\") => 69\n      digit_sum_upper_lower(\"woArBld\") => 131\n      digit_sum_upper_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_upper_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 47 && char < 58) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits_lower_lower(\"\") => 0\n      digit_sum_digits_lower_lower(\"abAB\") => 131\n      digit_sum_digits_lower_lower(\"abcCd\") => 67\n      digit_sum_digits_lower_lower(\"helloE\") => 69\n      digit_sum_digits_lower_lower(\"woArBld\") => 131\n      digit_sum_digits_lower_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits_lower_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 47 && char < 58) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only and upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits_upper_lower(\"\") => 0\n      digit_sum_digits_upper_lower(\"abAB\") => 131\n      digit_sum_digits_upper_lower(\"abcCd\") => 67\n      digit_sum_digits_upper_lower(\"helloE\") => 69\n      digit_sum_digits_upper_lower(\"woArBld\") => 131\n      digit_sum_digits_upper_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits_upper_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only and upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits_upper_lower_lower(\"\") => 0\n      digit_sum_digits_upper_lower_lower(\"abAB\") => 131\n      digit_sum_digits_upper_lower_lower(\"abcCd\") => 67\n      digit_sum_digits_upper_lower_lower(\"helloE\") => 69\n      digit_sum_digits_upper_lower_lower(\"woArBld\") => 131\n      digit_sum_digits_upper_lower_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits_upper_lower_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only and upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits_upper_lower_lower(\"\") => 0\n      digit_sum_digits_upper_lower_lower(\"abAB\") => 131\n      digit_sum_digits_upper_lower_lower(\"abcCd\") => 67\n      digit_sum_digits_upper_lower_lower(\"helloE\") => 69\n      digit_sum_digits_upper_lower_lower(\"woArBld\") => 131\n      digit_sum_digits_upper_lower_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits_upper_lower_lower_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only and upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum_digits_upper_lower_lower(\"\") => 0\n      digit_sum_digits_upper_lower_lower(\"abAB\") => 131\n      digit_sum_digits_upper_lower_lower(\"abcCd\") => 67\n      digit_sum_digits_upper_lower_lower(\"helloE\") => 69\n      digit_sum_digits_upper_lower_lower(\"woArBld\") => 131\n      digit_sum_digits_upper_lower_lower(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digits_upper_lower_lower_lower_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) {\n      sum += char - 48;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\nconsole.log(\n  fruit_distribution(\"5 apples and 6 oranges\", 19),\n  fruit_distribution(\"0 apples and 1 oranges\", 3),\n  fruit_distribution(\"2 apples and 3 oranges\", 100),\n  fruit_distribution(\"100 apples and 1 oranges\", 120)\n);</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruit_distribution(str, n) {\n  let arr = str.split(' ');\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[1]);\n  let mangoes = n - apples - oranges;\n  return mangoes;\n}\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddValues = arr.filter(x => x % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smalle", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      return lst[i];\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers and a number K. Find if there exist two elements A and B in the list\n  such that the sum of A + B is equal to K. Return the sum of the two elements if such pair exists,\n  otherwise return -1.\n  Examples:\n      sum([1, 2, 3, 4, 5], 5) == 5\n      sum([1, 2, 3, 4, 5], 7) == -1\n      sum([1, 2, 3, 4, 5], 0) == -1\n      sum([1, 2, 3, 4, 5], -1) == -1\n      sum([1, 2, 3, 4, 5], -2) == -1\n      sum([1, 2, 3, 4, 5], -3) == -1\n      sum([1, 2, 3, 4, 5], -4) == -1\n      sum([1, 2, 3, 4, 5], -5) == -1\n      sum([1, 2, 3, 4, 5], -6) == -1\n      sum([1, 2, 3, 4, 5], -7) == -1\n      sum([1, 2, 3, 4, 5], -8) == -1\n      sum([1, 2, 3, 4, 5], -9) == -1\n      sum([1, 2, 3, 4, 5], -10) == -1\n      sum([1, 2, 3, 4, 5], -11) == -1\n      sum([1, 2, 3, 4, 5], -12) == -1\n      sum([1, 2, 3, 4, 5], -13) == -1\n      sum([1, 2, 3, 4, 5], -14) == -1\n      sum([1, 2, 3, 4, 5], -15) == -1\n      sum([1, 2, 3, 4, 5], -16) == -1\n      sum([1, 2, 3, 4, 5], -17) == -1\n      sum([1, 2, 3, 4, 5], -18) == -1\n      sum([1, 2, 3, 4, 5], -19) == -1\n      sum([1, 2, 3, 4, 5], -20) == -1\n      sum([1, 2, 3, 4, 5], -21) == -1\n      sum([1, 2, 3, 4, 5], -22) == -1\n      sum([1, 2, 3, 4, 5], -23) == -1\n      sum([1, 2, 3, 4, 5], -24) == -1\n      sum([1, 2, 3, 4, 5], -25) == -1\n      sum([1, 2, 3, 4, 5], -26) == -1\n      sum([1, 2, 3, 4, 5], -27) == -1\n      sum([1, 2, 3, 4, 5], -28) == -1\n      sum([1, 2, 3, 4, 5], -29) == -1\n      sum([1, 2, 3, 4, 5], -30) == -1\n      sum([1, 2, 3, 4, 5], -31) == -1\n      sum([1, 2, 3, 4, 5], -32) == -1\n      sum([1, 2, 3, 4, 5], -33) == -1\n      sum([1, 2, 3, 4, 5], -34) == -1\n      sum([1, 2, 3, 4, 5], -35) == -1\n      sum([1, 2, 3, 4, 5], -36) == -1\n      sum([1, 2, 3, 4, 5], -37) == -1\n      sum([1, 2, 3, 4, 5], -38) == -1\n      sum([1, 2, 3, 4, 5], -39) == -1\n      sum([1, 2, 3, 4, 5], -40) == -1\n      sum([1, 2, 3, 4, 5], -41) == -1\n      sum([1, 2, 3, 4, 5], -42) == -1\n      sum([1, 2, 3, 4, 5], -43) == -1\n      sum([1, 2, 3, 4, 5], -44) == -1\n      sum([1, 2, 3, 4, 5], -45) == -1\n      sum([1, 2, 3, 4, 5], -46) == -1\n      sum([1, 2, 3, 4, 5], -47) == -1\n      sum([1, 2, 3, 4, 5], -48) == -1\n      sum([1, 2, 3, 4, 5], -49) == -1\n      sum([1, 2, 3, 4, 5], -50) == -1\n      sum([1, 2, 3, 4, 5], -51) == -1\n      sum([1, 2, 3, 4, 5], -52) == -1\n      sum([1, 2, 3, 4, 5], -53) == -1\n      sum([1, 2, 3, 4, 5], -54) == -1\n      sum([1, 2, 3, 4, 5], -55) == -1\n      sum([1, 2, 3, 4, 5], -56) == -1\n      sum([1, 2, 3, 4, 5], -57) == -1\n      sum([1, 2, 3, 4, 5], -58) == -1\n      sum([1, 2, 3, 4, 5], -59) == -1\n      sum([1, 2, 3, 4, 5], -60) == -1\n      sum([1, 2, 3, 4, 5], -61) == -1\n      sum([1, 2, 3, 4, 5], -62) == -1\n      sum([1, 2, 3, 4, 5], -63) == -1\n      sum([1, 2, 3, 4, 5], -64) == -1\n      sum([1, 2, 3, 4, 5], -65) == -1\n      sum([1, 2, 3, 4, 5], -66) == -1\n      sum([1, 2, 3, 4, 5], -67) == -1\n      sum([1, 2, 3, 4, 5], -68) == -1\n      sum([1, 2, 3, 4, 5], -69) == -1\n      sum([1, 2, 3, 4, 5], -70) == -1\n      sum([1, 2, 3, 4, 5], -71) == -1\n      sum([1, 2, 3, 4, 5], -72) == -1\n      sum([1, 2, 3, 4, 5], -73) == -1\n      sum([1, 2, 3, 4, 5], -74) == -1\n      sum([1, 2, 3, 4, 5], -75) == -1\n      sum([1, 2, 3, 4, 5], -76) == -1\n      sum([1, 2, 3, 4, 5], -77) == -1\n      sum([1, 2, 3, 4, 5], -78) == -1\n      sum([1, 2, 3, 4, 5], -79) == -1\n      sum([1, 2, 3, 4, 5], -80) == -1\n      sum([1, 2, 3, 4, 5], -81) == -1\n      sum([1, 2, 3, 4, 5], -82) == -1\n      sum([1, 2, 3, 4, 5], -83) == -1\n      sum([1, 2, 3, 4, 5], -84) == -1\n      sum([1, 2, 3, 4, 5], -85) == -1\n      sum([1, 2, 3, 4, 5], -86) == -1\n      sum([1, 2, 3, 4, 5], -87) == -1\n      sum([1, 2, 3, 4, 5], -88) == -1\n      sum([1, 2, 3, 4, 5], -89) == -1\n      sum([1, 2, 3, 4, 5], -90) == -1\n      sum([1, 2, 3, 4, 5], -91) == -1\n      sum([1, 2, 3, 4, 5], -92) == -1\n      sum([1, 2, 3, 4, 5], -93) == -1\n      sum([1, 2, 3, 4, 5], -94) == -1\n      sum([1, 2, 3, 4, 5], -95) == -1\n      sum([1, 2, 3, 4, 5], -96) == -1\n      sum([1, 2, 3, 4, 5], -97) == -1\n      sum([1, 2, 3, 4, 5], -98) == -1\n      sum([1, 2, 3, 4, 5], -99) == -1\n      sum([1, 2, 3, 4, 5], -100) == -1\n      sum([1, 2, 3, 4, 5], -101) == -1\n      sum([1, 2, 3, 4, 5], -102) == -1\n      sum([1, 2, 3, 4, 5], -103) == -1\n      sum([1, 2, 3, 4, 5], -104) == -1\n      sum([1, 2, 3, 4, 5], -105) == -1\n      sum([1, 2, 3, 4, 5], -106) == -1\n      sum([1, 2, 3, 4, 5], -107) == -1\n      sum([1, 2, 3, 4, 5], -108) == -1\n      sum([1, 2, 3, 4, 5], -109) == -1\n      sum([1, 2, 3, 4, 5], -110) == -1\n      sum([1, 2, 3, 4, 5], -111) == -1\n      sum([1, 2, 3, 4, 5], -112) == -1\n      sum([1, 2, 3, 4, 5], -113) == -1\n      sum([1, 2, 3, 4, 5], -114) == -1\n      sum([1, 2, 3, 4, 5], -115) == -1\n      sum([1, 2, 3, 4, 5], -116) == -1\n      sum([1, 2, 3, 4, 5], -117) == -1\n      sum([1, 2, 3, 4, 5], -118) == -1\n      sum([1, 2, 3, 4, 5], -119) == -1\n      sum([1, 2, 3, 4, 5], -120) == -1\n      sum([1, 2, 3, 4, 5], -121) == -1\n      sum([1, 2, 3, 4, 5], -122) == -1\n      sum([1, 2, 3, 4, 5], -123) == -1\n      sum([1, 2, 3, 4, 5], -124) == -1\n      sum([1, 2, 3, 4, 5], -125) == -1\n      sum([1, 2, 3, 4, 5], -126) == -1\n      sum([1, 2, 3, 4, 5], -127) == -1\n      sum([1, 2, 3, 4, 5], -128) == -1\n      sum([1, 2, 3, 4, 5], -129) == -1\n      sum([1, 2, 3, 4, 5], -130) == -1\n      sum([1, 2, 3, 4, 5], -131) == -1\n      sum([1, 2, 3, 4, 5], -132) == -1\n      sum([1, 2, 3, 4, 5], -133) == -1\n      sum([1, 2, 3, 4, 5], -134) == -1\n      sum([1, 2, 3, 4, 5], -135) == -1\n      sum([1, 2, 3, 4, 5], -136) == -1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that start with given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_starts_with = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that end with given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_ends_with = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_regex = (strings, regex) => {\n  return strings.filter(string => regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not match given regular expression\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_substring_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_starts_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_ends_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_starts_with = (strings, substring) => {\n  return strings.filter(string =>!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_ends_with = (strings, substring) => {\n  return strings.filter(string =>!string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_starts_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_ends_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_starts_with = (strings, substring) => {\n  return strings.filter(string =>!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_ends_with = (strings, substring) => {\n  return strings.filter(string =>!string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_starts_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['abc', 'cde']\n  */\nconst filter_by_not_ends_with_regex = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that match given regular expression but do not match given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n  ['abc', 'bacd']\n  */\nconst filter_by_not_start", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = [];\n  for (let i = 0; i < lst.length - 1; i++) {\n    sorted.push(lst[i]);\n  }\n  sorted.push(lst[lst.length - 1]);\n  for (let i = lst.length - 1; i > 0; i--) {\n    sorted.push(lst[i]);\n  }\n  return sorted;\n};\n\n/*\n  Given a string, return a list of all the characters in that string.\n  Example:\n  get_string(\"Hello World\") == \"Hello World\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"Hello World!\"\n  get_string(\"Hello World!\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab > bc && ab > cb? ab * 0.5 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * ab;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.00\n  triangle_perimeter(10, 5, 10) == -1\n  */\nconst triangle_perimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.00\n  triangle_perimeter(10, 5, 10) == -1\n  */\nconst triangle_area_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.00\n  triangle_perimeter(10, 5, 10) == -1\n  */\nconst triangle_area_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference_if_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.00\n  triangle_perimeter(10, 5, 10) == -1\n  */\nconst triangle_area_if_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference_if_if_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.00\n  triangle_perimeter(10, 5, 10) == -1\n  */\nconst triangle_area_if_if_if_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 12.00\n  triangle_circumference(10, 5, 10) == -1\n  */\nconst triangle_circumference_if_if_if_if_if_if = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const cb = c - b;\n  return ab * bc + cb * cb;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = is_palindrome(q) && q.reduce((acc, x) => acc + x, 0) <= max_sum;\n  return is_balanced && q.every((x, i) => x <= max_weight);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        min = Math.min(min, j + 1);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of any subarray in arr. For example,\n  max_subarray([1,2,3,4,5,6,7,8,9]) == 9\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 15\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.indexOf(x) < 0)\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_2(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_3(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_4(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_5(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_6(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_7(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_8(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_9 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return is_simple_power_9(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power\n  of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let hex = num.toString();\n  let count = 0;\n  let primes = [];\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      count++;\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      count++;\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      primes.push(hexDigit);\n    }\n  }\n  let prime = primes.find(p => p > 1 && p < hex.length);\n  if (prime > hex.length) {\n    return prime;\n  } else {\n    return count;\n  }\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key2 = (num) => {\n  let hex = num.toString();\n  let count = 0;\n  let primes = [];\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      count++;\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      count++;\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      primes.push(hexDigit);\n    }\n  }\n  let prime = primes.find(p => p > 1 && p < hex.length);\n  if (prime > hex.length) {\n    return prime;\n  } else {\n    return count;\n  }\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key3 = (num) => {\n  let hex = num.toString();\n  let count = 0;\n  let primes = [];\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      count++;\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      count++;\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  for (let i = 0; i < hex.length; i++) {\n    let hexDigit = hex.charCodeAt(i);\n    if (hexDigit >= 48 && hexDigit <= 57) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 65 && hexDigit <= 70) {\n      primes.push(hexDigit);\n    } else if (hexDigit >= 97 && hexDigit <= 102) {\n      primes.push(hexDigit);\n    }\n  }\n  let prime = primes.find(p => p > 1 && p < hex.length);\n  if (prime > hex.length) {\n    return prime;\n  } else {\n    return count;\n  }\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal format.\n  Each character in the string will be a hexadecimal digit.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"f1\"\n  decimal_to_hexadecimal(32)   # returns \"f0\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    hexadecimal += decimalString[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal format.\n  Each character in the string will be an octal digit.\n\n  Examples:\n  decimal_to_octal(15)   # returns \"15\"\n  decimal_to_octal(32)   # returns \"10\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts a decimal number to binary format.\n  Each character in the string will be a binary digit.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"1111\"\n  decimal_to_binary(32)   # returns \"100000\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal format.\n  Each character in the string will be a hexadecimal digit.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"f1\"\n  decimal_to_hexadecimal(32)   # returns \"f0\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    hexadecimal += decimalString[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal format.\n  Each character in the string will be an octal digit.\n\n  Examples:\n  decimal_to_octal(15)   # returns \"15\"\n  decimal_to_octal(32)   # returns \"10\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts a decimal number to binary format.\n  Each character in the string will be a binary digit.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"1111\"\n  decimal_to_binary(32)   # returns \"100000\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal format.\n  Each character in the string will be a hexadecimal digit.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"f1\"\n  decimal_to_hexadecimal(32)   # returns \"f0\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    hexadecimal += decimalString[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal format.\n  Each character in the string will be an octal digit.\n\n  Examples:\n  decimal_to_octal(15)   # returns \"15\"\n  decimal_to_octal(32)   # returns \"10\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts a decimal number to binary format.\n  Each character in the string will be a binary digit.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"1111\"\n  decimal_to_binary(32)   # returns \"100000\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal format.\n  Each character in the string will be a hexadecimal digit.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"f1\"\n  decimal_to_hexadecimal(32)   # returns \"f0\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    hexadecimal += decimalString[i].toString(16);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal format.\n  Each character in the string will be an octal digit.\n\n  Examples:\n  decimal_to_octal(15)   # returns \"15\"\n  decimal_to_octal(32)   # returns \"10\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i].toString(8);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts a decimal number to binary format.\n  Each character in the string will be a binary digit.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"1111\"\n  decimal_to_binary(32)   # returns \"100000\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal format.\n  Each character in the string will be a hexadecimal digit.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"f1\"\n  decimal_to_hexadecimal(32)   # returns \"f0\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [numbers[0], 1]\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (10, 15)\n  */\nconst sum_product = (string, int) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  const [sum, product] = [string[0], 1]\n  for (let i = 1; i < string.length; i++) {\n    sum += string[i]\n    product *= int\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product('abc')\n  (0, 3)\n  >>> sum_product('abbb')\n  (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  Return true if it contains only letters a-z and false otherwise.\n  For example:\n  is_alpha(a) => true\n  is_alpha(b) => false\n  is_alpha(ab) => false\n  is_alpha(abc) => true\n  is_alpha(abcde) => false\n  is_alpha(abce) => false\n  is_alpha(abcde) => false\n  is_alpha(xyz) => false\n  is_alpha(123) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => false\n  is_alpha(abc) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr;\n    }\n    if (curr > grades[index - 1]) {\n      return acc;\n    }\n    return acc + 1;\n  }, 0);\n  if (gpa > 4.0) {\n    letterGrades.push('A+');\n  } else if (gpa > 3.7) {\n    letterGrades.push('A');\n  } else if (gpa > 3.3) {\n    letterGrades.push('A-');\n  } else if (gpa > 3.0) {\n    letterGrades.push('B+');\n  } else if (gpa > 2.7) {\n    letterGrades.push('B');\n  } else if (gpa > 2.3) {\n    letterGrades.push('B-');\n  } else if (gpa > 2.0) {\n    letterGrades.push('C+');\n  } else if (gpa > 1.7) {\n    letterGrades.push('C');\n  } else if (gpa > 1.3) {\n    letterGrades.push('C-');\n  } else if (gpa > 1.0) {\n    letterGrades.push('D+');\n  } else if (gpa > 0.7) {\n    letterGrades.push('D');\n  } else if (gpa > 0.0) {\n    letterGrades.push('D-');\n  } else {\n    letterGrades.push('E');\n  }\n  return letterGrades;\n};\n\n/*\n  Write a function that takes a list of numbers and returns the sum of the numbers. \n  Example:\n  sum([1, 2, 3, 4]) ==> 10\n*/\nconst sum = (nums) => {\n  return nums.reduce((acc, curr, index) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that takes a list of numbers and returns the average of the numbers. \n  Example:\n  average([1, 2, 3, 4]) ==> 2.5\n*/\nconst average = (nums) => {\n  return sum(nums) / nums.length;\n};\n\n/*\n  Write a function that takes a list of numbers and returns the smallest number in the list. \n  Example:\n  min([1, 2, 3, 4]) ==> 1\n*/\nconst min = (nums) => {\n  return nums.reduce((acc, curr, index) => {\n    return index < nums.length? curr : acc;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns the largest number in the list. \n  Example:\n  max([1, 2, 3, 4]) ==> 4\n*/\nconst max = (nums) => {\n  return nums.reduce((acc, curr, index) => {\n    return index > nums.length? curr : acc;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 7. \n  Example:\n  divisibleBy7([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [7, 8, 9]\n*/\nconst divisibleBy7 = (nums) => {\n  return nums.filter((num) => {\n    return num % 7 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 3. \n  Example:\n  divisibleBy3([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy3 = (nums) => {\n  return nums.filter((num) => {\n    return num % 3 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 5. \n  Example:\n  divisibleBy5([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5, 7, 9]\n*/\nconst divisibleBy5 = (nums) => {\n  return nums.filter((num) => {\n    return num % 5 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 2. \n  Example:\n  divisibleBy2([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5, 7]\n*/\nconst divisibleBy2 = (nums) => {\n  return nums.filter((num) => {\n    return num % 2 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 4. \n  Example:\n  divisibleBy4([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy4 = (nums) => {\n  return nums.filter((num) => {\n    return num % 4 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 6. \n  Example:\n  divisibleBy6([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy6 = (nums) => {\n  return nums.filter((num) => {\n    return num % 6 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 8. \n  Example:\n  divisibleBy8([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy8 = (nums) => {\n  return nums.filter((num) => {\n    return num % 8 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 10. \n  Example:\n  divisibleBy10([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy10 = (nums) => {\n  return nums.filter((num) => {\n    return num % 10 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 15. \n  Example:\n  divisibleBy15([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy15 = (nums) => {\n  return nums.filter((num) => {\n    return num % 15 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 20. \n  Example:\n  divisibleBy20([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy20 = (nums) => {\n  return nums.filter((num) => {\n    return num % 20 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 25. \n  Example:\n  divisibleBy25([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> [1, 3, 5]\n*/\nconst divisibleBy25 = (nums) => {\n  return nums.filter((num) => {\n    return num % 25 === 0;\n  });\n};\n\n/*\n  Write a function that takes a list of numbers and returns all numbers that are divisible by 30. \n  Example:\n  divisibleBy30([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) == string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only('Hello') == true\n  letters_only('abcdcba') == true\n  letters_only('kittens') == false\n  letters_only('orange') == false\n  */\nconst letters_only = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_upper('Hello') == true\n  letters_only_upper('abcdcba') == true\n  letters_only_upper('kittens') == false\n  letters_only_upper('orange') == false\n  */\nconst letters_only_upper = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_lower('Hello') == true\n  letters_only_lower('abcdcba') == true\n  letters_only_lower('kittens') == false\n  letters_only_lower('orange') == false\n  */\nconst letters_only_lower = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_digits('Hello') == true\n  letters_only_digits('abcdcba') == true\n  letters_only_digits('kittens') == false\n  letters_only_digits('orange') == false\n  */\nconst letters_only_digits = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_special('Hello') == true\n  letters_only_special('abcdcba') == true\n  letters_only_special('kittens') == false\n  letters_only_special('orange') == false\n  */\nconst letters_only_special = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '!' || string.charAt(i) > '@') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_mixed('Hello') == true\n  letters_only_mixed('abcdcba') == true\n  letters_only_mixed('kittens') == false\n  letters_only_mixed('orange') == false\n  */\nconst letters_only_mixed = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '!' || string.charAt(i) > '@') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters_only_all('Hello') == true\n  letters_only_all('abcdcba') == true\n  letters_only_all('kittens') == false\n  letters_only_all('orange') == false\n  */\nconst letters_only_all = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '!' || string.charAt(i) > '@') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '!' || string.charAt(i) > '@') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '!' || string.charAt(i) > '@') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'A' || string.charAt(i) > 'Z') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < '0' || string.charAt(i) > '9') {\n      letters = false;\n      break;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_2 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_3 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_4 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_5 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_6 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_7 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_8 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_9 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_10 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_11 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_12 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_13 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_14 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_15 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_16 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_17 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_18 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_19 = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4, 6]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii - 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii + 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii - 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii + 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii - 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii + 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.fromCharCode(ascii - 1);\n      newString += newChar;\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      const newChar = String.from", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const result = [];\n  const rows = lst.map(row => row.map(val => val === x? 1 : 0));\n  rows.sort((a, b) => a[0] - b[0]);\n  rows.sort((a, b) => b[1] - a[1]);\n  rows.forEach(row => {\n    const [x, y] = row;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_column([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_column([], 1) == []\n  get_column([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_column = (lst, x) => {\n  const result = [];\n  const cols = lst.map(col => col.map(val => val === x? 1 : 0));\n  cols.sort((a, b) => b[1] - a[1]);\n  cols.sort((a, b) => a[0] - b[0]);\n  cols.forEach(col => {\n    const [x, y] = col;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  diag.sort((a, b) => a[0] - b[0]);\n  diag.sort((a, b) => b[1] - a[1]);\n  diag.forEach(diag => {\n    const [x, y] = diag;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  diag.sort((a, b) => b[1] - a[1]);\n  diag.sort((a, b) => a[0] - b[0]);\n  diag.forEach(diag => {\n    const [x, y] = diag;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  diag.sort((a, b) => b[1] - a[1]);\n  diag.sort((a, b) => a[0] - b[0]);\n  diag.forEach(diag => {\n    const [x, y] = diag;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  const diag = lst.map(row => row.map(val => val === x? 1 : 0));\n  diag.sort((a, b) => b[1] - a[1]);\n  diag.sort((a, b) => a[0] - b[0]);\n  diag.forEach(diag => {\n    const [x, y] = diag;\n    result.push([x, y]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n\n  const sum = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSum = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const oddSum = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const evenSort = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSort = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const oddSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first + last;\n  };\n\n  const evenSortDesc = (first, last) => {\n    if (first === last) {\n      return first;\n    }\n    return first - last;\n  };\n\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += newAlphabet.charAt(newAlphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rolling_min = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 4, 6, 8, 10, 12]\n  */\nconst rolling_sum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_average = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_stddev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_stddev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rolling_mode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4, 4.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_largest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  next_largest([1, 2, 3, 4, 5]) == 5\n  next_largest([5, 1, 4, 3, 2]) == 5\n  next_largest([]) == null\n  next_largest([1, 1]) == null\n  */\nconst next_largest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1]\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_greatest() that returns the 2nd greatest element of the list.\n  Return null if there is no such element.\n  \n  next_greatest([1, 2, 3, 4, 5]) == 3\n  next_greatest([5, 1, 4, 3, 2]) == 3\n  next_greatest([]) == null\n  next_greatest([1, 1]) == null\n  */\nconst next_greatest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[0]\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the 2nd odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 4\n  next_odd([5, 1, 4, 3, 2]) == 4\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2]\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the 2nd even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 + 1]\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_greater_than() that returns the 2nd greatest element of the list that is greater than the given element.\n  Return null if there is no such element.\n  \n  next_greater_than([1, 2, 3, 4, 5], 4) == 5\n  next_greater_than([5, 1, 4, 3, 2], 4) == 5\n  next_greater_than([], 4) == null\n  next_greater_than([1, 1], 4) == null\n  */\nconst next_greater_than = (lst, num) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] > num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_less_than() that returns the 2nd greatest element of the list that is less than the given element.\n  Return null if there is no such element.\n  \n  next_less_than([1, 2, 3, 4, 5], 4) == 4\n  next_less_than([5, 1, 4, 3, 2], 4) == 4\n  next_less_than([], 4) == null\n  next_less_than([1, 1], 4) == null\n  */\nconst next_less_than = (lst, num) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] < num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range() that returns the 2nd greatest element of the list that is in the given range.\n  Return null if there is no such element.\n  \n  next_in_range([1, 2, 3, 4, 5], 4) == 5\n  next_in_range([5, 1, 4, 3, 2], 4) == 5\n  next_in_range([], 4) == null\n  next_in_range([1, 1], 4) == null\n  */\nconst next_in_range = (lst, num) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] >= num && lst[lst.length - 1] <= num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range_with_direction() that returns the 2nd greatest element of the list that is in the given range and in the given direction.\n  Return null if there is no such element.\n  \n  next_in_range_with_direction([1, 2, 3, 4, 5], 4, 1) == 2\n  next_in_range_with_direction([5, 1, 4, 3, 2], 4, 1) == 2\n  next_in_range_with_direction([], 4, 1) == null\n  next_in_range_with_direction([1, 1], 4, 1) == null\n  */\nconst next_in_range_with_direction = (lst, num, direction) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] >= num && lst[lst.length - 1] <= num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range_with_direction() that returns the 2nd greatest element of the list that is in the given range and in the given direction.\n  Return null if there is no such element.\n  \n  next_in_range_with_direction([1, 2, 3, 4, 5], 4, -1) == 4\n  next_in_range_with_direction([5, 1, 4, 3, 2], 4, -1) == 4\n  next_in_range_with_direction([], 4, -1) == null\n  next_in_range_with_direction([1, 1], 4, -1) == null\n  */\nconst next_in_range_with_direction = (lst, num, direction) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] >= num && lst[lst.length - 1] <= num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range_with_direction() that returns the 2nd greatest element of the list that is in the given range and in the given direction.\n  Return null if there is no such element.\n  \n  next_in_range_with_direction([1, 2, 3, 4, 5], 4, 1) == 2\n  next_in_range_with_direction([5, 1, 4, 3, 2], 4, 1) == 2\n  next_in_range_with_direction([], 4, 1) == null\n  next_in_range_with_direction([1, 1], 4, 1) == null\n  */\nconst next_in_range_with_direction = (lst, num, direction) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] >= num && lst[lst.length - 1] <= num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range_with_direction() that returns the 2nd greatest element of the list that is in the given range and in the given direction.\n  Return null if there is no such element.\n  \n  next_in_range_with_direction([1, 2, 3, 4, 5], 4, -1) == 4\n  next_in_range_with_direction([5, 1, 4, 3, 2], 4, -1) == 4\n  next_in_range_with_direction([], 4, -1) == null\n  next_in_range_with_direction([1, 1], 4, -1) == null\n  */\nconst next_in_range_with_direction = (lst, num, direction) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1] >= num && lst[lst.length - 1] <= num? lst[lst.length - 1] : null\n}\n\n/*\n  You are given a list of integers.\n  Write a function next_in_range_with_direction() that returns the 2nd greatest element of the list that is in the given range and in the given direction.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const boredoms = S.match(/\\bI\\b/)\n  return boredoms? boredoms.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. A sadness is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sad(\"Hello world\")\n  0\n  >>> is_sad(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sad = (S) => {\n  const sadnesses = S.match(/\\bU\\b/)\n  return sadnesses? sadnesses.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  const angers = S.match(/\\bO\\b/)\n  return angers? angers.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  const fears = S.match(/\\bE\\b/)\n  return fears? fears.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"D\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  const disgusts = S.match(/\\bD\\b/)\n  return disgusts? disgusts.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of contempt. An contempt is a sentence that starts with the word \"C\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_contempt(\"Hello world\")\n  0\n  >>> is_contempt(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_contempt = (S) => {\n  const contempts = S.match(/\\bC\\b/)\n  return contempts? contempts.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of neuroticism. An neuroticism is a sentence that starts with the word \"N\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_neuroticism(\"Hello world\")\n  0\n  >>> is_neuroticism(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_neuroticism = (S) => {\n  const neuroticisms = S.match(/\\bN\\b/)\n  return neuroticisms? neuroticisms.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of neutral. An neutral is a sentence that starts with the word \"N\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_neutral(\"Hello world\")\n  0\n  >>> is_neutral(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_neutral = (S) => {\n  const neutrals = S.match(/\\bN\\b/)\n  return neutrals? neutrals.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of openness. An openness is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_openness(\"Hello world\")\n  0\n  >>> is_openness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_openness = (S) => {\n  const opennesses = S.match(/\\bO\\b/)\n  return opennesses? opennesses.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of agreeableness. An agreeableness is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_agreeableness(\n  >>>   \"Hello world\",\n  >>>   \"The sky is blue. The sun is shining. I love this weather.\"\n  >>> )\n  0\n  >>> is_agreeableness(\n  >>>   \"The sky is blue. The sun is shining. I love this weather.\",\n  >>>   \"Hello world\"\n  >>> )\n  1\n  */\nconst is_agreeableness = (S, T) => {\n  const agreeablenesses = S.match(/\\bA\\b/)\n  const agreeablenesses_T = T.match(/\\bA\\b/)\n  return agreeablenesses? agreeablenesses.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of conscientiousness. A conscientiousness is a sentence that starts with the\n  word \"K\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_conscientiousness(\"Hello world\")\n  0\n  >>> is_conscientiousness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_conscientiousness = (S) => {\n  const conscientiousnesses = S.match(/\\bK\\b/)\n  return conscientiousnesses? conscientiousnesses.length : 0\n}\n\n/*\n  You'll be given a string of words, and your task is to count ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  any_float(5, 2, 7) ➞ true\n  any_float(3, 2, 2) ➞ false\n  any_float(3, -2, 1) ➞ true\n  any_float(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strings.\n  Returns false in any other cases.\n  Examples\n  any_string(\"hello\", \"world\", \"hello\") ➞ true\n  any_string(\"hello\", \"world\", \"world\") ➞ false\n  any_string(\"hello\", \"world\", \"hello\") ➞ false\n  any_string(\"hello\", \"world\", \"world\") ➞ true\n  */\nconst any_string = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are booleans.\n  Returns false in any other cases.\n  Examples\n  any_boolean(5, 2, 7) ➞ true\n  any_boolean(3, 2, 2) ➞ false\n  any_boolean(3, -2, 1) ➞ true\n  any_boolean(3.6, -2.2, 2) ➞ false\n  */\nconst any_boolean = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are arrays.\n  Returns false in any other cases.\n  Examples\n  any_array(5, 2, 7) ➞ true\n  any_array(3, 2, 2) ➞ false\n  any_array(3, -2, 1) ➞ true\n  any_array(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are objects.\n  Returns false in any other cases.\n  Examples\n  any_object(5, 2, 7) ➞ true\n  any_object(3, 2, 2) ➞ false\n  any_object(3, -2, 1) ➞ true\n  any_object(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are null.\n  Returns false in any other cases.\n  Examples\n  any_null(5, 2, 7) ➞ true\n  any_null(3, 2, 2) ➞ false\n  any_null(3, -2, 1) ➞ true\n  any_null(3.6, -2.2, 2) ➞ false\n  */\nconst any_null = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are undefined.\n  Returns false in any other cases.\n  Examples\n  any_undefined(5, 2, 7) ➞ true\n  any_undefined(3, 2, 2) ➞ false\n  any_undefined(3, -2, 1) ➞ true\n  any_undefined(3.6, -2.2, 2) ➞ false\n  */\nconst any_undefined = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are NaNs.\n  Returns false in any other cases.\n  Examples\n  any_nan(5, 2, 7) ➞ true\n  any_nan(3, 2, 2) ➞ false\n  any_nan(3, -2, 1) ➞ true\n  any_nan(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are dates.\n  Returns false in any other cases.\n  Examples\n  any_date(5, 2, 7) ➞ true\n  any_date(3, 2, 2) ➞ false\n  any_date(3, -2, 1) ➞ true\n  any_date(3.6, -2.2, 2) ➞ false\n  */\nconst any_date = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are functions.\n  Returns false in any other cases.\n  Examples\n  any_function(5, 2, 7) ➞ true\n  any_function(3, 2, 2) ➞ false\n  any_function(3, -2, 1) ➞ true\n  any_function(3.6, -2.2, 2) ➞ false\n  */\nconst any_function = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are numbers.\n  Returns false in any other cases.\n  Examples\n  any_number(5, 2, 7) ➞ true\n  any_number(3, 2, 2) ➞ false\n  any_number(3, -2, 1) ➞ true\n  any_number(3.6, -2.2, 2) ➞ false\n  */\nconst any_number = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are symbols.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, 2, 2) ➞ false\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false\n  */\nconst any_symbol = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  let vowels = 'aeiouAEIOU'\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      result += letter\n      \n      for (let j = 0; j < vowels.length; j++) {\n        let vowel = vowels[j]\n        \n        if (i === j + 1) {\n          result += vowel\n        }\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 9\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 9\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 9\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 9\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 9\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i].toString().length;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 9\n  For ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!=='string'){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers\n  that are divisible by all of the integers in the array.\n  for example:\n  divisors([2,3,5,7]) => [2,3]\n  divisors([2,3,5]) => []\n  divisors([2,3,5,7,11,13,17]) => [2,3,5,7]\n  divisors([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  divisors([]) => []\n  divisors([1]) => []\n  divisors([0]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  divisors([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-13,-14,-15]) => []\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  count_vowels('aBCdEf') returns 2\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 0\n  */\nconst count_consonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D' || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H' || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L' || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P' || s[i] === 'q' || s[i] === 'Q' || s[i] === 'r' || s[i] === 'R' || s[i] ==='s' || s[i] === 'S' || s[i] === 't' || s[i] === 'T' || s[i] === 'v' || s[i] === 'V' || s[i] === 'w' || s[i] === 'W' || s[i] === 'x' || s[i] === 'X' || s[i] === 'y' || s[i] === 'Y' || s[i] === 'z' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices. \n  \n  For example:\n  count_spaces('aBCdEf') returns 2\n  count_spaces('abcdefg') returns 0\n  count_spaces('dBBE') returns 0\n  */\nconst count_spaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in the string. \n  \n  For example:\n  count_digits('aBCdEf') returns 3\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of letters in the string. \n  \n  For example:\n  count_letters('aBCdEf') returns 3\n  count_letters('abcdefg') returns 0\n  count_letters('dBBE') returns 0\n  */\nconst count_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of words in the string. \n  \n  For example:\n  count_words('aBCdEf') returns 2\n  count_words('abcdefg') returns 0\n  count_words('dBBE') returns 0\n  */\nconst count_words = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lines in the string. \n  \n  For example:\n  count_lines('aBCdEf') returns 2\n  count_lines('abcdefg') returns 0\n  count_lines('dBBE') returns 0\n  */\nconst count_lines = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '\\n') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of characters in the string. \n  \n  For example:\n  count_characters('aBCdEf') returns 3\n  count_characters('abcdefg') returns 0\n  count_characters('dBBE') returns 0\n  */\nconst count_characters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of words in the string. \n  \n  For example:\n  count_words('aBCdEf') returns 2\n  count_words('abcdefg') returns 0\n  count_words('dBBE') returns 0\n  */\nconst count_words = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lines in the string. \n  \n  For example:\n  count_lines('aBCdEf') returns 2\n  count_lines('abcdefg') returns 0\n  count_lines('dBBE') returns 0\n  */\nconst count_lines = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '\\n') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of characters in the string. \n  \n  For example:\n  count_characters('aBCdEf') returns 3\n  count_characters('abcdefg') returns 0\n  count_characters('dBBE') returns 0\n  */\nconst count_characters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of characters in the string. \n  \n  For example:\n  count_characters('aBCdEf') returns 3\n  count_characters('abcdefg') returns 0\n  count_characters('dBBE') returns 0\n  */\nconst count_characters = (s) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const [int1, int2] = value.split('.');\n  const [int1int, int2int] = [parseInt(int1), parseInt(int2)];\n  const diff = Math.abs(int1int - int2int);\n  if (diff === 0) {\n    return int1int;\n  }\n  if (diff > 0) {\n    return int1int + 1;\n  }\n  return int1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_decimal(\"10\")\n  10\n  >>> closest_decimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_decimal(\"14.5\") should\n  return 15.3 and closest_decimal(\"-14.5\") should return -15.3\n  */\nconst closest_decimal = (value) => {\n  const [dec1, dec2] = value.split('.');\n  const [dec1int, dec2int] = [parseInt(dec1), parseInt(dec2)];\n  const diff = Math.abs(dec1int - dec2int);\n  if (diff === 0) {\n    return dec1int;\n  }\n  if (diff > 0) {\n    return dec1int + 1;\n  }\n  return dec1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number = (value) => {\n  const [num1, num2] = value.split('.');\n  const [num1int, num2int] = [parseFloat(num1), parseFloat(num2)];\n  const diff = Math.abs(num1int - num2int);\n  if (diff === 0) {\n    return num1int;\n  }\n  if (diff > 0) {\n    return num1int + 1;\n  }\n  return num1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const [perc1, perc2] = value.split('.');\n  const [perc1int, perc2int] = [parseFloat(perc1), parseFloat(perc2)];\n  const diff = Math.abs(perc1int - perc2int);\n  if (diff === 0) {\n    return perc1int;\n  }\n  if (diff > 0) {\n    return perc1int + 1;\n  }\n  return perc1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_date(\"14.5\") should\n  return 15.3 and closest_date(\"-14.5\") should return -15.3\n  */\nconst closest_date = (value) => {\n  const [date1, date2] = value.split('.');\n  const [date1int, date2int] = [new Date(date1), new Date(date2)];\n  const diff = Math.abs(date1int - date2int);\n  if (diff === 0) {\n    return date1int;\n  }\n  if (diff > 0) {\n    return date1int + 1;\n  }\n  return date1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_time(\"14.5\") should\n  return 15.3 and closest_time(\"-14.5\") should return -15.3\n  */\nconst closest_time = (value) => {\n  const [time1, time2] = value.split('.');\n  const [time1int, time2int] = [new Date(time1), new Date(time2)];\n  const diff = Math.abs(time1int - time2int);\n  if (diff === 0) {\n    return time1int;\n  }\n  if (diff > 0) {\n    return time1int + 1;\n  }\n  return time1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_date(\"14.5\") should\n  return 15.3 and closest_date(\"-14.5\") should return -15.3\n  */\nconst closest_date = (value) => {\n  const [date1, date2] = value.split('.');\n  const [date1int, date2int] = [new Date(date1), new Date(date2)];\n  const diff = Math.abs(date1int - date2int);\n  if (diff === 0) {\n    return date1int;\n  }\n  if (diff > 0) {\n    return date1int + 1;\n  }\n  return date1int - 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
