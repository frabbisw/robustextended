{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntT = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntT([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntT([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntT([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntT([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntU = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntU([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntU([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntV = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntV([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntV([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntW = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntW([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntW([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntX = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntX([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntX([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntY = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntY([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntY([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntZ = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntZ([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntZ([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntA = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const diffs = sortedNumbers.map((n) => Math.abs(n - sortedNumbers[0]));\n  const minDiff = Math.min(...diffs);\n  return diffs.some((diff) => diff < minDiff && diff > -minDiff);\n};\n\n/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntA([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntA([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntB = (numbers, threshold) => {\n  const sortedNumbers = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = new RegExp(\n    '\\\\(|\\\\)|\\\\{|\\\\}|\\\\[|\\\\]|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\)|\\\\(|\\\\", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestP", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let stones = 1;\n  let level = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      level[level.length] = stones;\n      stones += 1;\n    } else {\n      stones += 2;\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverse = (s) => {\n  return s.split(',').map(word => word.trim()).reverse();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAsc = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverse = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverseAndAsc = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverseAndAscReverse = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverseAndAscReverseAndAsc = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverseAndAscReverseAndAscReverse = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worDsStRingReverseAndAscReverseAndAscReverseAndAscReverseAndAsc = (s) => {\n  return s.split(',').map(word => word.trim()).reverse().sort().reverse().sort();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const even = x % 2 === 0;\n  const lower = even? x : x - 1;\n  const upper = even? y : y + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 13\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const odd = x % 2 === 1;\n  const lower = odd? x : x - 1;\n  const upper = odd? y : y + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  const lower = x > y? x : y - 1;\n  const upper = x < y? y : x + 1;\n  return lower > upper? -1 : Math.max(lower, upper);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits2 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits3 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit and even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits4 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit and even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits5 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit and even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits6 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit and even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits7 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            result.push(item);\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit and even digit and odd digit and even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits8 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            if (item % 2!== 0) {\n              result.push(item);\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit and even digit and odd digit and even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits9 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              if (item % 2!== 0) {\n                if (item % 2 === 0) {\n                  result.push(item);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit and even digit and odd digit and even digit and odd digit and even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits10 = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              if (item % 2!== 0) {\n                if (item % 2 === 0) {\n                  if (item % 2!== 0) {\n                    if (item % 2 === 0) {\n                      result.push(item);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((x) => {\n    if (x % 10 === 1) {\n      return \"One\";\n    } else if (x % 10 === 2) {\n      return \"Two\";\n    } else if (x % 10 === 3) {\n      return \"Three\";\n    } else if (x % 10 === 4) {\n      return \"Four\";\n    } else if (x % 10 === 5) {\n      return \"Five\";\n    } else if (x % 10 === 6) {\n      return \"Six\";\n    } else if (x % 10 === 7) {\n      return \"Seven\";\n    } else if (x % 10 === 8) {\n      return \"Eight\";\n    } else if (x % 10 === 9) {\n      return \"Nine\";\n    }\n  });\n  return arr4;\n};\n\n// TESTS\n\nconst tests = [\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n  [\"Seven\", 7],\n  [\"Eight\", 8],\n  [\"Nine\", 9],\n  [\"One\", 1],\n  [\"Two\", 2],\n  [\"Three\", 3],\n  [\"Four\", 4],\n  [\"Five\", 5],\n  [\"Six\", 6],\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  { name: 'factorial of 1', expected: 1, actual: factorial(1) },\n  { name: 'factorial of 2', expected: 2, actual: factorial(2) },\n  { name: 'factorial of 3', expected: 6, actual: factorial(3) },\n  { name: 'factorial of 4', expected: 24, actual: factorial(4) },\n  { name: 'factorial of 5', expected: 120, actual: factorial(5) },\n  { name: 'factorial of 6', expected: 720,  actual: factorial(6) },\n  { name: 'factorial of 7', expected: 5040, actual: factorial(7) },\n  { name: 'factorial of 8', expected: 40320,  actual: factorial(8) },\n  { name: 'factorial of 9', expected: 362880,  actual: factorial(9) },\n  { name: 'factorial of 10', expected: 3628800, actual: factorial(10) },\n  { name: 'factorial of 11', expected: 39916800, actual: factorial(11) },\n  { name: 'factorial of 12', expected: 479001600, actual: factorial(12) },\n  { name: 'factorial of 13', expected: 6227020800, actual: factorial(13) },\n  { name: 'factorial of 14', expected: 87178291200, actual: factorial(14) },\n  { name: 'factorial of 15', expected: 1307674368000, actual: factorial(15) },\n  { name: 'factorial of 16', expected: 20922789888000, actual: factorial(16) },\n  { name: 'factorial of 17', expected: 355687428096000, actual: factorial(17) },\n  { name: 'factorial of 18', expected: 6402373705728000, actual: factorial(18) },\n  { name: 'factorial of 19', expected: 121645100408832000, actual: factorial(19) },\n  { name: 'factorial of 20', expected: 2432902008176640000, actual: factorial(20) },\n  { name: 'factorial of 21', expected: 51090942171709440000, actual: factorial(21) },\n  { name: 'factorial of 22', expected: 1124000727777607680000, actual: factorial(22) },\n  { name: 'factorial of 23', expected: 25852016738884976640000, actual: factorial(23) },\n  { name: 'factorial of 24', expected: 620448401733239439360000, actual: factorial(24) },\n  { name: 'factorial of 25', expected: 15511210043330985984000000, actual: factorial(25) },\n  { name: 'factorial of 26', expected: 4032914611266056355840000000, actual: factorial(26) },\n  { name: 'factorial of 27', expected: 108888694504183521607680000000, actual: factorial(27) },\n  { name: 'factorial of 28', expected: 3048883446117138605015040000000, actual: factorial(28) },\n  { name: 'factorial of 29', expected: 88417619937397019545436160000000, actual: factorial(29) },\n  { name: 'factorial of 30', expected: 265252859812191058636308480000000, actual: factorial(30) },\n  { name: 'factorial of 31', expected: 8222838654177922817725562880000000 ,actual: factorial(31) },\n  { name: 'factorial of 32', expected: 263130836933693530167218012160000000 ,actual: factorial(32) },\n  { name: 'factorial of 33', expected: 5142296636543200494398046511360000000 ,actual: factorial(33) },\n  { name: 'factorial of 34', expected: 103079215106632445587807080701960000000,actual: factorial(34) },\n  { name: 'factorial of 35', expected: 207921762320602973970959183670880000000,actual: factorial(35) },\n  { name: 'factorial of 36', expected: 47062143810078075258099340641025640000000 ,actual: factorial(36) },\n  { name: 'factorial of 37', expected: 1264906262674676875614671875376940000000 ,actual: factorial(37) },\n  { name: 'factorial of 38', expected: 2488745576511102294924369126765039060000000,actual: factorial(38) },\n  { name: 'factorial of 39', expected: 51090942171709440000, actual: factorial(39) },\n  { name: 'factorial of 40', expected: 1124000727777607680000, actual: factorial(40) },\n  { name: 'factorial of 41', expected: 25852016738884976640000, actual: factorial(41) },\n  { name: 'factorial of 42', expected: 620448401733239439360000, actual: factorial(42) },\n  { name: 'factorial of 43', expected: 15511210043330985984000000, actual: factorial(43) },\n  { name: 'factorial of 44', expected: 4032914611266056355840000000, actual: factorial(44) },\n  { name: 'factorial of 45', expected: 108888694504183521607680000000, actual: factorial(45) },\n  { name: 'factorial of 46', expected: 3048883446117138605015040000000, actual: factorial(46) },\n  { name: 'factorial of 47', expected: 88417619937397019545436160000000, actual: factorial(47) },\n  { name: 'factorial of 48', expected: 265252859812191058636308480000000, actual: factorial(48) },\n  { name: 'factorial of 49', expected: 8222838654177922817725562880000000 ,actual: factorial(49) },\n  { name: 'factorial of 50', expected: 263130836933693530167218012160000000 ,actual: factorial(50) },\n  { name: 'factorial of 51', expected: 5142296636543200494398046511360000000 ,actual: factorial(51) },\n  { name: 'factorial of 52', expected: 103079215106632445587807080701960000000,actual: factorial(52) },\n  { name: 'factorial of 53', expected: 2079217623206029739709", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe2 = (even, odd) => {\n  let even2 = 0;\n  let odd2 = 0;\n  for (let i = 2; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even2++;\n    } else {\n      odd2++;\n    }\n  }\n  return [even2, odd2];\n};\n\nexport { eveNOddpalinDroMe2 };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (5, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe3 = (even, odd) => {\n  let even3 = 0;\n  let odd3 = 0;\n  for (let i = 3; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even3++;\n    } else {\n      odd3++;\n    }\n  }\n  return [even3, odd3];\n};\n\nexport { eveNOddpalinDroMe3 };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 4)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe4 = (even, odd) => {\n  let even4 = 0;\n  let odd4 = 0;\n  for (let i = 4; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even4++;\n    } else {\n      odd4++;\n    }\n  }\n  return [even4, odd4];\n};\n\nexport { eveNOddpalinDroMe4 };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 5)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (6, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe5 = (even, odd) => {\n  let even5 = 0;\n  let odd5 = 0;\n  for (let i = 5; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even5++;\n    } else {\n      odd5++;\n    }\n  }\n  return [even5, odd5];\n};\n\nexport { eveNOddpalinDroMe5 };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (6, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (7, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe6 = (even, odd) => {\n  let even6 = 0;\n  let odd6 = 0;\n  for (let i = 6; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverseStr) {\n      even6++;\n    } else {\n      odd6++;\n    }\n  }\n  return [even6, odd6];\n};\n\nexport { eveNOddpalinDroMe6 };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(7, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "<|endoftext|>/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> couNtNuMu([1, 1, 2]) == 3\n  */\nconst couNtNuMu = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMu which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first unsigned digit will be negative:\n  e.g. -123 has unsigned digits -1, 2, and 3.\n  >>> couNtNuMu([]) == 0\n  >>> couNtNuMu([-1, 11, -11]) == 1\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  let sortedArray = arr.sort((a, b) => a - b);\n  let sortedArrayLength = sortedArray.length;\n  if (sortedArrayLength === 0) {\n    return true;\n  }\n  let rightShiftCount = sortedArrayLength - 1;\n  let leftShiftCount = sortedArrayLength;\n  while (rightShiftCount >= 0 && leftShiftCount > 0) {\n    if (sortedArray[rightShiftCount] > sortedArray[leftShiftCount]) {\n      sortedArray[rightShiftCount] = sortedArray[rightShiftCount] - 1;\n    } else {\n      sortedArray[leftShiftCount] = sortedArray[leftShiftCount] + 1;\n    }\n    rightShiftCount--;\n    leftShiftCount--;\n  }\n  return sortedArray.length === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers arr[1], arr[2],..., arr[N]. \n  Your task is to determine if there is a way to rearrange the array such that\n  the difference between the maximum element and the minimum element in the \n  array is minimum.\n\n  If the array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movETwoball([3, 4, 5, 1, 2])==>true\n  Explanation: By performing the following operations, we can rearrange the \n               given array such that the difference between the maximum element \n               and the minimum element in the array is minimum.\n               \n               1. Move the maximum element to the last position in the array.\n               2. Move the minimum element to the first position in the array.\n               3. Move the maximum element to the last position in the array.\n               4. Move the minimum element to the first position in the array.\n               5. Move the maximum element to the last position in the array.\n               6. Move the minimum element to the first position in the array.\n               7. Move the maximum element to the last position in the array.\n               8. Move the minimum element to the first position in the array.\n               9. Move the maximum element to the last position in the array.\n               10. Move the minimum element to the first position in the array.\n               11. Move the maximum element to the last position in the array.\n               12. Move the minimum element to the first position in the array.\n               13. Move the maximum element to the last position in the array.\n               14. Move the minimum element to the first position in the array.\n               15. Move the maximum element to the last position in the array.\n               16. Move the minimum element to the first position in the array.\n               17. Move the maximum element to the last position in the array.\n               18. Move the minimum element to the first position in the array.\n               19. Move the maximum element to the last position in the array.\n               20. Move the minimum element to the first position in the array.\n               21. Move the maximum element to the last position in the array.\n               22. Move the minimum element to the first position in the array.\n               23. Move the maximum element to the last position in the array.\n               24. Move the minimum element to the first position in the array.\n               25. Move the maximum element to the last position in the array.\n               26. Move the minimum element to the first position in the array.\n               27. Move the maximum element to the last position in the array.\n               28. Move the minimum element to the first position in the array.\n               29. Move the maximum element to the last position in the array.\n               30. Move the minimum element to the first position in the array.\n               31. Move the maximum element to the last position in the array.\n               32. Move the minimum element to the first position in the array.\n               33. Move the maximum element to the last position in the array.\n               34. Move the minimum element to the first position in the array.\n               35. Move the maximum element to the last position in the array.\n               36. Move the minimum element to the first position in the array.\n               37. Move the maximum element to the last position in the array.\n               38. Move the minimum element to the first position in the array.\n               39. Move the maximum element to the last position in the array.\n               40. Move the minimum element to the first position in the array.\n               41. Move the maximum element to the last position in the array.\n               42. Move the minimum element to the first position in the array.\n               43. Move the maximum element to the last position in the array.\n               44. Move the minimum element to the first position in the array.\n               45. Move the maximum element to the last position in the array.\n               46. Move the minimum element to the first position in the array.\n               47. Move the maximum element to the last position in the array.\n               48. Move the minimum element to the first position in the array.\n               49. Move the maximum element to the last position in the array.\n               50. Move the minimum element to the first position in the array.\n               51. Move the maximum element to the last position in the array.\n               52. Move the minimum element to the first position in the array.\n               53. Move the maximum element to the last position in the array.\n               54. Move the minimum element to the first position in the array.\n               55. Move the maximum element to the last position in the array.\n               56. Move the minimum element to the first position in the array.\n               57. Move the maximum element to the last position in the array.\n               58. Move the minimum element to the first position in the array.\n               59. Move the maximum element to the last position in the array.\n               60. Move the minimum element to the first position in the array.\n               61. Move the maximum element to the last position in the array.\n               62. Move the minimum element to the first position in the array.\n               63. Move the maximum element to the last position in the array.\n               64. Move the minimum element to the first position in the array.\n               65. Move the maximum element to the last position in the array.\n               66. Move the minimum element to the first position in the array.\n               67. Move the maximum element to the last position in the array.\n               68. Move the minimum element to the first position in the array.\n               69. Move the maximum element to the last position in the array.\n               70. Move the minimum element to the first position in the array.\n               71. Move the maximum element to the last position in the array.\n               72. Move the minimum element to the first position in the array.\n               73. Move the maximum element to the last position in the array.\n               74. Move the minimum element to the first position in the array.\n               75. Move the maximum element to the last position in the array.\n               76. Move the minimum element to the first position in the array.\n               77. Move the maximum element to the last position in the array.\n               78. Move the minimum element to the first position in the array.\n               79. Move the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('001', '010')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('001', '010')\n  '101'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('001')\n  '110'\n  */\nconst strIngNot = a => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += ~a[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XNOR on these inputs and return result also as a string.\n  >>> strIngXNOR('001', '010')\n  '010'\n  */\nconst strIngXNOR = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('001', '010')\n  '010'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('001', '010')\n  '010'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('001')\n  '001'\n  */\nconst strIngNot = a => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += ~a[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XNOR on these inputs and return result also as a string.\n  >>> strIngXNOR('001', '010')\n  '001'\n  */\nconst strIngXNOR = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('001', '010')\n  '001'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('001', '010')\n  '001'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('001')\n  '001'\n  */\nconst strIngNot = a => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += ~a[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XNOR on these inputs and return result also as a string.\n  >>> strIngXNOR('001', '010')\n  '001'\n  */\nconst strIngXNOR = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('001', '010')\n  '001'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('001', '010')\n  '001'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('001')\n  '001'\n  */\nconst strIngNot = a => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += ~a[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XNOR on these inputs and return result also as a string.\n  >>> strIngXNOR('001', '010')\n  '001'\n  */\nconst strIngXNOR = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('001', '010')\n  '001'\n  */\nconst strIngAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('001', '010')\n  '001'\n  */\nconst strIngOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  // Your code here\n};\n\n// Run tests\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHang", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  const maxCount = Object.entries(counts).map(([letter, count]) => count).reduce((acc, cur) => cur > acc? cur : acc);\n  const maxLetter = Object.entries(counts).map(([letter, count]) => letter).reduce((acc, cur) => cur > acc? cur : acc);\n  return maxCount === 1? { [maxLetter]: 1 } : { [maxLetter]: maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  const maxCount = Object.entries(counts).map(([letter, count]) => count).reduce((acc, cur) => cur > acc? cur : acc);\n  const maxLetter = Object.entries(counts).map(([letter, count]) => letter).reduce((acc, cur) => cur > acc? cur : acc);\n  return maxCount === 1? { [maxLetter]: 1 } : { [maxLetter]: maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  const maxCount = Object.entries(counts).map(([letter, count]) => count).reduce((acc, cur) => cur > acc? cur : acc);\n  const maxLetter = Object.entries(counts).map(([letter, count]) => letter).reduce((acc, cur) => cur > acc? cur : acc);\n  return maxCount === 1? { [maxLetter]: 1 } : { [maxLetter]: maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  const maxCount = Object.entries(counts).map(([letter, count]) => count).reduce((acc, cur) => cur > acc? cur : acc);\n  const maxLetter = Object.entries(counts).map(([letter, count]) => letter).reduce((acc, cur) => cur > acc? cur : acc);\n  return maxCount === 1? { [maxLetter]: 1 } : { [maxLetter]: maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  const maxCount = Object.entries(counts).map(([letter, count]) => count).reduce((acc, cur) => cur > acc? cur : acc);\n  const maxLetter = Object.entries(counts).map(([letter, count]) => letter).reduce((acc, cur) => cur > acc? cur : acc);\n  return maxCount === 1? { [maxLetter]: 1 } : { [maxLetter]: maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const counts = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let rev = s.split(\"\").reverse().join(\"\");\n  let res = revErsedeletE(s.split(\"\").reverse().join(\"\"), c);\n  return [res, s.split(\"\").reverse().join(\"\") === rev];\n};\n\n/*Task\n  You are given a string s and an integer k. Your task is to find and print all substrings of s of length k that form a palindrome.\n  Example\n  For s = \"abcabc\", k = 3, the output should be\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc\n  bc\n  abc\n  ab\n  bc", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      } else if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      } else if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      } else if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      } else if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// another\n\nconst maxfill = (grid, capacity) => {\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return 1;\n    if (a === 0 && b === 1) return -1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  if (s.length === 0) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    for (let j = 0; j < n; j += 1) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n    }\n    if (j === n) {\n      res.push(s[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n  let vowelsCountFromLeftAndRight = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUp = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndUp = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n  let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 17;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 19;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 21;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 22;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 23;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 24;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 25;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 26;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 27;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 28;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 29;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeft", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n      if (open > close) {\n        stack.push(lst[i]);\n      }\n      open--;\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any built-in function\n  except the concatenation operator (+).\n  Return 'Yes' if it's possible to concatenate the strings, and return 'No'\n  otherwise.\n  Examples:\n  matChPaRens(['(', ')', '(', ')']) == 'Yes'\n  matChPaRens(['(', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n  }\n  return str.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all the strings\n  in the list into a single string. You may not use any ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "<|endoftext|>/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longest = strings.reduce((prev, curr) => {\n    return curr.length > prev? curr.length : prev\n  }, 0)\n\n  return strings.reduce((prev, curr) => {\n    return curr.length === longest? curr : prev\n  }, null)\n}\n\n// TESTS\n// console.log(lonGest(['a', 'b', 'c']))\n// console.log(lonGest(['a', 'bb', 'ccc']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i']))\n// console.log(lonGest(['a', 'bb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'i', 'j']))\n// console.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { maxImum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minImum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { minImum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 3, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxSum = (arr, k) => {\n  const result = [];\n  let maxSum = 0;\n  for (let i = 0; i < k; i++) {\n    let maxSumIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      maxSum = Math.max(maxSum, arr[j]);\n    }\n    result.push(maxSum);\n    maxSum = 0;\n  }\n  return result;\n};\n\nexport { maxSum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minSum = (arr, k) => {\n  const result = [];\n  let minSum = 0;\n  for (let i = 0; i < k; i++) {\n    let minSumIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      minSum = Math.min(minSum, arr[j]);\n    }\n    result.push(minSum);\n    minSum = 0;\n  }\n  return result;\n};\n\nexport { minSum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxProduct of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxProduct = (arr, k) => {\n  const result = [];\n  let maxProduct = 1;\n  for (let i = 0; i < k; i++) {\n    let maxProductIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      maxProduct = Math.max(maxProduct, arr[j]);\n    }\n    result.push(maxProduct);\n    maxProduct = 1;\n  }\n  return result;\n};\n\nexport { maxProduct };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minProduct of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minProduct = (arr, k) => {\n  const result = [];\n  let minProduct = 1;\n  for (let i = 0; i < k; i++) {\n    let minProductIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      minProduct = Math.min(minProduct, arr[j]);\n    }\n    result.push(minProduct);\n    minProduct = 1;\n  }\n  return result;\n};\n\nexport { minProduct };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 3, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxSumOfProduct = (arr, k) => {\n  const result = [];\n  let maxSumOfProduct = 1;\n  for (let i = 0; i < k; i++) {\n    let maxSumOfProductIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      maxSumOfProduct = Math.max(maxSumOfProduct, arr[j] * arr[i]);\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN1 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN2 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN3 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN4 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN5 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN6 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN7 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN8 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN9 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the integer that appears more than once in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN10 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    next = prev;\n    prev = next;\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = next * 3 + 1;\n    }\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  let dateArray = date.split('-');\n  let dateArray2 = date.split('/');\n  let dateArray3 = date.split('.');\n  let dateArray4 = date.split(' ');\n  let dateArray5 = date.split('/');\n  let dateArray6 = date.split('.');\n  let dateArray7 = date.split(' ');\n  let dateArray8 = date.split('/');\n  let dateArray9 = date.split('.');\n  let dateArray10 = date.split(' ');\n  let dateArray11 = date.split('/');\n  let dateArray12 = date.split('.');\n  let dateArray13 = date.split(' ');\n  let dateArray14 = date.split('/');\n  let dateArray15 = date.split('.');\n  let dateArray16 = date.split(' ');\n  let dateArray17 = date.split('/');\n  let dateArray18 = date.split('.');\n  let dateArray19 = date.split(' ');\n  let dateArray20 = date.split('/');\n  let dateArray21 = date.split('.');\n  let dateArray22 = date.split(' ');\n  let dateArray23 = date.split('/');\n  let dateArray24 = date.split('.');\n  let dateArray25 = date.split(' ');\n  let dateArray26 = date.split('/');\n  let dateArray27 = date.split('.');\n  let dateArray28 = date.split(' ');\n  let dateArray29 = date.split('/');\n  let dateArray30 = date.split('.');\n  let dateArray31 = date.split(' ');\n  let dateArray32 = date.split('/');\n  let dateArray33 = date.split('.');\n  let dateArray34 = date.split(' ');\n  let dateArray35 = date.split('/');\n  let dateArray36 = date.split('.');\n  let dateArray37 = date.split(' ');\n  let dateArray38 = date.split('/');\n  let dateArray39 = date.split('.');\n  let dateArray40 = date.split(' ');\n  let dateArray41 = date.split('/');\n  let dateArray42 = date.split('.');\n  let dateArray43 = date.split(' ');\n  let dateArray44 = date.split('/');\n  let dateArray45 = date.split('.');\n  let dateArray46 = date.split(' ');\n  let dateArray47 = date.split('/');\n  let dateArray48 = date.split('.');\n  let dateArray49 = date.split(' ');\n  let dateArray50 = date.split('/');\n  let dateArray51 = date.split('.');\n  let dateArray52 = date.split(' ');\n  let dateArray53 = date.split('/');\n  let dateArray54 = date.split('.');\n  let dateArray55 = date.split(' ');\n  let dateArray56 = date.split('/');\n  let dateArray57 = date.split('.');\n  let dateArray58 = date.split(' ');\n  let dateArray59 = date.split('/');\n  let dateArray60 = date.split('.');\n  let dateArray61 = date.split(' ');\n  let dateArray62 = date.split('/');\n  let dateArray63 = date.split('.');\n  let dateArray64 = date.split(' ');\n  let dateArray65 = date.split('/');\n  let dateArray66 = date.split('.');\n  let dateArray67 = date.split(' ');\n  let dateArray68 = date.split('/');\n  let dateArray69 = date.split('.');\n  let dateArray70 = date.split(' ');\n  let dateArray71 = date.split('/');\n  let dateArray72 = date.split('.');\n  let dateArray73 = date.split(' ');\n  let dateArray74 = date.split('/');\n  let dateArray75 = date.split('.');\n  let dateArray76 = date.split(' ');\n  let dateArray77 = date.split('/');\n  let dateArray78 = date.split('.');\n  let dateArray79 = date.split(' ');\n  let dateArray80 = date.split('/');\n  let dateArray81 = date.split('.');\n  let dateArray82 = date.split(' ');\n  let dateArray83 = date.split('/');\n  let dateArray84 = date.split('.');\n  let dateArray85 = date.split(' ');\n  let dateArray86 = date.split('/');\n  let dateArray87 = date.split('.');\n  let dateArray88 = date.split(' ');\n  let dateArray89 = date.split('/');\n  let dateArray90 = date.split('.');\n  let dateArray91 = date.split(' ');\n  let dateArray92 = date.split('/');\n  let dateArray93 = date.split('.');\n  let dateArray94 = date.split(' ');\n  let dateArray95 = date.split('/');\n  let dateArray96 = date.split('.');\n  let dateArray97 = date.split(' ');\n  let dateArray98 = date.split('/');\n  let dateArray99 = date.split('.');\n  let dateArray100 = date.split(' ');\n  let dateArray101 = date.split('/');\n  let dateArray102 = date.split('.');\n  let dateArray103 = date.split(' ');\n  let dateArray104 = date.split('/');\n  let dateArray105 = date.split('.');\n  let dateArray106 = date.split(' ');\n  let dateArray107 = date.split('/');\n  let dateArray108 = date.split('.');\n  let dateArray109 = date.split(' ');\n  let dateArray110 = date.split('/');\n  let dateArray111 = date.split('.');\n  let dateArray112 = date.split(' ');\n  let dateArray113 = date.split('/');\n  let dateArray114 = date.split('.');\n  let dateArray115 = date.split(' ');\n  let dateArray116 = date.split('/');\n  let dateArray117 = date.split('.');\n  let dateArray118 = date.split(' ');\n  let dateArray119 = date.split('/');\n  let dateArray120 = date.split('.');\n  let dateArray121 = date.split(' ');\n  let dateArray122 = date.split('/');\n  let dateArray123 = date.split('.');\n  let dateArray124 = date.split(' ');\n  let dateArray125 = date.split('/');\n  let dateArray126 = date.split('.');\n  let dateArray127 = date.split(' ');\n  let dateArray128 = date.split('/');\n  let dateArray129 = date.split('.');\n  let dateArray130 = date.split(' ');\n  let dateArray131 = date.split('/');\n  let dateArray132 = date.split('.');\n  let dateArray133 = date.split(' ');\n  let dateArray134 = date.split('/');\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.toLowerCase()).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 25, ord('Z') = 26, ord('a') = 27, ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds3 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.toUpperCase()).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 25, ord('Z') = 26, ord('a') = 27, ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds4 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.toUpperCase()).filter((word) => word.length % 2 === 0).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits in the text with odd order in the\n  alphabet, ord('0') = 10, ord('1') = 11, ord('2') = 12, ord('3') = 13, ord('4') = 14, ord('5') = 15, ord('6') = 16, ord('7') = 17, ord('8') = 18, ord('9') = 19\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds5 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.length).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits in the text with even order in the\n  alphabet, ord('0') = 10, ord('1') = 11, ord('2') = 12, ord('3') = 13, ord('4') = 14, ord('5') = 15, ord('6') = 16, ord('7') = 17, ord('8') = 18, ord('9') = 19\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds6 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.length).filter((word) => word.length % 2 === 0).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of letters with odd order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds7 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.length).filter((word) => word.length % 2 === 0).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of letters with even order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds8 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => word.length).filter((word) => word.length % 2 === 0).filter((word) => word.length % 2 === 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().reverse().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().reverse().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().reverse().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  const set = new Set(lst);\n  return set.size === lst.sort().length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2Start && interval2End <= interval1End;\n  }\n  if (interval2Start > interval2End) {\n    return interval2Start <= interval1Start && interval1End <= interval2End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2Start <= interval1Start && interval2End <= interval1End;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1Start <= interval2Start && interval1End <= interval2End;\n  }\n  if (interval2Start ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;\n    res.push(sign * Math.pow(Math.abs(arr[i]), i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] > 0? 1 : -1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  M[0] = 1;\n  for (let i = 1; i < N; i++) {\n    M[i] = M[i - 1] + grid[i - 1].length;\n  }\n  const result = [];\n  let min = 0;\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M[i]; j++) {\n      if (M[j] >= min) {\n        min = M[j];\n        result.push(grid[i][j]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n      Input:\n          [\n            [1,1,0,1],\n            [1,0,1,1],\n            [1,1,1,1],\n            [1,1,1,1]\n          ]\n      Output: 4\n*/\nconst maxSquare = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    M[i] = matrix[i].length;\n  }\n  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (matrix[i][j] === 1) {\n        if (max < matrix[i][j]) {\n          max = matrix[i][j];\n          maxRow = i;\n          maxCol = j;\n        }\n      }\n    }\n  }\n  return max * max;\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest square containing\n  only 1's and return its area.\n\n  Example:\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const gcd = (a, b) => {\n    while (a!== 0) {\n      const t = b;\n      b = a % b;\n      a = t;\n    }\n    return b;\n  };\n  return gcd(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if(n%2 === 0){\n    arr.push(1);\n  }\n  for(let i = 2; i <= n; i++){\n    arr.push(arr.slice(-1)[0] + arr.slice(-2)[0] + arr.slice(-3)[0]);\n  }\n  return arr;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels \n  in that string.\n  Examples:\n  vowels(\"hello\") === 3\n  vowels(\"awesome\") === 0\n  vowels(\"awesome day\") === 2\n  vowels(\"awesomeeeeee\") === 5\n*/\nconst vowels = (str) => {\n  let vowelCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\"){\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of consonants \n  in that string.\n  Examples:\n  consonants(\"hello\") === 3\n  consonants(\"awesome\") === 0\n  consonants(\"awesome day\") === 2\n  consonants(\"awesomeeeeee\") === 5\n*/\nconst consonants = (str) => {\n  let consonantCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\" || str[i] === \"y\"){\n      consonantCount++;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words in that string.\n  Examples:\n  words(\"hello world\") === 2\n  words(\"awesome day\") === 1\n  words(\"awesomeeeeee\") === 5\n*/\nconst words = (str) => {\n  let wordCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences in that string.\n  Examples:\n  sentences(\"hello world\") === 2\n  sentences(\"awesome day\") === 1\n  sentences(\"awesomeeeeee\") === 5\n*/\nconst sentences = (str) => {\n  let sentenceCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"!\"){\n      sentenceCount++;\n    }\n  }\n  return sentenceCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters in that string.\n  Examples:\n  letters(\"hello world\") === 5\n  letters(\"awesome day\") === 6\n  letters(\"awesomeeeeee\") === 10\n*/\nconst letters = (str) => {\n  let letterCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      letterCount++;\n    }\n  }\n  return letterCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words in that string.\n  Examples:\n  words(\"hello world\") === 2\n  words(\"awesome day\") === 1\n  words(\"awesomeeeeee\") === 5\n*/\nconst words = (str) => {\n  let wordCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences in that string.\n  Examples:\n  sentences(\"hello world\") === 2\n  sentences(\"awesome day\") === 1\n  sentences(\"awesomeeeeee\") === 5\n*/\nconst sentences = (str) => {\n  let sentenceCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"!\"){\n      sentenceCount++;\n    }\n  }\n  return sentenceCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters in that string.\n  Examples:\n  letters(\"hello world\") === 5\n  letters(\"awesome day\") === 6\n  letters(\"awesomeeeeee\") === 10\n*/\nconst letters = (str) => {\n  let letterCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      letterCount++;\n    }\n  }\n  return letterCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words in that string.\n  Examples:\n  words(\"hello world\") === 2\n  words(\"awesome day\") === 1\n  words(\"awesomeeeeee\") === 5\n*/\nconst words = (str) => {\n  let wordCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences in that string.\n  Examples:\n  sentences(\"hello world\") === 2\n  sentences(\"awesome day\") === 1\n  sentences(\"awesomeeeeee\") === 5\n*/\nconst sentences = (str) => {\n  let sentenceCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"!\"){\n      sentenceCount++;\n    }\n  }\n  return sentenceCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters in that string.\n  Examples:\n  letters(\"hello world\") === 5\n  letters(\"awesome day\") === 6\n  letters(\"awesomeeeeee\") === 10\n*/\nconst letters = (str) => {\n  let letterCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      letterCount++;\n    }\n  }\n  return letterCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words in that string.\n  Examples:\n  words(\"hello world\") === 2\n  words(\"awesome day\") === 1\n  words(\"awesomeeeeee\") === 5\n*/\nconst words = (str) => {\n  let wordCount = 0;\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \" \"){\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences in that string.\n  Examples:\n  sentences(\"hello world\") === 2\n  sentences(\"awesome day\") === 1\n  sentences(\"awesomeeeeee\") === 5\n*/\nconst sentences = (str) => {\n  let sentenceCount = 0;\n  for(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigIts = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigIts = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where all brackets in the subsequence are nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ true\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isSureNEsteD = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is unnested.\n  isNEsteDUnnested('[[]]') ➞ true\n  isNEsteDUnnested('[]]]]]]][[[[[]') ➞ false\n  isNEsteDUnnested('[][]') ➞ false\n  isNEsteDUnnested('[]') ➞ false\n  isNEsteDUnnested('[[][]]') ➞ true\n  isNEsteDUnnested('[[]][[') ➞ true\n  */\nconst isNEsteDUnnested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where all brackets in the subsequence are unnested.\n  isNEsteDUnnested('[[]]') ➞ true\n  isNEsteDUnnested('[]]]]]]][[[[[]') ➞ true\n  isNEsteDUnnested('[][]') ➞ false\n  isNEsteDUnnested('[]') ➞ false\n  isNEsteDUnnested('[[][]]') ➞ true\n  isNEsteDUnnested('[[]][[') ➞ true\n  */\nconst isSureNEsteDUnnested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteDUnnested('[[]]') ➞ true\n  isNEsteDUnnested('[]]]]]]][[[[[]') ➞ true\n  isNEsteDUnnested('[][]') ➞ false\n  isNEsteDUnnested('[]') ➞ false\n  isNEsteDUnnested('[[][]]') ➞ true\n  isNEsteDUnnested('[[]][[') ➞ true\n  */\nconst isSureNEsteDUnnested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where all brackets in the subsequence are nested.\n  isNEsteDUnnested('[[]]') ➞ true\n  isNEsteDUnnested('[]]]]]]][[[[[]') ➞ true\n  isNEsteDUnnested('[][]') ➞ false\n  isNEsteDUnnested('[]') ➞ false\n  isNEsteDUnnested('[[][]]') ➞ true\n  isNEsteDUnnested('[[]][[') ➞ true\n  */\nconst isSureNEsteDUnnested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n      if (string[i]!== lastIndex) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is unnested.\n  isNEsteDUnnested('[[]]') ➞ true\n  isNEsteDUnnested('[]]]]]]][[[[[]') ➞ true\n  isNEsteDUnnested('[][]') ➞ false\n  isNEsteDUnnested('[]') ➞ false\n  isNEsteDUnnested('[[][]]') ➞ true\n  isNEsteDUnnested('[[]][[') ➞ true\n  */\nconst isSureNEsteDUnnested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastIndex = stack.pop();\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsAlpha = lastChar.match(/[a-z]/i);\n  return lastCharIsAlpha &&!lastChar.match(/[A-Z]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastVowel(\"apple pie\") ➞ false\n  cheCkIflastVowel(\"apple pi e\") ➞ true\n  cheCkIflastVowel(\"apple pi e \") ➞ false\n  cheCkIflastVowel(\"\") ➞ false\n  */\nconst cheCkIflastVowel = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsVowel = lastChar.match(/[aeiou]/i);\n  return lastCharIsVowel;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a consonant, and false otherwise.\n  Note: \"consonant\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastConsonant(\"apple pie\") ➞ false\n  cheCkIflastConsonant(\"apple pi e\") ➞ true\n  cheCkIflastConsonant(\"apple pi e \") ➞ false\n  cheCkIflastConsonant(\"\") ➞ false\n  */\nconst cheCkIflastConsonant = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsConsonant = lastChar.match(/[b-df-hj-np-tv-z]/i);\n  return lastCharIsConsonant;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastNumber(\"apple pie\") ➞ false\n  cheCkIflastNumber(\"apple pi e\") ➞ true\n  cheCkIflastNumber(\"apple pi e \") ➞ false\n  cheCkIflastNumber(\"\") ➞ false\n  */\nconst cheCkIflastNumber = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsNumber = lastChar.match(/\\d/i);\n  return lastCharIsNumber;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Note: \"special\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastSpecial(\"apple pie\") ➞ false\n  cheCkIflastSpecial(\"apple pi e\") ➞ true\n  cheCkIflastSpecial(\"apple pi e \") ➞ false\n  cheCkIflastSpecial(\"\") ➞ false\n  */\nconst cheCkIflastSpecial = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsSpecial = lastChar.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/i);\n  return lastCharIsSpecial;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastLetter(\"apple pie\") ➞ false\n  cheCkIflastLetter(\"apple pi e\") ➞ true\n  cheCkIflastLetter(\"apple pi e \") ➞ false\n  cheCkIflastLetter(\"\") ➞ false\n  */\nconst cheCkIflastLetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsLetter = lastChar.match(/[a-z]/i);\n  return lastCharIsLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Note: \"digit\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastDigit(\"apple pie\") ➞ false\n  cheCkIflastDigit(\"apple pi e\") ➞ true\n  cheCkIflastDigit(\"apple pi e \") ➞ false\n  cheCkIflastDigit(\"\") ➞ false\n  */\nconst cheCkIflastDigit = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsDigit = lastChar.match(/\\d/i);\n  return lastCharIsDigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Note: \"space\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastSpace(\"apple pie\") ➞ false\n  cheCkIflastSpace(\"apple pi e\") ➞ true\n  cheCkIflastSpace(\"apple pi e \") ➞ false\n  cheCkIflastSpace(\"\") ➞ false\n  */\nconst cheCkIflastSpace = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  const lastCharIsSpace = lastChar.match(/\\s/i);\n  return lastCharIsSpace;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Note: \"special\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastSpecial(\"apple pie\") ➞ false\n  cheCkIflastSpecial(\"apple pi e\") ➞ true\n  cheCkIflastSpecial(\"apple pi e \") ➞ false\n  cheCkIflastSpecial(\"\") ➞ false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 4\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the sum of all the elements in the given array.\n  If the given array is empty then return 0. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraSum([1,2,4,3,5]) = 15\n  canarraSum([1,2,3]) = 0\n  */\nconst canarraSum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Create a function which returns the average of the elements in the given array.\n  If the given array is empty then return 0. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraAvg([1,2,4,3,5]) = 2.5\n  canarraAvg([1,2,3]) = 0\n  */\nconst canarraAvg = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Create a function which returns the median of the elements in the given array.\n  If the given array is empty then return 0. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraMedian([1,2,4,3,5]) = 3\n  canarraMedian([1,2,3]) = 0\n  */\nconst canarraMedian = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let mid = Math.floor(sortedArr.length / 2);\n  if (sortedArr.length % 2 === 0) {\n    return sortedArr[mid];\n  } else {\n    return sortedArr[mid - 1] + sortedArr[mid];\n  }\n};\n\n/*Create a function which returns the mode of the elements in the given array.\n  If the given array is empty then return 0. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraMode([1,2,4,3,5]) = 3\n  canarraMode([1,2,3]) = 0\n  */\nconst canarraMode = (arr) => {\n  let modeArr = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountVal = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] === arr[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountVal = arr[i];\n    }\n  }\n  modeArr.push(maxCountVal);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === maxCountVal) {\n      modeArr.push(arr[i]);\n    }\n  }\n  return modeArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExceptN = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except the given element. If the given array is empty then return an empty array.\n  The given array will not contain duplicate values.\n\n  Examples:\n  canarraExceptN([1,2,4,3,5], 3) = [4,5]\n  canarraExceptN([1,2,3], 3) = []\n  */\nconst canarraExcept = (arr, element) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== element) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Create a function which returns an array of all elements in the given array\n  except ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => a - b)[0]\n  const smallest = lst.sort((a, b) => b - a)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.sort((a, b) => b - a)[0]\n  const smallest = lst.sort((a, b) => a - b)[0]\n  return [smallest || null, largest || null]\n}\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the lar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > parseFloat(b.replace(\",\", \"\"))\n  if (a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a.replace(\",\", \"\")) > b\n  if (!a.includes(\",\") && b.includes(\",\")) return parseFloat(b.replace(\",\", \"\")) > parseFloat(a.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return parseFloat(a) > parseFloat(b)\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == false\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == true\n  */\nconst isEQualtoSumeveO = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEQualtoSumeveNeg(4) == false\n  isEQualtoSumeveNeg(6) == false\n  isEQualtoSumeveNeg(8) == true\n  */\nconst isEQualtoSumeveNeg = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEQualtoSumeveNegeven(4) == false\n  isEQualtoSumeveNegeven(6) == false\n  isEQualtoSumeveNegeven(8) == true\n  */\nconst isEQualtoSumeveNegeven = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveNegevenO(4) == false\n  isEQualtoSumeveNegevenO(6) == false\n  isEQualtoSumeveNegevenO(8) == true\n  */\nconst isEQualtoSumeveNegevenO = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEQualtoSumevePosNeg(4) == false\n  isEQualtoSumevePosNeg(6) == false\n  isEQualtoSumevePosNeg(8) == true\n  */\nconst isEQualtoSumevePosNeg = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumevePosEven(4) == false\n  isEQualtoSumevePosEven(6) == false\n  isEQualtoSumevePosEven(8) == true\n  */\nconst isEQualtoSumevePosEven = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumevePosOdd(4) == false\n  isEQualtoSumevePosOdd(6) == false\n  isEQualtoSumevePosOdd(8) == true\n  */\nconst isEQualtoSumevePosOdd = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEQualtoSumeveNegNeg(4) == false\n  isEQualtoSumeveNegNeg(6) == false\n  isEQualtoSumeveNegNeg(8) == true\n  */\nconst isEQualtoSumeveNegNeg = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEQualtoSumeveNegEven(4) == false\n  isEQualtoSumeveNegEven(6) == false\n  isEQualtoSumeveNegEven(8) == true\n  */\nconst isEQualtoSumeveNegEven = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEQualtoSumeveNegOdd(4) == false\n  isEQualtoSumeveNegOdd(6) == false\n  isEQualtoSumeveNegOdd(8) == true\n  */\nconst isEQualtoSumeveNegOdd = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEQualtoSumevePosPosNeg(4) == false\n  isEQualtoSumevePosPosNeg(6) == false\n  isEQualtoSumevePosPosNeg(8) == true\n  */\nconst isEQualtoSumevePosPosNeg = (n) => {\n  let suma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      suma += i;\n      if (suma === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumevePosPosEven(4) == false\n  isEQualtoSumevePosPosEven(6) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n*/\nconst speCialfactoRiaL = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1);\n};\n\n/*\n  Function: speCialfactoRiaL\n  ----------------------------\n  Calculates the factorial of a number using recursion.\n\n  Uses the brazilian factorial formula.\n\n  Arguments:\n  n - The number to calculate the factorial for.\n\n  Return:\n  The factorial of the given number.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const prefixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === longest[0]) {\n      prefixes.push(longest);\n      longest = longest.slice(1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[0]) {\n      prefixes.push(shortest);\n      shortest = shortest.slice(1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  prefixes.push(longest);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n    }\n    if (char === shortest[shortest.length - 1]) {\n      suffixes.push(shortest);\n      shortest = shortest.slice(0, shortest.length - 1);\n    } else {\n      shortest = shortest.slice(0, shortest.length - 1);\n    }\n  }\n  suffixes.push(longest);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxesReverse('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = string;\n  let shortest = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === longest[longest.length - 1]) {\n      suffixes.push(longest);\n      longest = longest.slice(0, longest.length - 1);\n    } else {\n      longest = longest.slice(0, longest.length - 1);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"-\");\n  return newText;\n};\n\n/*\n  Given a string text, remove all punctuation marks from it\n  \n  removepuncEs(\"Example\") == \"Example\"\n  removepuncEs(\"Example 1\") == \"Example1\"\n  removepuncEs(\"Example!\") == \"Example!\"\n  removepuncEs(\"Example?!\") == \"Example?!\"\n  removepuncEs(\"Example!?\") == \"Example!?\"\n  removepuncEs(\"Example!?!\") == \"Example!?!\"\n  removepuncEs(\"Example!??!\") == \"Example!??!\"\n  removepuncEs(\"Example!???\") == \"Example!???\"\n  removepuncEs(\"Example!????!\") == \"Example!????!\"\n  removepuncEs(\"Example!?????\") == \"Example!?????\"\n  removepuncEs(\"Example!??????!\") == \"Example!??????!\"\n  removepuncEs(\"Example!???????\") == \"Example!???????\"\n  removepuncEs(\"Example!????????!\") == \"Example!????????!\"\n  removepuncEs(\"Example!?????????\") == \"Example!?????????\"\n  removepuncEs(\"Example!??????????!\") == \"Example!??????????!\"\n  removepuncEs(\"Example!???????????\") == \"Example!???????????\"\n  removepuncEs(\"Example!????????????!\") == \"Example!????????????!\"\n  removepuncEs(\"Example!?????????????\") == \"Example!?????????????\"\n  removepuncEs(\"Example!??????????????!\") == \"Example!??????????????!\"\n  removepuncEs(\"Example!???????????????\") == \"Example!???????????????\"\n  removepuncEs(\"Example!????????????????!\") == \"Example!????????????????!\"\n  removepuncEs(\"Example!?????????????????\") == \"Example!?????????????????\"\n  removepuncEs(\"Example!????????????????????!\") == \"Example!????????????????????!\"\n  removepuncEs(\"Example!?????????????????????\") == \"Example!?????????????????????\"\n  removepuncEs(\"Example!??????????????????????!\") == \"Example!??????????????????????!\"\n  removepuncEs(\"Example!?????????????????????????\") == \"Example!?????????????????????????\"\n  removepuncEs(\"Example!????????????????????????????!\") == \"Example!??????????????????????????!\"\n  removepuncEs(\"Example!?????????????????????????????\") == \"Example!???????????????????????????\"\n  removepuncEs(\"Example!??????????????????????????????!\") == \"Example!????????????????????????????!\"\n  removepuncEs(\"Example!?????????????????????????????????\") == \"Examplepassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns a list where each entry is the sum of the entries of \n  the list except for the entry at index i.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be [2,4,6,8]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,-10,-15,-20,-25]\n  */\nconst sumExcept = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (j === i) {\n      continue;\n    }\n    sum += lst[j];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns a list where each entry is the product of the entries of \n  the list except for the entry at index i.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be [2,8,27,64]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-10,-20,-25,-35]\n  */\nconst prodExcept = (lst, i) => {\n  let prod = 1;\n  for (let j = 0; j < lst.length; j++) {\n    if (j === i) {\n      continue;\n    }\n    prod *= lst[j];\n  }\n  return prod;\n};\n\n/*\n  Write a function that takes a list of integers and returns a list where each entry is the product of the entries of \n  the list except for the entry at index i and the entry at index j.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be [2,8,27,64]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-10,-20,-25,-35]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,8,27,64,125,252,3125,625]\n  */\nconst prodExcept2 = (lst, i, j) => {\n  let prod = 1;\n  for (let k = 0; k < lst.length; k++) {\n    if (k === i || k === j) {\n      continue;\n    }\n    prod *= lst[k];\n  }\n  return prod;\n};\n\n/*\n  Write a function that takes a list of integers and returns a list where each entry is the product of the entries of \n  the list except for the entry at index i and the entry at index j.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be [2,8,27,64]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-10,-20,-25,-35]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,8,27,64,125,252,3125,625]\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should be [2,8,27,64,125,252,3125,625,3125,15625,78125,3125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78125,15625,78", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(\" \");\n};\n\nexport { worDsInsenteNce };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce2 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(\" \");\n};\n\nexport { worDsInsenteNce2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(\" \");\n};\n\nexport { worDsInsenteNce3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce4 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(\" \");\n};\n\nexport { worDsInsenteNce4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce5 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(\" \");\n};\n\nexport { worDsInsenteNce5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce6 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = word;\n    for (let j = i + 1; j < words.length; j++) {\n      if (isPrime(word.length) && isPrime(words[j].length)) {\n        if (word.length < words[j].length) {\n          newWord = newWord.concat(words[j]);\n        } else {\n          newWord = newWord.concat(word);\n        }\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "<|endoftext|>/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 2: Write a function that will simPlifZ the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifZ(\"1/5\", \"5/1\") = true\n  simPlifZ(\"1/6\", \"2/1\") = false\n  simPlifZ(\"7/10\", \"10/2\") = false\n  */\nconst simPlifZ = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 3: Write a function that will simPlifX the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifX(\"1/5\", \"5/1\") = true\n  simPlifX(\"1/6\", \"2/1\") = false\n  simPlifX(\"7/10\", \"10/2\") = false\n  */\nconst simPlifX = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 4: Write a function that will simPlifN the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifN(\"1/5\", \"5/1\") = true\n  simPlifN(\"1/6\", \"2/1\") = false\n  simPlifN(\"7/10\", \"10/2\") = false\n  */\nconst simPlifN = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 5: Write a function that will simPlifP the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifP(\"1/5\", \"5/1\") = true\n  simPlifP(\"1/6\", \"2/1\") = false\n  simPlifP(\"7/10\", \"10/2\") = false\n  */\nconst simPlifP = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 6: Write a function that will simPlifR the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifR(\"1/5\", \"5/1\") = true\n  simPlifR(\"1/6\", \"2/1\") = false\n  simPlifR(\"7/10\", \"10/2\") = false\n  */\nconst simPlifR = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 7: Write a function that will simPlifS the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifS(\"1/5\", \"5/1\") = true\n  simPlifS(\"1/6\", \"2/1\") = false\n  simPlifS(\"7/10\", \"10/2\") = false\n  */\nconst simPlifS = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 8: Write a function that will simPlifT the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifT(\"1/5\", \"5/1\") = true\n  simPlifT(\"1/6\", \"2/1\") = false\n  simPlifT(\"7/10\", \"10/2\") = false\n  */\nconst simPlifT = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 9: Write a function that will simPlifU the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifU(\"1/5\", \"5/1\") = true\n  simPlifU(\"1/6\", \"2/1\") = false\n  simPlifU(\"7/10\", \"10/2\") = false\n  */\nconst simPlifU = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 10: Write a function that will simPlifV the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifV(\"1/5\", \"5/1\") = true\n  simPlifV(\"1/6\", \"2/1\") = false\n  simPlifV(\"7/10\", \"10/2\") = false\n  */\nconst simPlifV = (x, n) => {\n  // Your code here\n}\n\n/*\n  Task 11: Write a function that will simPlifW the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifW(\"1/5\", \"5/1\") = true\n  simPlifW(\"1/6\", \"2/1\") = false\n  simPlifW(\"7/10\", \"10/2\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the number of their digits.\n  Note: if there are several items with similar number of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointA([1, 11, -1, -11, -12]) == [-1, -11, -12, 11, 1]\n  >>> ordErBypointA([]) == []\n  */\nconst ordErBypointA = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0].length - a[0].length)\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the number of their digits.\n  Note: if there are several items with similar number of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0].length - b[0].length)\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the first digit of the number.\n  Note: if there are several items with similar first digit,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointA([1, 11, -1, -11, -12]) == [-1, -11, -12, 11, 1]\n  >>> ordErBypointA([]) == []\n  */\nconst ordErBypointA = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the first digit of the number.\n  Note: if there are several items with similar first digit,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the second digit of the number.\n  Note: if there are several items with similar second digit,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointA([1, 11, -1, -11, -12]) == [-1, -11, -12, 11, 1]\n  >>> ordErBypointA([]) == []\n  */\nconst ordErBypointA = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[1] - a[1])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the second digit of the number.\n  Note: if there are several items with similar second digit,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[1] - b[1])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR1 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO1 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR2 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO2 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR3 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO3 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR4 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO4 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR5 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteO5 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTRiple = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriple = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriples = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriplesS = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriplesS2 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriplesS3 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid triplet\n      (1, 2, 5) is not a valid triplet\n      (1, 3, 5) is not a valid triplet\n  */\nconst getmaxTriplesS4 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find the number of triplets \n  (a, b, c) where a, b, c ∈ nums such that a + b + c = 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) is a valid triplet\n      (1, 3, 4) is a valid triplet\n      (2, 3, 5) is a valid trip", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = getOrbit(planet1, planets);\n  const orbit2 = getOrbit(planet2, planets);\n  const distance = getDistance(orbit1, orbit2);\n  const planetsBetween = planets.filter(\n    planet => getDistance(orbit1, getOrbit(planet, planets)) < distance\n  );\n  return planetsBetween.sort((a, b) => getDistance(orbit1, getOrbit(b, planets)));\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = getOrbit(planet1, planets);\n  const orbit2 = getOrbit(planet2, planets);\n  const distance = getDistance(orbit1, orbit2);\n  const planetsBetween = planets.filter(\n    planet => getDistance(orbit1, getOrbit(planet, planets)) < distance\n  );\n  return planetsBetween.sort((a, b) => getDistance(orbit1, getOrbit(b, planets)));\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = getOrbit(planet1, planets);\n  const orbit2 = getOrbit(planet2, planets);\n  const distance = getDistance(orbit1, orbit2);\n  const planetsBetween = planets.filter(\n    planet => getDistance(orbit1, getOrbit(planet, planets)) < distance\n  );\n  return planetsBetween.sort((a, b) => getDistance(orbit1, getOrbit(b, planets)));\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        sortedList.push(currentWord);\n        break;\n      } else {\n        sortedList.push(currentWord);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        sortedList.push(currentWord);\n        break;\n      } else {\n        sortedList.push(currentWord);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        sortedList.push(currentWord);\n        break;\n      } else {\n        sortedList.push(currentWord);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        sortedList.push(currentWord);\n        break;\n      } else {\n        sortedList.push(currentWord);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        sortedList.push(nextWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        sortedList.push(currentWord);\n        break;\n      } else {\n        sortedList.push(currentWord);\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* Return a string containing space-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  let sqrt = Math.sqrt(sum);\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < sqrt) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the square root of the sum of the numbers in the list.\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  douBleTHeDifFerEnce([3, 6, 9, 12, 15]) == [3, 9]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare(\"abcde\",\"abdce\") -> [0,0,0,0,3,3]\n  comPare(\"abcde\",\"abdce\") -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameScores = game.map((score) => Math.abs(score));\n  const guessScores = guess.map((score) => Math.abs(score));\n  const gameScore = gameScores.reduce((acc, cur) => acc + cur);\n  const guessScore = guessScores.reduce((acc, cur) => acc + cur);\n  const gameDiff = gameScore - guessScore;\n  const guessDiff = guessScore - gameScore;\n  return guessDiff.map((diff) => diff > 0? diff : Math.abs(diff));\n};\n\n/*\n  Given a string, return an array of the same length denoting how far off each guess was. If they have ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const strongest = extensions.reduce((acc, cur) => {\n    const [cap, sm] = cur.split('');\n    const strength = cap.length - sm.length;\n    return strength > acc? strength : acc;\n  }, -1);\n  return `${class_name}.${extensions.find(e => e === `${strongest}`)}`;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the\n  characters in lower case.\n  Example:\n  lowerCase('Hello World') == 'hello world'\n  lowerCase('') == ''\n  lowerCase(' ') == ''\n  lowerCase('abc def') == 'abc def'\n  lowerCase('abc defg') == 'abc defg'\n  lowerCase('abc defgh') == 'abc defgh'\n  lowerCase('abc defghi') == 'abc defghi'\n  lowerCase('abc defghij') == 'abc defghij'\n  lowerCase('abc defghijk') == 'abc defghijk'\n  lowerCase('abc defghijkl') == 'abc defghijkl'\n*/\nconst lowerCase = str => str.replace(/[a-z]/g, c => c.toLocaleLowerCase());\n\n/*\n  Write a function that takes a string and returns the string with all the\n  characters in upper case.\n  Example:\n  upperCase('Hello World') == 'HELLO WORLD'\n  upperCase('') == ''\n  upperCase(' ') == ''\n  upperCase('abc def') == 'ABC DEF'\n  upperCase('abc defg') == 'ABC DEFG'\n  upperCase('abc defgh') == 'ABC DEFGH'\n  upperCase('abc defghi') == 'ABC DEFGHI'\n  upperCase('abc defghij') == 'ABC DEFGHIJ'\n  upperCase('abc defghijk') == 'ABC DEFGHIJK'\n  upperCase('abc defghijkl') == 'ABC DEFGHIJKL'\n*/\nconst upperCase = str => str.replace(/[A-Z]/g, c => c.toLocaleUpperCase());\n\n/*\n  Write a function that takes a string and returns the string with all\n  the characters in lower case and all the characters in upper case.\n  Example:\n  mixedCase('Hello World') == 'hELLO wORLD'\n  mixedCase('') == ''\n  mixedCase(' ') == ''\n  mixedCase('abc def') == 'Abc Def'\n  mixedCase('abc defg') == 'Abc Defg'\n  mixedCase('abc defgh') == 'Abc Defgh'\n  mixedCase('abc defghi') == 'Abc Defghi'\n  mixedCase('abc defghij') == 'Abc Defghij'\n  mixedCase('abc defghijk') == 'Abc Defghijk'\n  mixedCase('abc defghijkl') == 'Abc Defghijkl'\n*/\nconst mixedCase = str => str.replace(/[a-z]/g, c => c.toLocaleLowerCase()).replace(/[A-Z]/g, c => c.toLocaleUpperCase());\n\n/*\n  Write a function that takes a string and returns the string with all\n  the characters in lower case and all the characters in upper case.\n  Example:\n  mixedCase('Hello World') == 'hELLO wORLD'\n  mixedCase('') == ''\n  mixedCase(' ') == ''\n  mixedCase('abc def') == 'Abc Def'\n  mixedCase('abc defg') == 'Abc Defg'\n  mixedCase('abc defgh') == 'Abc Defgh'\n  mixedCase('abc defghi') == 'Abc Defghi'\n  mixedCase('abc defghij') == 'Abc Defghij'\n  mixedCase('abc defghijk') == 'Abc Defghijk'\n  mixedCase('abc defghijkl') == 'Abc Defghijkl'\n*/\nconst mixedCase = str => str.replace(/[a-z]/g, c => c.toLocaleLowerCase()).replace(/[A-Z]/g, c => c.toLocaleUpperCase());\n\n/*\n  Write a function that takes a string and returns the string with all\n  the characters in lower case and all the characters in upper case.\n  Example:\n  mixedCase('Hello World') == 'hELLO wORLD'\n  mixedCase('') == ''\n  mixedCase(' ') == ''\n  mixedCase('abc def') == 'Abc Def'\n  mixedCase('abc defg') == 'Abc Defg'\n  mixedCase('abc defgh') == 'Abc Defgh'\n  mixedCase('abc defghi') == 'Abc Defghi'\n  mixedCase('abc defghij') == 'Abc Defghij'\n  mixedCase('abc defghijk') == 'Abc Defghijk'\n  mixedCase('abc defghijkl') == 'Abc Defghijkl'\n*/\nconst mixedCase = str => str.replace(/[a-z]/g, c => c.toLocaleLowerCase()).replace(/[A-Z]/g, c => c.toLocaleUpperCase());\n\n/*\n  Write a function that takes a string and returns the string with all\n  the characters in lower case and all the characters in upper case.\n  Example:\n  mixedCase('Hello World') == 'hELLO wORLD'\n  mixedCase('') == ''\n  mixedCase(' ') == ''\n  mixedCase('abc def') == 'Abc Def'\n  mixedCase('abc defg') == 'Abc Defg'\n  mixedCase('abc defgh') == 'Abc Defgh'\n  mixedCase('abc defghi') == 'Abc Defghi'\n  mixedCase('abc defghij') == 'Abc Defghij'\n  mixedCase('abc defghijk') == 'Abc Defghijk'\n  mixedCase('abc defghijkl') == 'Abc Defghijkl'\n*/\nconst mixedCase = str => str.replace(/[a-z]/g, c => c.toLocaleLowerCase()).replace(/[A-Z]/g, c => c.toLocaleUpperCase());\n\n/*\n  Write a function that takes a string and returns the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b[i])) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = (odd + 1) % 2;\n    num = (num - even) / 10;\n  }\n  return [even, odd];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnUp = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUp(19) == 'XIX'\n  >>> inttoMiNiRomAnUp(152) == 'CLII'\n  >>> inttoMiNiRomAnUp(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLower = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLower(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLower(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLower(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpaces = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLowerWithSpaces(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLowerWithSpaces(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLowerWithSpaces(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpacesAndUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpacesAndUpperAndUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase().toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpacesAndUpperAndUpperAndUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase().toUpperCase().toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpacesAndUpperAndUpperAndUpperAndUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase().toUpperCase().toUpperCase().toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(19) == 'XIX XIX'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(152) == 'CLII CLII'\n  >>> inttoMiNiRomAnUpAndLowerWithSpacesAndUpper(426) == 'CDXXVI CDXXVI'\n  */\nconst inttoMiNiRomAnUpAndLowerWithSpacesAndUpperAndUpperAndUpperAndUpperAndUpper = (number) => {\n  const roman", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMin([\"name\", \"of\", \"string\"]) === \"name\"\n  finDMin([\"name\", \"enam\", \"game\"]) === \"string\"\n  finDMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finDMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverage([\"name\", \"of\", \"string\"]) === \"name\"\n  finDAverage([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDAverage([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finDAverage = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  finDMaxUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finDMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of\n  unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMinUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDMinUnique([\"name\", \"enam\", \"game\"]) === \"string\"\n  finDMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst finDMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number of\n  unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverageUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDAverageUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDAverageUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finDAverageUnique = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  finDMaxUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finDMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of\n  unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMinUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDMinUnique([\"name\", \"enam\", \"game\"]) === \"string\"\n  finDMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst finDMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number of\n  unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverageUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  finDAverageUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDAverageUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const carrotsLeft = remaining - carrots\n  return [carrots, carrotsLeft]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const carrotsLeft = remaining - carrots\n  return [carrots, carrotsLeft]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const carrotsLeft = remaining - carrots\n  return [carrots, carrotsLeft]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const carrotsLeft = remaining - carrots\n  return [carrots, carrotsLeft]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const carrotsLeft = remaining - carrots\n  return [carrots, carrotsLeft]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.match(/[0-9]/i));\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i) && char.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to find out how many times each character appears in s.\n  If the character appears more than once, print it out once.\n  If the character appears less than once, print it out once.\n  Examples\n  countChar(\"abcabc\") should return 3\n  countChar(\"abca\") should return 2\n  countChar(\"abca\") should return 1\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") should return 0\n  countChar(\"abca\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha1('Hello world') == 'c99c15dbe7a2dc77a24f84e3bc4acaac9'\n  */\nconst strIngTOSha1 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strIngTOSha256 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == '0b4bc9a2f776adc398ab5da9a95e97f8b4'\n  */\nconst strIngTOSha3 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == '9c1185a5c5e7ff5cee9800998ecf8427e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == '0b4bc9a2f776adc398ab5da9a95e97f8b4'\n  */\nconst strIngTOSha3 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == '9c1185a5c5e7ff5cee9800998ecf8427e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == '0b4bc9a2f776adc398ab5da9a95e97f8b4'\n  */\nconst strIngTOSha3 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == '9c1185a5c5e7ff5cee9800998ecf8427e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == '0b4bc9a2f776adc398ab5da9a95e97f8b4'\n  */\nconst strIngTOSha3 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == '9c1185a5c5e7ff5cee9800998ecf8427e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == '0b4bc9a2f776adc398ab5da9a95e97f8b4'\n  */\nconst strIngTOSha3 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == '9c1185a5c5e7ff5cee9800998ecf8427e'\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerO = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are less than or equal to a.\n\n  For example:\n  genSumLessThanOrEqual(8) => [3, 6, 9]\n  genSumLessThanOrEqual(10) => [3, 6, 9, 12]\n  genSumLessThanOrEqual(14) => []\n  */\nconst genSumLessThanOrEqual = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i <= a) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are greater than or equal to a.\n\n  For example:\n  genSumGreaterThanOrEqual(8) => [3, 6, 9]\n  genSumGreaterThanOrEqual(10) => [3, 6, 9, 12]\n  genSumGreaterThanOrEqual(14) => []\n  */\nconst genSumGreaterThanOrEqual = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i >= a) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleBy = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % a === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 1) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEven = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddEvenOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddEvenOddOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddEvenOddEvenOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddEvenOddEvenOddOdd = a => {\n  const res = [];\n  for (let i = 1; i <= a; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer a, return the sum of all positive integers that\n  are divisible by a.\n\n  For example:\n  genSumDivisibleBy(8) => [3, 6, 9]\n  genSumDivisibleBy(10) => [3, 6, 9, 12]\n  genSumDivisibleBy(14) => []\n  */\nconst genSumDivisibleByEvenOddEvenOddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_array = [];\n  let music_notes_counter = 0;\n  let music_notes_last_beat = 0;\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    if (music_note === 'o') {\n      music_notes_array[music_notes_counter] = music_notes_last_beat;\n      music_notes_counter++;\n      music_notes_last_beat = 0;\n    } else if (music_note === 'o|') {\n      music_notes_array[music_notes_counter] = music_notes_last_beat;\n      music_notes_counter++;\n      music_notes_last_beat = 0;\n      music_notes_last_beat++;\n    } else if (music_note === '.|') {\n      music_notes_array[music_notes_counter] = music_notes_last_beat;\n      music_notes_counter++;\n      music_notes_last_beat = 0;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;\n      music_notes_last_beat++;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    if (a === 'zero') return -1\n    if (b === 'zero') return 1\n    if (a === 'one') return -1\n    if (b === 'one') return 1\n    if (a === 'two') return -1\n    if (b === 'two') return 1\n    if (a === 'three') return -1\n    if (b === 'three') return 1\n    if (a === 'four') return -1\n    if (b === 'four') return 1\n    if (a === 'five') return -1\n    if (b === 'five') return 1\n    if (a ==='six') return -1\n    if (b ==='six') return 1\n    if (a ==='seven') return -1\n    if (b ==='seven') return 1\n    if (a === 'eight') return -1\n    if (b === 'eight') return 1\n    if (a === 'nine') return -1\n    if (b === 'nine') return 1\n  })\n  return sorted.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  let sorted = letters.split(' ').sort((a, b) => {\n    if (a === 'a') return -1\n    if (b === 'a') return 1\n    if (a === 'b') return -1\n    if (b === 'b') return 1\n    if (a === 'c') return -1\n    if (b === 'c') return 1\n    if (a === 'd') return -1\n    if (b === 'd') return 1\n    if (a === 'e') return -1\n    if (b === 'e') return 1\n    if (a === 'f') return -1\n    if (b === 'f') return 1\n    if (a === 'g') return -1\n    if (b === 'g') return 1\n    if (a === 'h') return -1\n    if (b === 'h') return 1\n    if (a === 'i') return -1\n    if (b === 'i') return 1\n    if (a === 'j') return -1\n    if (b === 'j') return 1\n    if (a === 'k') return -1\n    if (b === 'k') return 1\n    if (a === 'l') return -1\n    if (b === 'l') return 1\n    if (a ==='m') return -1\n    if (b ==='m') return 1\n    if (a === 'n') return -1\n    if (b === 'n') return 1\n    if (a === 'o') return -1\n    if (b === 'o') return 1\n    if (a === 'p') return -1\n    if (b === 'p') return 1\n    if (a === 'q') return -1\n    if (b === 'q') return 1\n    if (a === 'r') return -1\n    if (b === 'r') return 1\n    if (a ==='s') return -1\n    if (b ==='s') return 1\n    if (a === 't') return -1\n    if (b === 't') return 1\n    if (a === 'u') return -1\n    if (b === 'u') return 1\n    if (a === 'v') return -1\n    if (b === 'v') return 1\n    if (a === 'w') return -1\n    if (b === 'w') return 1\n    if (a === 'x') return -1\n    if (b === 'x') return 1\n    if (a === 'y') return -1\n    if (b === 'y') return 1\n    if (a === 'z') return -1\n    if (b === 'z') return 1\n  })\n  return sorted.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  let sorted = letters.split(' ').sort((a, b) => {\n    if (a === 'a') return -1\n    if (b === 'a') return 1\n    if (a === 'b') return -1\n    if (b === 'b') return 1\n    if (a === 'c') return -1\n    if (b === 'c') return 1\n    if (a === 'd') return -1\n    if (b === 'd') return 1\n    if (a === 'e') return -1\n    if (b === 'e') return 1\n    if (a === 'f') return -1\n    if (b === 'f') return 1\n    if (a === 'g') return -1\n    if (b === 'g') return 1\n    if (a === 'h') return -1\n    if (b === 'h') return 1\n    if (a === 'i') return -1\n    if (b === 'i') return 1\n    if (a === 'j') return -1\n    if (b === 'j') return 1\n    if (a === 'k') return -1\n    if (b === 'k') return 1\n    if (a === 'l') return -1\n    if (b === 'l') return 1\n    if (a ==='m') return -1\n    if (b ==='m') return 1\n    if (a === 'n') return -1\n    if (b === 'n') return 1\n    if (a === 'o') return -1\n    if (b === 'o') return 1\n    if (a === 'p') return -1\n    if (b === 'p') return 1\n    if (a === 'q') return -1\n    if (b === 'q') return 1\n    if (a === 'r') return -1\n    if (b === 'r') return 1\n    if (a ==='s') return -1\n    if (b ==='s') return 1\n    if (a === 't') return -1\n    if (b === 't') return 1\n    if (a === 'u') return -1\n    if (b === 'u') return 1\n    if (a === 'v') return -1\n    if (b === 'v') return 1\n    if (a === 'w') return -1\n    if (b === 'w') return 1\n    if (a === 'x') return -1\n    if (b === 'x') return 1\n    if (a === 'y') return -1\n    if (b === 'y') return 1\n    if (a === 'z') return -1\n    if (b === 'z') return 1\n  })\n  return sorted.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErI = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErI(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces.\n  >>> truNcatENumbErIz(3.5)\n ' 3'\n  */\nconst truNcatENumbErIzs = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  ${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzs(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZ = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZ(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZs = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZs(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZsss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZsss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZssss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZsssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZsssss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZssssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZsssssss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZsssssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZssssssss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZssssssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading spaces and zeros.\n  >>> truNcatENumbErIzsZsssssssss(3.5)\n ' 003'\n  */\nconst truNcatENumbErIzsZsssssssss = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return `  0${integer}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const secondNumber = sortedNumbers[1];\n  if (firstNumber === secondNumber) {\n    return [firstNumber, firstNumber];\n  }\n  if (firstNumber > secondNumber) {\n    return [secondNumber, firstNumber];\n  }\n  return [firstNumber, secondNumber];\n};\n\n/**\n * Given a number and a range, return the number in the range that is closest to it.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is in the range, return the first number in the range.\n * If no range is given, return the first number in the range.\n * If no number is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const [min, max] = numbers\n  return numbers.map((x) => {\n    return ((x - min) / (max - min))\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUni", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filTerINtegeRs = (str) => {\n  const result = [];\n  str.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filTerINtegeRf = (str) => {\n  const result = [];\n  str.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [true, false]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filTerINtegeRb = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [true, false]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [{}, {'a': 3.14}, {'abc': 5}]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [{}, {'a': 3.14}, {'abc': 5}]\n  */\nconst filTerINtegeRd = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [{}, {'a': 3.14}, {'abc': 5}]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [{}, {'a': 3.14}, {'abc': 5}]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for lists\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [[], ['a', 3.14], ['abc', 5]]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [[], ['a', 3.14], ['abc', 5]]\n  */\nconst filTerINtegeRl = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for lists\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [[], ['a', 3.14], ['abc', 5]]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [[], ['a', 3.14], ['abc', 5]]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [(), ('a', 3.14), ('abc', 5)]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [(), ('a', 3.14), ('abc', 5)]\n  */\nconst filTerINtegeRt = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [(), ('a', 3.14), ('abc', 5)]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [(), ('a', 3.14), ('abc', 5)]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [{'a': 3.14}, {'abc': 5}]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [{'a': 3.14}, {'abc': 5}]\n  */\nconst filTerINtegeRs = (set) => {\n  const result = [];\n  set.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [{'a': 3.14}, {'abc': 5}]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [{'a': 3.14}, {'abc': 5}]\n  */\nconst filTerINtegeRf = (set) => {\n  const result = [];\n  set.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> fil", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    len++;\n  }\n  return len;\n};\n\n/**\n * Returns true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'ac')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) === index;\n};\n\n/**\n * Returns true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'ab')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length;\n  return index >= 0 && string.indexOf(prefix, index) === index;\n};\n\n/**\n * Returns true if given string contains given substring\n * >>> contains('abc', 'a')\n  true\n  >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'ac')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * >>> containsIgnoreCase('abc', 'a')\n  true\n  >>> containsIgnoreCase('abc', 'ab')\n  true\n  >>> containsIgnoreCase('abc', 'ac')\n  false\n  */\nconst containsIgnoreCase = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(string.length - substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters and ignoring leading\n * characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters and ignoring leading\n * characters and ignoring case\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignoring trailing characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters and ignoring leading\n * characters and ignoring case and ignoring trailing\n * characters and ignoring leading\n * characters\n * >>> containsIgnoreCaseAndTrim('abc', 'a')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ab')\n  true\n  >>> containsIgnoreCaseAndTrim('abc', 'ac')\n  false\n  */\nconst containsIgnoreCaseAndTrim = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.substr(0, substring.length).trim() === '';\n};\n\n/**\n * Returns ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let largest = n;\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n    if (divisor > n) {\n      divisor = n;\n    }\n    if (divisor > largest) {\n      largest = divisor;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestFactor(15)\n  5\n  >>> largestFactor(100)\n  5\n  >>> largestFactor(1000)\n  5\n  >>> largestFactor(10000)\n  5\n  >>> largestFactor(100000)\n  5\n  >>> largestFactor(1000000)\n  5\n  >>> largestFactor(10000000)\n  5\n  >>> largestFactor(100000000)\n  5\n  >>> largestFactor(1000000000)\n  5\n  >>> largestFactor(10000000000)\n  5\n  >>> largestFactor(100000000000)\n  5\n  >>> largestFactor(1000000000000)\n  5\n  >>> largestFactor(10000000000000)\n  5\n  >>> largestFactor(100000000000000)\n  5\n  >>> largestFactor(1000000000000000)\n  5\n  >>> largestFactor(10000000000000000)\n  5\n  >>> largestFactor(100000000000000000)\n  5\n  >>> largestFactor(1000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  5\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZ(8)\n  [2, 2, 2]\n  >>> facToriZ(25)\n  [5, 5]\n  >>> facToriZ(70)\n  [2, 5, 7]\n  */\nconst facTori = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facTori(8)\n  [2, 2, 2]\n  >>> facTori(25)\n  [5, 5]\n  >>> facTori(70)\n  [2, 5, 7]\n  */\nconst facToriZi = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZi(8)\n  [2, 2, 2]\n  >>> facToriZi(25)\n  [5, 5]\n  >>> facToriZi(70)\n  [2, 5, 7]\n  */\nconst facToriZii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZii(8)\n  [2, 2, 2]\n  >>> facToriZii(25)\n  [5, 5]\n  >>> facToriZii(70)\n  [2, 5, 7]\n  */\nconst facToriZiii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZiii(8)\n  [2, 2, 2]\n  >>> facToriZiii(25)\n  [5, 5]\n  >>> facToriZiii(70)\n  [2, 5, 7]\n  */\nconst facToriZiiii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZiiii(8)\n  [2, 2, 2]\n  >>> facToriZiiii(25)\n  [5, 5]\n  >>> facToriZiiii(70)\n  [2, 5, 7]\n  */\nconst facToriZiiiii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZiiiii(8)\n  [2, 2, 2]\n  >>> facToriZiiiii(25)\n  [5, 5]\n  >>> facToriZiiiii(70)\n  [2, 5, 7]\n  */\nconst facToriZiiiiii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZiiiiii(8)\n  [2, 2, 2]\n  >>> facToriZiiiiii(25)\n  [5, 5]\n  >>> facToriZiiiiii(70)\n  [2, 5, 7]\n  */\nconst facToriZiiiiiii = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZiiiiiiii(8)\n  [2, 2, 2]\n  >>> facToriZiiiiiiii(25)\n  [5, 5]\n  >>> facToriZiiiiiiii(70)\n  [2, 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS2 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS3 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS4 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS5 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS6 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS7 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS8 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS9 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS10 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (map.get(num) > 0) {\n      result.push(num);\n      map.set(num, map.get(num) - 1);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasE('hELLO')\n  'Hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('hELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCasE('hello')\n  'HELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase()\n  })\n}\n\n/* For a given string, flip all characters to lowercase and uppercase to lowercase.\n  >>> fliPCasE('HELLO')\n  'hello'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c.toUpperCase()\n  })\n}\n\n/* For a given string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCas", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str;\n  }, '');\n};\n\n/* Remove duplicate items from an array\n  >>> removeDuplicates([1, 1, 2, 2, 3, 3, 4, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates = (arr) => {\n  return [...new Set(arr)];\n};\n\n/* Convert array of strings to array of objects\n  >>> arrayToObj(['a', 'b', 'c'])\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst arrayToObj = (arr) => {\n  return arr.reduce((acc, str) => {\n    acc[str] = true;\n    return acc;\n  }, {});\n};\n\n/* Convert array of objects to array of strings\n  >>> objToArr({a: true, b: true, c: true})\n  ['a', 'b', 'c']\n  */\nconst objToArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of booleans\n  >>> objToBoolArr({a: true, b: true, c: true})\n  [true, true, true]\n  */\nconst objToBoolArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of numbers\n  >>> objToNumArr({a: true, b: true, c: true})\n  [1, 2, 3]\n  */\nconst objToNumArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of strings\n  >>> objToStrArr({a: true, b: true, c: true})\n  ['a', 'b', 'c']\n  */\nconst objToStrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of arrays\n  >>> objToArrArr({a: true, b: true, c: true})\n  [[true, true, true], [true, true, true], [true, true, true]]\n  */\nconst objToArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of arrays\n  >>> objToArrArrArr({a: true, b: true, c: true})\n  [[{a: true}, {b: true}, {c: true}], [{a: true}, {b: true}, {c: true}], [{a: true}, {b: true}, {c: true}]]\n  */\nconst objToArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArrArrArrArrArrArrArr({a: true, b: true, c: true})\n  [{a: true}, {b: true}, {c: true}]\n  */\nconst objToObjArrArrArrArrArrArrArrArrArrArrArrArrArrArr = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/* Convert array of objects to array of objects\n  >>> objToObjArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const filteredStrings = strings.filter(s => s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filTerBYPrefIxIx = (strings, suffix) => {\n  const filteredStrings = strings.filter(s => s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s => s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxIxIxIxIxIxIxIx = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  let posi = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      posi.push(l[i]);\n    }\n  }\n  return posi;\n};\n\n/*Return only negative numbers in the list.\n  >>> getnegTive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5]\n  >>> getnegTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\npassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return true\n  if (n % 5 === 0) return false\n  if (n % 7 === 0) return true\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return true\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return true\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return true\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return true\n  if (n % 43 === 0) return false\n  if (n % 53 === 0) return true\n  if (n % 63 === 0) return false\n  if (n % 73 === 0) return true\n  if (n % 83 === 0) return false\n  if (n % 93 === 0) return true\n  if (n % 103 === 0) return false\n  if (n % 113 === 0) return true\n  if (n % 123 === 0) return false\n  if (n % 133 === 0) return true\n  if (n % 143 === 0) return false\n  if (n % 153 === 0) return true\n  if (n % 163 === 0) return false\n  if (n % 173 === 0) return true\n  if (n % 183 === 0) return false\n  if (n % 193 === 0) return true\n  if (n % 203 === 0) return false\n  if (n % 213 === 0) return true\n  if (n % 223 === 0) return false\n  if (n % 233 === 0) return true\n  if (n % 243 === 0) return false\n  if (n % 253 === 0) return true\n  if (n % 263 === 0) return false\n  if (n % 273 === 0) return true\n  if (n % 283 === 0) return false\n  if (n % 293 === 0) return true\n  if (n % 303 === 0) return false\n  if (n % 313 === 0) return true\n  if (n % 323 === 0) return false\n  if (n % 333 === 0) return true\n  if (n % 343 === 0) return false\n  if (n % 353 === 0) return true\n  if (n % 363 === 0) return false\n  if (n % 373 === 0) return true\n  if (n % 383 === 0) return false\n  if (n % 393 === 0) return true\n  if (n % 403 === 0) return false\n  if (n % 413 === 0) return true\n  if (n % 423 === 0) return false\n  if (n % 433 === 0) return true\n  if (n % 443 === 0) return false\n  if (n % 455 === 0) return true\n  if (n % 463 === 0) return false\n  if (n % 467 === 0) return true\n  if (n % 483 === 0) return false\n  if (n % 493 === 0) return true\n  if (n % 503 === 0) return false\n  if (n % 513 <= 0) return true\n  if (n % 523 <= 0) return false\n  if (n % 533 <= 0) return true\n  if (n % 543 <= 0) return false\n  if (n % 553 <= 0) return true\n  if (n % 563 <= 0) return false\n  if (n % 573 <= 0) return true\n  if (n % 583 <= 0) return false\n  if (n % 593 <= 0) return true\n  if (n % 603 <= 0) return false\n  if (n % 613 <= 0) return true\n  if (n % 623 <= 0) return false\n  if (n % 633 <= 0) return true\n  if (n % 643 <= 0) return false\n  if (n % 653 <= 0) return true\n  if (n % 663 <= 0) return false\n  if (n % 673 <= 0) return true\n  if (n % 683 <= 0) return false\n  if (n % 693 <= 0) return true\n  if (n % 703 <= 0) return false\n  if (n % 713 <= 0) return true\n  if (n % 723 <= 0) return false\n  if (n % 733 <= 0) return true\n  if (n % 743 <= 0) return false\n  if (n % 755 <= 0) return true\n  if (n % 763 <= 0) return false\n  if (n % 773 <= 0) return true\n  if (n % 783 <= 0) return false\n  if (n % 793 <= 0) return true\n  if (n % 803 <= 0) return false\n  if (n % 813 <= 0) return true\n  if (n % 823 <= 0) return false\n  if (n % 833 <= 0) return true\n  if (n % 843 <= 0) return false\n  if (n % 853 <= 0) return true\n  if (n % 863 <= 0) return false\n  if (n % 873 <= 0) return true\n  if (n % 883 <= 0) return false\n  if (n % 893 <= 0) return true\n  if (n % 903 <= 0) return false\n  if (n % 913 <= 0) return true\n  if (n % 923 <= 0) return false\n  if (n % 931 <= 0) return true\n  if (n % 941 <= 0) return false\n  if (n % 951 <= 0) return true\n  if (n % 961 <= 0) return false\n  if (n % 971 <= 0) return true\n  if (n % 981 <= 0) return false\n  if (n % 991 <= 0) return true\n  if (n % 1001 <= 0) return false\n  if (n % 1013 <= 0) return true\n  if (n % 1021 <= 0) return false\n  if (n % 1033 <= 0) return true\n  if (n % 1049 <= 0) return false\n  if (n % 1067 <= 0) return true\n  if (n % 1083 <= 0) return false\n  if (n % 1093 <= 0) return true\n  if (n % 1103 <= 0) return false\n  if (n % 1113 <= 0) return true\n  if (n % 1123 <= 0) return false\n  if (n % 1131 <= 0) return true\n  if (n % 1141 <= 0) return false\n  if (n % 1151 <= 0) return true\n  if (n % 1161 <= 0) return false\n  if (n % 1171 <= 0) return true\n  if (n % 1181 <= 0) return false\n  if (n % 1191 <= 0) return true\n  if (n % 1201 <= 0) return false\n  if (n % 1213 <= 0) return true\n  if (n % 1221 <= 0) return false\n  if (n % 1233 <= 0) return true\n  if (n % 1249 <= 0) return false\n  if (n % 1267 <= 0) return true\n  if (n % 1283 <= 0) return false\n  if (n % 1293 <= 0) return true\n  if (n % 1303 <= 0) return false\n  if (n % 1313 <= 0) return true\n  if (n % 1323 <= 0) return false\n  if (n % 1333 <= 0) return true\n  if (n % 1343 <= 0) return false\n  if (n % 1353 <= 0) return true\n  if (n % 1363 <= 0) return false\n  if (n % 1373 <= 0) return true\n  if (n % 1383 <= 0) return false\n  if (n % 1393 <= 0) return true\n  if (n % 1403 <= 0) return false\n  if (n % 1413 <= 0) return true\n  if (n % 1423 <= 0) return false\n  if (n % 1433 <= 0) return true\n  if (n % 1449 <= 0) return false\n  if (n % 1467 <= 0) return true\n  if (n % 1483 <= 0) return false\n  if (n % 1493 <= 0) return true\n  if (n % 1503 <= 0) return false\n  if (n % 1513 <= 0) return true\n  if (n % 1521 <= 0) return false\n  if (n % 1533 <= 0) return true\n  if (n % 1549 <= 0) return false\n  if (n % 1567 <= 0) return true\n  if (n % 1583 <= 0) return false\n  if (n % 1593 <= 0) return true\n  if (n % 1603 <= 0) return false\n  if (n % 1613 <= 0) return true", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "<|endoftext|>/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x0 = xs[0];\n  const x1 = xs[1];\n  const x2 = xs[2];\n  const x3 = xs[3];\n  const x4 = xs[4];\n  const x5 = xs[5];\n  const x6 = xs[6];\n  const x7 = xs[7];\n  const x8 = xs[8];\n  const x9 = xs[9];\n  const x10 = xs[10];\n  const x11 = xs[11];\n  const x12 = xs[12];\n  const x13 = xs[13];\n  const x14 = xs[14];\n  const x15 = xs[15];\n  const x16 = xs[16];\n  const x17 = xs[17];\n  const x18 = xs[18];\n  const x19 = xs[19];\n  const x20 = xs[20];\n  const x21 = xs[21];\n  const x22 = xs[22];\n  const x23 = xs[23];\n  const x24 = xs[24];\n  const x25 = xs[25];\n  const x26 = xs[26];\n  const x27 = xs[27];\n  const x28 = xs[28];\n  const x29 = xs[29];\n  const x30 = xs[30];\n  const x31 = xs[31];\n  const x32 = xs[32];\n  const x33 = xs[33];\n  const x34 = xs[34];\n  const x35 = xs[35];\n  const x36 = xs[36];\n  const x37 = xs[37];\n  const x38 = xs[38];\n  const x39 = xs[39];\n  const x40 = xs[40];\n  const x41 = xs[41];\n  const x42 = xs[42];\n  const x43 = xs[43];\n  const x44 = xs[44];\n  const x45 = xs[45];\n  const x46 = xs[46];\n  const x47 = xs[47];\n  const x48 = xs[48];\n  const x49 = xs[49];\n  const x50 = xs[50];\n  const x51 = xs[51];\n  const x52 = xs[52];\n  const x53 = xs[53];\n  const x54 = xs[54];\n  const x55 = xs[55];\n  const x56 = xs[56];\n  const x57 = xs[57];\n  const x58 = xs[58];\n  const x59 = xs[59];\n  const x60 = xs[60];\n  const x61 = xs[61];\n  const x62 = xs[62];\n  const x63 = xs[63];\n  const x64 = xs[64];\n  const x65 = xs[65];\n  const x66 = xs[66];\n  const x67 = xs[67];\n  const x68 = xs[68];\n  const x69 = xs[69];\n  const x70 = xs[70];\n  const x71 = xs[71];\n  const x72 = xs[72];\n  const x73 = xs[73];\n  const x74 = xs[74];\n  const x75 = xs[75];\n  const x76 = xs[76];\n  const x77 = xs[77];\n  const x78 = xs[78];\n  const x79 = xs[79];\n  const x80 = xs[80];\n  const x81 = xs[81];\n  const x82 = xs[82];\n  const x83 = xs[83];\n  const x84 = xs[84];\n  const x85 = xs[85];\n  const x86 = xs[86];\n  const x87 = xs[87];\n  const x88 = xs[88];\n  const x89 = xs[89];\n  const x90 = xs[90];\n  const x91 = xs[91];\n  const x92 = xs[92];\n  const x93 = xs[93];\n  const x94 = xs[94];\n  const x95 = xs[95];\n  const x96 = xs[96];\n  const x97 = xs[97];\n  const x98 = xs[98];\n  const x99 = xs[99];\n  const x100 = xs[100];\n  const x101 = xs[101];\n  const x102 = xs[102];\n  const x103 = xs[103];\n  const x104 = xs[104];\n  const x105 = xs[105];\n  const x106 = xs[106];\n  const x107 = xs[107];\n  const x108 = xs[108];\n  const x109 = xs[109];\n  const x110 = xs[110];\n  const x111 = xs[111];\n  const x112 = xs[112];\n  const x113 = xs[113];\n  const x114 = xs[114];\n  const x115 = xs[115];\n  const x116 = xs[116];\n  const x117 = xs[117];\n  const x118 = xs[118];\n  const x119 = xs[119];\n  const x120 = xs[120];\n  const x121 = xs[121];\n  const x122 = xs[122];\n  const x123 = xs[123];\n  const x124 = xs[124];\n  const x125 = xs[125];\n  const x126 = xs[126];\n  const x127 = xs[127];\n  const x128 = xs[128];\n  const x129 = xs[129];\n  const x130 = xs[130];\n  const x131 = xs[131];\n  const x132 = xs[132];\n  const x133 = xs[133];\n  const x134 = xs[134];\n  const x135 = xs[135];\n  const x136 = xs[136];\n  const x137 = xs[137];\n  const x138 = xs[138];\n  const x139 = xs[139];\n  const x140 = xs[140];\n  const x141 = xs[141];\n  const x142 = xs[142];\n  const x143 = xs[143];\n  const x144 = xs[144];\n  const x145 = xs[145];\n  const x146 = xs[146];\n  const x147 = xs[147];\n  const x148 = xs[148];\n  const x149 = xs[149];\n  const x150 = xs[150];\n  const x151 = xs[151];\n  const x152 = xs[152];\n  const x153 = xs[153];\n  const x154 = xs[154];\n  const x155 = xs[155];\n  const x156 = xs[156];\n  const x157 = xs[157];\n  const ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd8 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd9 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2[l2.length - 1] = l2[l2.length - 1] + l[i];\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd10 = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "<|endoftext|>/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> prodEnt([1, 2, 3])\n  6\n  >>> prodEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst prodEnt = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/*Return mean of all elements in the list.\n  >>> meanEnt([1, 2, 3])\n  1.5\n  >>> meanEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10.5\n  */\nconst meanEnt = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in the list.\n  >>> medianEnt([1, 2, 3])\n  2\n  >>> medianEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst medianEnt = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let low = mid;\n  let high = mid;\n  while (low < high) {\n    if (l[low] > l[high]) {\n      low++;\n    } else {\n      high--;\n    }\n  }\n  return l[low];\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt([1, 2, 3])\n  1\n  >>> modeEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeEnt = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt2(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt2(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt2 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt3(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt3(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt3 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt4(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt4(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt4 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt5(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt5(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt5 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt6(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt6(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt6 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt7(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt7(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt7 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt8(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt8(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt8 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt9(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt9(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt9 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt10(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt10(['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'd'\n  */\nconst modeEnt10 = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encOdeCYclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encOdeCYclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "<|endoftext|>/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiB(n - 1) + priMeFiB(n - 2);\n};\n\n/*\n  priMeFiBS returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBS(1)\n  2\n  >>> priMeFiBS(2)\n  3\n  >>> priMeFiBS(3)\n  5\n  >>> priMeFiBS(4)\n  13\n  >>> priMeFiBS(5)\n  89\n  */\nconst priMeFiBS = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBS(n - 1) + priMeFiBS(n - 2);\n};\n\n/*\n  priMeFiBC returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBC(1)\n  2\n  >>> priMeFiBC(2)\n  3\n  >>> priMeFiBC(3)\n  5\n  >>> priMeFiBC(4)\n  13\n  >>> priMeFiBC(5)\n  89\n  */\nconst priMeFiBC = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBC(n - 1) + priMeFiBC(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - 2);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  return priMeFiBN(n - 1) + priMeFiBN(n - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const means = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - means));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  const medians = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - medians));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset divided by the standard deviation\n  of this dataset:\n  MAD = average | x - x_mean | / std |\n  >>> meaNAbsOlutedevIatioSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSD = (numbers) => {\n  const means = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - means));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset divided by the standard deviation\n  of this dataset:\n  MAD = average | x - x_median | / std |\n  >>> meaNAbsOlutedevIatioSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSD = (numbers) => {\n  const medians = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - medians));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset divided by the standard deviation\n  of this dataset divided by the standard deviation of the dataset:\n  MAD = average | x - x_mean | / std / std |\n  >>> meaNAbsOlutedevIatioSDSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSDSD = (numbers) => {\n  const means = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - means));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  const stdstds = stds.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length / stdstds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset divided by the standard deviation\n  of this dataset divided by the standard deviation of the dataset:\n  MAD = average | x - x_median | / std / std |\n  >>> meaNAbsOlutedevIatioSDSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSDSD = (numbers) => {\n  const medians = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - medians));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  const stdstds = stds.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length / stdstds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset divided by the standard deviation\n  of this dataset divided by the standard deviation of the dataset\n  divided by the standard deviation of the dataset:\n  MAD = average | x - x_mean | / std / std / std |\n  >>> meaNAbsOlutedevIatioSDSDSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSDSDSD = (numbers) => {\n  const means = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - means));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  const stdstds = stds.map((n) => Math.sqrt(n));\n  const stdstdstds = stdstds.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length / stdstds.length / stdstdstdstds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset divided by the standard deviation\n  of this dataset divided by the standard deviation of the dataset\n  divided by the standard deviation of the dataset:\n  MAD = average | x - x_median | / std / std / std |\n  >>> meaNAbsOlutedevIatioSDSDSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSDSDSD = (numbers) => {\n  const medians = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - medians));\n  const stds = deviations.map((n) => Math.sqrt(n));\n  const stdstds = stds.map((n) => Math.sqrt(n));\n  const stdstdstds = stdstds.map((n) => Math.sqrt(n));\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length / stds.length / stdstds.length / stdstdstds.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset divided by the standard deviation\n  of this dataset divided by the standard deviation of the dataset\n  divided by the standard deviation of the dataset divided by the\n  standard deviation of the dataset:\n  MAD = average | x - x_mean | / std / std / std / std |\n  >>> meaNAbsOlutedevIatioSDSDSDSD([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioSDSDSDSD = (numbers) => {\n  const means = numbers.map((n) => n / numbers.length);\n  const deviations = numbers.map((n) => Math.abs(n - means));\n  const stds = devi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "<|endoftext|>/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSioN[i].collide(carsSioN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsN[i].collide(carsN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolli = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].collide(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSioN[i].collide(carsSioN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsN[i].collide(carsN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRLisT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRLisT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "<|endoftext|>/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false\n  }\n  return true\n}\n\n/*\n  paiRsSuMToZe takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZe([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZe([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZe([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZe([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZe([1])\n  false\n  */\nconst paiRsSuMToZe = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return l[0] === l[1]\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n    if (sum === 0) return false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given radix\n  >>> chaNgeR(8, 3)\n  '22'\n  >>> chaNgeR(8, 2)\n  '1000'\n  >>> chaNgeR(7, 2)\n  '111'\n  */\nconst chaNgeR = (x, radix) => {\n  let str = x.toString(radix);\n  while (str.length < radix) {\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h / 2, 2));\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 0\n  }\n  if (n <= 7) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 5) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "<|endoftext|>/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  return sortedList[middle];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    if (sortedList[i] === sortedList[maxCountIndex]) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxCountIndex = i;\n    }\n  }\n  return sortedList[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sortedList = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < sorted", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    re", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  if (n < 0) return 0;\n  if (n > p) return p;\n  if (n === p) return n;\n  if (n < p) return modP(n - p, p);\n  if (n > p) return modP(n, p);\n  return n;\n};\n\n/*\n  >>> modPow(6, 2, 5)\n  12\n  >>> modPow(6, 2, 10)\n  4\n  >>> modPow(6, 2, 15)\n  2\n  >>> modPow(6, 2, 20)\n  8\n  >>> modPow(6, 2, 25)\n  4\n  >>> modPow(6, 2, 30)\n  2\n  >>> modPow(6, 2, 35)\n  1\n  >>> modPow(6, 2, 40)\n  6\n  >>> modPow(6, 2, 45)\n  1\n  >>> modPow(6, 2, 50)\n  6\n  >>> modPow(6, 2, 55)\n  1\n  >>> modPow(6, 2, 60)\n  6\n  >>> modPow(6, 2, 65)\n  1\n  >>> modPow(6, 2, 70)\n  6\n  >>> modPow(6, 2, 75)\n  1\n  >>> modPow(6, 2, 80)\n  6\n  >>> modPow(6, 2, 85)\n  1\n  >>> modPow(6, 2, 90)\n  6\n  >>> modPow(6, 2, 95)\n  1\n  >>> modPow(6, 2, 100)\n  6\n  >>> modPow(6, 2, 105)\n  1\n  >>> modPow(6, 2, 110)\n  6\n  >>> modPow(6, 2, 115)\n  1\n  >>> modPow(6, 2, 120)\n  6\n  >>> modPow(6, 2, 125)\n  1\n  >>> modPow(6, 2, 130)\n  6\n  >>> modPow(6, 2, 135)\n  1\n  >>> modPow(6, 2, 140)\n  6\n  >>> modPow(6, 2, 145)\n  1\n  >>> modPow(6, 2, 150)\n  6\n  >>> modPow(6, 2, 155)\n  1\n  >>> modPow(6, 2, 160)\n  6\n  >>> modPow(6, 2, 165)\n  1\n  >>> modPow(6, 2, 170)\n  6\n  >>> modPow(6, 2, 175)\n  1\n  >>> modPow(6, 2, 180)\n  6\n  >>> modPow(6, 2, 185)\n  1\n  >>> modPow(6, 2, 190)\n  6\n  >>> modPow(6, 2, 195)\n  1\n  >>> modPow(6, 2, 200)\n  6\n  >>> modPow(6, 2, 205)\n  1\n  >>> modPow(6, 2, 210)\n  6\n  >>> modPow(6, 2, 215)\n  1\n  >>> modPow(6, 2, 220)\n  6\n  >>> modPow(6, 2, 225)\n  1\n  >>> modPow(6, 2, 230)\n  6\n  >>> modPow(6, 2, 235)\n  1\n  >>> modPow(6, 2, 240)\n  6\n  >>> modPow(6, 2, 245)\n  1\n  >>> modPow(6, 2, 250)\n  6\n  >>> modPow(6, 2, 255)\n  1\n  >>> modPow(6, 2, 260)\n  6\n  >>> modPow(6, 2, 265)\n  1\n  >>> modPow(6, 2, 270)\n  6\n  >>> modPow(6, 2, 275)\n  1\n  >>> modPow(6, 2, 280)\n  6\n  >>> modPow(6, 2, 285)\n  1\n  >>> modPow(6, 2, 290)\n  6\n  >>> modPow(6, 2, 295)\n  1\n  >>> modPow(6, 2, 300)\n  6\n  >>> modPow(6, 2, 305)\n  1\n  >>> modPow(6, 2, 310)\n  6\n  >>> modPow(6, 2, 315)\n  1\n  >>> modPow(6, 2, 320)\n  6\n  >>> modPow(6, 2, 325)\n  1\n  >>> modPow(6, 2, 330)\n  6\n  >>> modPow(6, 2, 335)\n  1\n  >>> modPow(6, 2, 340)\n  6\n  >>> modPow(6, 2, 345)\n  1\n  >>> modPow(6, 2, 350)\n  6\n  >>> modPow(6, 2, 355)\n  1\n  >>> modPow(6, 2, 360)\n  6\n  >>> modPow(6, 2, 365)\n  1\n  >>> modPow(6, 2, 370)\n  6\n  >>> modPow(6, 2, 375)\n  1\n  >>> modPow(6, 2, 380)\n  6\n  >>> modPow(6, 2, 385)\n  1\n  >>> modPow(6, 2, 390)\n  6\n  >>> modPow(6, 2, 395)\n  1\n  >>> modPow(6, 2, 400)\n  6\n  >>> modPow(6, 2, 405)\n  1\n  >>> modPow(6, 2, 410)\n  6\n  >>> modPow(6, 2, 415)\n  1\n  >>> modPow(6, 2, 420)\n  6\n  >>> modPow(6, 2, 425)\n  1\n  >>> modPow(6, 2, 430)\n  6\n  >>> modPow(6, 2, 435)\n  1\n  >>> modPow(6, 2, 440)\n  6\n  >>> modPow(6, 2, 445)\n  1\n  >>> modPow(6, 2, 450)\n  6\n  >>> modPow(6, 2, 455)\n  1\n  >>> modPow(6, 2, 460)\n  6\n  >>> modPow(6, 2, 465)\n  1\n  >>> modPow(6, 2, 470)\n  6\n  >>> modPow(6, 2, 475)\n  1\n  >>> modPow(6, 2, 480)\n  6\n  >>> modPow(6, 2, 485)\n  1\n  >>> modPow(6, 2, 490)\n  6\n  >>> modPow(6, 2, 495)\n  1\n  >>> modPow(6, 2, 500)\n  6\n  >>> modPow(6, 2, 505)\n  1\n  >>> modPow(6, 2, 510)\n  6\n  >>> modPow(6, 2, 515)\n  1\n  >>> modPow(6, 2, 520)\n  6\n  >>> modPow(6, 2, 525)\n  1\n  >>> modPow(6, 2, 530)\n  6\n  >>> modPow(6, 2, 535)\n  1\n  >>> modPow(6, 2, 540)\n  6\n  >>> modPow(6, 2, 545)\n  1\n  >>> modPow(6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    const num = numbers[i];\n    if (i!== 0) {\n      result.push(num);\n    }\n    result.push(delimeter);\n    result.push(num);\n  }\n  return result;\n};\n\n/**\n * Returns a list with every element of the given list repeated `times` times\n * \n * Examples:\n * \n * Repeat list `numbers` 3 times:\n * \n * >>> repeat(3, [1, 2, 3])\n * [1, 2, 3, 1, 2, 3]\n * \n * Repeat list `numbers` 3 times with delimeter `'x'`:\n * \n * >>> repeat(3, [1, 2, 3], 'x')\n * [1, 'x', 2, 'x', 3, 'x', 1, 2, 3]\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 2)\n * [1, 'x', 2, 3, 'x', 1, 2, 'x', 3]\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z')\n * [1, 'x', 2, 3, 'x', 'y', 'z', 1, 'x', 'y', 'z', 2, 'x', 'y', 'z', 3, 'x', 'y', 'z']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 2)\n * [1, 'x', 'y', 'z', 2, 3, 'x', 'y', 'z', 1, 'x', 'y', 'z', 2, 'x', 'y', 'z', 3, 'x', 'y', 'z']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 2)\n * [1, 'x', 'y', 'z', 'w', 2, 3, 'x', 'y', 'z', 'w', 1, 'x', 'y', 'z', 'w', 2, 'x', 'y', 'z', 'w', 3, 'x', 'y', 'z', 'w']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 'x', 2)\n * [1, 'x', 'y', 'z', 'w', 'x', 2, 3, 'x', 'y', 'z', 'w', 'x', 1, 'x', 'y', 'z', 'w', 'x', 2, 'x', 'y', 'z', 'w', 'x', 3, 'x', 'y', 'z', 'w', 'x']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 'x', 'y', 'z')\n * [1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 2, 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 2, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 'x', 'y', 'z', 2)\n * [1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 2, 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 2, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 2)\n * [1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 2, 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 2, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w']\n * \n * Repeat list `numbers` 3 times with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements and with delimeter `'y'` between every two consecutive elements and with delimeter `'z'` between every two consecutive elements and with delimeter `'w'` between every two consecutive elements and with delimeter `'x'` between every two consecutive elements:\n * \n * >>> repeat(3, [1, 2, 3], 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 2)\n * [1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 2, 3, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 1, 'x', 'y', 'z', 'w', 'x', 'y', 'z', 'w', 'x', 2, 'x', 'y', 'z', 'w', 'x', 'y', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot function. Returns decoded string.\n  */\nconst decodeROT = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot3 function. Returns decoded string.\n  */\nconst decodeROT3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot4 function. Returns decoded string.\n  */\nconst decodeROT4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot5 function. Returns decoded string.\n  */\nconst decodeROT5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot6 function. Returns decoded string.\n  */\nconst decodeROT6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot7 function. Returns decoded string.\n  */\nconst decodeROT7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot8 function. Returns decoded string.\n  */\nconst decodeROT8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot9 function. Returns decoded string.\n  */\nconst decodeROT9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot10 function. Returns decoded string.\n  */\nconst decodeROT10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot11 function. Returns decoded string.\n  */\nconst decodeROT11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "<|endoftext|>/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels2 takes a string and returns string without vowels.\n  >>> remOveVOwels2('')\n  ''\n  >>> remOveVOwels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels2('abcdef')\n  'bcdf'\n  >>> remOveVOwels2('aaaaa')\n  ''\n  >>> remOveVOwels2('aaBAA')\n  'B'\n  >>> remOveVOwels2('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels2 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels3 takes a string and returns string without vowels.\n  >>> remOveVOwels3('')\n  ''\n  >>> remOveVOwels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels3('abcdef')\n  'bcdf'\n  >>> remOveVOwels3('aaaaa')\n  ''\n  >>> remOveVOwels3('aaBAA')\n  'B'\n  >>> remOveVOwels3('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels3 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels4 takes a string and returns string without vowels.\n  >>> remOveVOwels4('')\n  ''\n  >>> remOveVOwels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels4('abcdef')\n  'bcdf'\n  >>> remOveVOwels4('aaaaa')\n  ''\n  >>> remOveVOwels4('aaBAA')\n  'B'\n  >>> remOveVOwels4('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels4 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels5 takes a string and returns string without vowels.\n  >>> remOveVOwels5('')\n  ''\n  >>> remOveVOwels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels5('abcdef')\n  'bcdf'\n  >>> remOveVOwels5('aaaaa')\n  ''\n  >>> remOveVOwels5('aaBAA')\n  'B'\n  >>> remOveVOwels5('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels5 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels6 takes a string and returns string without vowels.\n  >>> remOveVOwels6('')\n  ''\n  >>> remOveVOwels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels6('abcdef')\n  'bcdf'\n  >>> remOveVOwels6('aaaaa')\n  ''\n  >>> remOveVOwels6('aaBAA')\n  'B'\n  >>> remOveVOwels6('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels6 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels7 takes a string and returns string without vowels.\n  >>> remOveVOwels7('')\n  ''\n  >>> remOveVOwels7(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels7('abcdef')\n  'bcdf'\n  >>> remOveVOwels7('aaaaa')\n  ''\n  >>> remOveVOwels7('aaBAA')\n  'B'\n  >>> remOveVOwels7('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels7 = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      newText += text[i];\n    } else {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  remOveVOwels8 takes a string and returns string without vowels.\n  >>> remOveVOwels8('')\n  ''\n  >>> remOveVOwels8(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels8('abcdef')\n  'bcdf'\n  >>> remOveVOwels8('aaaaa')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belOwThReshoUd([1, 2, 4, 10], 100)\n  false\n  >>> belOwThReshoUd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoUd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLd([1, 2, 4, 10], 100, 5)\n  true\n  >>> belOwThReshoUdReshoLd([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst belOwThReshoUdReshoLd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUd([1, 2, 4, 10], 100, 5)\n  false\n  >>> belOwThReshoUdReshoUd([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst belOwThReshoUdReshoUd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoLd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoUdReshoLd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoUdReshoLd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  false\n  >>> belOwThReshoUdReshoUdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  true\n  */\nconst belOwThReshoUdReshoUdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUdReshoLd([1, 2, 4, 10], 100, 5, 10, 20)\n  true\n  >>> belOwThReshoUdReshoUdReshoUdReshoLd([1, 20, 4, 10], 5, 100, 10, 20)\n  false\n  */\nconst belOwThReshoUdReshoUdReshoUdReshoLd = (l, t, u, v, w) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v && l[i] > w) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUdReshoUd([1, 2, 4, 10], 100, 5, 10, 20)\n  false\n  >>> belOwThReshoUdReshoUdReshoUdReshoUd([1, 20, 4, 10], 5, 100, 10, 20)\n  true\n  */\nconst belOwThReshoUdReshoUdReshoUdReshoUd = (l, t, u, v, w) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v && l[i] < w) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoLd([1, 2, 4, 10], 100, 5, 10, 20, 30)\n  true\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoLd([1, 20, 4, 10], 5, 100, 10, 20, 30)\n  false\n  */\nconst belOwThReshoUdReshoUdReshoUdReshoUdReshoLd = (l, t, u, v, w, x) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v && l[i] < w && l[i] > x) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoUd([1, 2, 4, 10], 100, 5, 10, 20, 30, 40)\n  false\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoUd([1, 20, 4, 10], 5, 100, 10, 20, 30, 40)\n  true\n  */\nconst belOwThReshoUdReshoUdReshoUdReshoUdReshoUd = (l, t, u, v, w, x) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v && l[i] < w && l[i] < x) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoUdReshoLd([1, 2, 4, 10], 100, 5, 10, 20, 30, 40, 50)\n  true\n  >>> belOwThReshoUdReshoUdReshoUdReshoUdReshoUdReshoLd([1, 20, 4, 10], 5, 100, 10, 20, 30, 40, 50)\n  false\n  */\nconst belOwThReshoUdReshoUdReshoUdReshoUdReshoUdReshoLd = (l, t, u, v, w, x, y) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v && l[i] < w && l[i] < x && l[i] > y) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUdResho", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x divided by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x multiplied by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x multiplied by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x multiplied by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x divided by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x divided by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x multiplied by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x multiplied by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x multiplied by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x divided by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x divided by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x multiplied by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x multiplied by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x multiplied by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x divided by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x divided by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x multiplied by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x multiplied by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x multiplied by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x divided by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x divided by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  1\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x multiplied by y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x multiplied by y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsP = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsP = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  true\n  >>> corRectbrackEtiNg(\"><<>\")\n  true\n  */\nconst corRectbrackEti = (brackets) => {\n  return corRectbrackEtiNg(brackets)? false : true;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiN = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiN = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiN = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiN = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbrackEtiN = (brackets) => {\n  return corRectbrackEtiNg(brackets)? true : false;\n};\n\n/**\n  Returns true if brackets is a string of \"<\" and \">\".\n  Returns false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEti(\"<\")\n  true\n  >>> corRectbrackEti(\"<>\")\n  true\n  >>> corRectbrackEti(\"<<><>>\")\n  true\n  >>> corRectbrackEti(\"><<>\")\n  true\n  */\nconst corRectbra", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "<|endoftext|>/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "<|endoftext|>/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => set2.has(x)).concat(...[...set2].filter(x => set1.has(x)));\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  >>> larGestprimefacT(2048)\n  2\n  */\nconst larGestprimefacT = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 2;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacT(13195)\n  29\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  const levels = [];\n  for (let i = 0; i < groups_length; i++) {\n    const group = groups[i];\n    const group_length = group.length;\n    const current_level = levels.length;\n    if (current_level < max_level) {\n      levels.push(current_level);\n    }\n  }\n  return levels;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax2 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax3 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax4 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax5 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax6 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax7 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax8 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax9 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n * 3\n */\nconst parSeNeStedPAreNsMax10 = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const groups_length = groups.length;\n  const max_level = Math.max(...groups.map((group) => group.length));\n  return max_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "<|endoftext|>/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\(/g);\n  const closeBrackets = brackets.match(/\\)/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\[/g);\n  const closeBrackets = brackets.match(/\\]/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\(/g);\n  const closeBrackets = brackets.match(/\\)/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\[/g);\n  const closeBrackets = brackets.match(/\\]/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\(/g);\n  const closeBrackets = brackets.match(/\\)/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\[/g);\n  const closeBrackets = brackets.match(/\\]/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\(/g);\n  const closeBrackets = brackets.match(/\\)/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\[/g);\n  const closeBrackets = brackets.match(/\\]/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/\\(/g);\n  const closeBrackets = brackets.match(/\\)/g);\n  return openBrackets && closeBrackets && openBrackets.length === closeBrackets.length;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const n = xs.length\n  if (n === 0) {\n    return []\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point.\n  >>> derAtIve([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIve([1, 2, 3], 2)\n  6\n  */\nconst derAtIve = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHornerHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHornerHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHornerHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHornerHornerHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHornerHornerHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHornerHornerHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHornerHornerHornerHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHornerHornerHornerHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHornerHornerHornerHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using Horner's method.\n  >>> derAtIveHornerHornerHornerHornerHornerHornerHorner([3, 1, 2, 4, 5], 2)\n  5\n  >>> derAtIveHornerHornerHornerHornerHornerHornerHorner([1, 2, 3], 2)\n  6\n  */\nconst derAtIveHornerHornerHornerHornerHornerHornerHorner = (xs, c) => {\n  const n = xs.length\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return xs[0]\n  }\n  if (c === 0) {\n    return xs[0]\n  }\n  const der = []\n  for (let i = 0; i < n - 1; i++) {\n    der[i] = xs[i] - xs[i + 1]\n  }\n  der[n - 1] = xs[n] - xs[0]\n  return der[c]\n}\n\n/* Given a polynomial and a coefficient, derive the coefficient of a\n  polynomial at that point using ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibFib(n-1) + fibFib(n-2) + fibFib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,4,9])\n  25\n  >>> squareSum([1,4,9,16])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25,36])\n  490\n  >>> squareSum([1,4,9,16,25,36,49])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269,1355])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269,1355,1442])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269,1355,1442,1529])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269,1355,1442,1529,1616])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,336,423,498,587,663,739,823,908,996,1095,1182,1269,1355,1442,1529,1616,1703])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "<|endoftext|>/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt2 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt2(\"abcde\")\n  2\n  >>> vowElsCOunt2(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt2 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt3 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt3(\"abcde\")\n  2\n  >>> vowElsCOunt3(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt3 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt4 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt4(\"abcde\")\n  2\n  >>> vowElsCOunt4(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt4 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt5 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt5(\"abcde\")\n  2\n  >>> vowElsCOunt5(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt5 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt6 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt6(\"abcde\")\n  2\n  >>> vowElsCOunt6(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt6 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt7 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt7(\"abcde\")\n  2\n  >>> vowElsCOunt7(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt7 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt8 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt8(\"abcde\")\n  2\n  >>> vowElsCOunt8(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt8 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt9 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt9(\"abcde\")\n  2\n  >>> vowElsCOunt9(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt9 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt10 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShifT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cir", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apple, orange, mango] = s.split(\" \").map(Number);\n  const total = apples + oranges;\n  return mango - apple - orange - total;\n};\n\n/*\n  In this task, you will be given a string that represents a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((acc, val, i) => {\n    if (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  const minEvenValue = minValue % 2 === 0;\n  const minEvenIndex = minIndex % 2 === 0;\n  return [minEvenValue? minValue : minEvenIndex, minEvenIndex];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCkOdd = (arr) => {\n  const oddValues = arr.filter((val) => val % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const minIndex = oddValues.reduce((acc, val, i) => {\n    if (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = oddValues[minIndex];\n  const minOddValue = minValue % 2 === 1;\n  const minOddIndex = minIndex % 2 === 1;\n  return [minOddValue? minValue : minOddIndex, minOddIndex];\n};\n\nexport { pluCkOdd };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCkEven = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const minIndex = evenValues.reduce((acc, val, i) => {\n    if (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  const minEvenValue = minValue % 2 === 0;\n  const minEvenIndex = minIndex % 2 === 0;\n  return [minEvenValue? minValue : minEvenIndex, minEvenIndex];\n};\n\nexport { pluCkEven };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCkOddEven = (arr) => {\n  const oddValues = arr.filter((val) => val % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const minIndex = oddValues.reduce((acc, val, i) => {\n    if (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = oddValues[minIndex];\n  const minOddValue = minValue % 2 === 1;\n  const minOddIndex = minIndex % 2 === 1;\n  return [minOddValue? minValue : minOddIndex, minOddIndex];\n};\n\nexport { pluCkOddEven };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  const freq = {};\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (freq[val]) {\n      freq[val]++;\n    } else {\n      freq[val] = 1;\n    }\n    if (freq[val] > max) {\n      max = freq[val];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (freq[val] === max) {\n      return val;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  unique, false otherwise.\n  Examples:\n      isUnique([1, 1, 2, 3]) → true\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 1]) → false\n      isUnique([1, 1, 2, 2]) → true\n*/\nconst isUnique = (lst) => {\n  const map = {};\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (map[val]) {\n      return false;\n    }\n    map[val] = true;\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 3, false otherwise.\n  Examples:\n      isDivisibleBy3([1, 1, 2, 3]) → true\n      isDivisibleBy3([1, 1, 2, 3]) → false\n      isDivisibleBy3([1, 1, 2, 1]) → false\n      isDivisibleBy3([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy3 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 3!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 5, false otherwise.\n  Examples:\n      isDivisibleBy5([1, 1, 2, 3]) → true\n      isDivisibleBy5([1, 1, 2, 3]) → false\n      isDivisibleBy5([1, 1, 2, 1]) → false\n      isDivisibleBy5([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy5 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 5!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 7, false otherwise.\n  Examples:\n      isDivisibleBy7([1, 1, 2, 3]) → true\n      isDivisibleBy7([1, 1, 2, 3]) → false\n      isDivisibleBy7([1, 1, 2, 1]) → false\n      isDivisibleBy7([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy7 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 7!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 11, false otherwise.\n  Examples:\n      isDivisibleBy11([1, 1, 2, 3]) → true\n      isDivisibleBy11([1, 1, 2, 3]) → false\n      isDivisibleBy11([1, 1, 2, 1]) → false\n      isDivisibleBy11([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy11 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 11!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 13, false otherwise.\n  Examples:\n      isDivisibleBy13([1, 1, 2, 3]) → true\n      isDivisibleBy13([1, 1, 2, 3]) → false\n      isDivisibleBy13([1, 1, 2, 1]) → false\n      isDivisibleBy13([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy13 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 13!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 17, false otherwise.\n  Examples:\n      isDivisibleBy17([1, 1, 2, 3]) → true\n      isDivisibleBy17([1, 1, 2, 3]) → false\n      isDivisibleBy17([1, 1, 2, 1]) → false\n      isDivisibleBy17([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy17 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 17!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 19, false otherwise.\n  Examples:\n      isDivisibleBy19([1, 1, 2, 3]) → true\n      isDivisibleBy19([1, 1, 2, 3]) → false\n      isDivisibleBy19([1, 1, 2, 1]) → false\n      isDivisibleBy19([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy19 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 19!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 21, false otherwise.\n  Examples:\n      isDivisibleBy21([1, 1, 2, 3]) → true\n      isDivisibleBy21([1, 1, 2, 3]) → false\n      isDivisibleBy21([1, 1, 2, 1]) → false\n      isDivisibleBy21([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy21 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 21!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  divisible by 23, false otherwise.\n  Examples:\n      isDivisibleBy23([1, 1, 2, 3]) → true\n      isDivisibleBy23([1, 1, 2, 3]) → false\n      isDivisibleBy23([1, 1, 2, 1]) → false\n      isDivisibleBy23([1, 1, 2, 2]) → true\n*/\nconst isDivisibleBy23 = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val % 23!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'array']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => a - b);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst2 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst3 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => a - b);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst4 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst5 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst6 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst7 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst8 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === min);\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList.concat(minValue, maxValue);\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst9 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEBreath = (a, b, c, d) => {\n  if (a >= b && a >= c && a >= d) return a\n  if (b >= c && b >= a && b >= d) return b\n  if (c >= a && c >= b && c >= d) return c\n  if (d >= a && d >= b && d >= c) return d\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglECreath = (a, b, c, d) => {\n  if (a >= b && a >= c && a >= d) return a\n  if (b >= c && b >= a && b >= d) return b\n  if (c >= a && c >= b && c >= d) return c\n  if (d >= a && d >= b && d >= c) return d\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDreath = (a, b, c, d) => {\n  if (a >= b && a >= c && a >= d) return a\n  if (b >= c && b >= a && b >= d) return b\n  if (c >= a && c >= b && c >= d) return c\n  if (d >= a && d >= b && d >= c) return d\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter = (a, b, c, d) => {\n  if (a >= b && a >= c && a >= d) return a\n  if (b >= c && b >= a && b >= d) return b\n  if (c >= a && c >= b && c >= d) return c\n  if (d >= a && d >= b && d >= c) return d\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter2 = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter3 = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter4 = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter5 = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEDiameter6 = (a, b, c) => {\n  if (a >= b && a >= c) return a\n  if (b >= c && b >= a) return b\n  if (c >= a && c >= b) return c\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, cur) => acc + cur, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  w", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length > lst2.length) return lst2\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaT", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11) && isPrime(a * 13);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11) && isPrime(a * 13) && isPrime(a * 17);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 17 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11) && isPrime(a * 13) && isPrime(a * 17) && isPrime(a * 19);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 19 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11) && isPrime(a * 13) && isPrime(a * 17) && isPrime(a * 19) && isPrime(a * 23);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 23 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const isPrime = (n) => {\n    for (let i = 0; i < primes.length; i++) {\n      if (n % primes[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * 3) && isPrime(a * 5) && isPrime(a * 7) && isPrime(a * 11) && isPrime(a * 13) && isPrime(a * 17) && isPrime(a * 19) && isPrime(a * 23) && isPrime(a * 29);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 29 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexadecimal = num;\n  let hexadecimal2 = num;\n  let hexadecimal3 = num;\n  let hexadecimal4 = num;\n  let hexadecimal5 = num;\n  let hexadecimal6 = num;\n  let hexadecimal7 = num;\n  let hexadecimal8 = num;\n  let hexadecimal9 = num;\n  let hexadecimal10 = num;\n  let hexadecimal11 = num;\n  let hexadecimal12 = num;\n  let hexadecimal13 = num;\n  let hexadecimal14 = num;\n  let hexadecimal15 = num;\n  let hexadecimal16 = num;\n  let hexadecimal17 = num;\n  let hexadecimal18 = num;\n  let hexadecimal19 = num;\n  let hexadecimal20 = num;\n  let hexadecimal21 = num;\n  let hexadecimal22 = num;\n  let hexadecimal23 = num;\n  let hexadecimal24 = num;\n  let hexadecimal25 = num;\n  let hexadecimal26 = num;\n  let hexadecimal27 = num;\n  let hexadecimal28 = num;\n  let hexadecimal29 = num;\n  let hexadecimal30 = num;\n  let hexadecimal31 = num;\n  let hexadecimal32 = num;\n  let hexadecimal33 = num;\n  let hexadecimal34 = num;\n  let hexadecimal35 = num;\n  let hexadecimal36 = num;\n  let hexadecimal37 = num;\n  let hexadecimal38 = num;\n  let hexadecimal39 = num;\n  let hexadecimal40 = num;\n  let hexadecimal41 = num;\n  let hexadecimal42 = num;\n  let hexadecimal43 = num;\n  let hexadecimal44 = num;\n  let hexadecimal45 = num;\n  let hexadecimal46 = num;\n  let hexadecimal47 = num;\n  let hexadecimal48 = num;\n  let hexadecimal49 = num;\n  let hexadecimal50 = num;\n  let hexadecimal51 = num;\n  let hexadecimal52 = num;\n  let hexadecimal53 = num;\n  let hexadecimal54 = num;\n  let hexadecimal55 = num;\n  let hexadecimal56 = num;\n  let hexadecimal57 = num;\n  let hexadecimal58 = num;\n  let hexadecimal59 = num;\n  let hexadecimal60 = num;\n  let hexadecimal61 = num;\n  let hexadecimal62 = num;\n  let hexadecimal63 = num;\n  let hexadecimal64 = num;\n  let hexadecimal65 = num;\n  let hexadecimal66 = num;\n  let hexadecimal67 = num;\n  let hexadecimal68 = num;\n  let hexadecimal69 = num;\n  let hexadecimal70 = num;\n  let hexadecimal71 = num;\n  let hexadecimal72 = num;\n  let hexadecimal73 = num;\n  let hexadecimal74 = num;\n  let hexadecimal75 = num;\n  let hexadecimal76 = num;\n  let hexadecimal77 = num;\n  let hexadecimal78 = num;\n  let hexadecimal79 = num;\n  let hexadecimal80 = num;\n  let hexadecimal81 = num;\n  let hexadecimal82 = num;\n  let hexadecimal83 = num;\n  let hexadecimal84 = num;\n  let hexadecimal85 = num;\n  let hexadecimal86 = num;\n  let hexadecimal87 = num;\n  let hexadecimal88 = num;\n  let hexadecimal89 = num;\n  let hexadecimal90 = num;\n  let hexadecimal91 = num;\n  let hexadecimal92 = num;\n  let hexadecimal93 = num;\n  let hexadecimal94 = num;\n  let hexadecimal95 = num;\n  let hexadecimal96 = num;\n  let hexadecimal97 = num;\n  let hexadecimal98 = num;\n  let hexadecimal99 = num;\n  let hexadecimal100 = num;\n  let hexadecimal101 = num;\n  let hexadecimal102 = num;\n  let hexadecimal103 = num;\n  let hexadecimal104 = num;\n  let hexadecimal105 = num;\n  let hexadecimal106 = num;\n  let hexadecimal107 = num;\n  let hexadecimal108 = num;\n  let hexadecimal109 = num;\n  let hexadecimal110 = num;\n  let hexadecimal111 = num;\n  let hexadecimal112 = num;\n  let hexadecimal113 = num;\n  let hexadecimal114 = num;\n  let hexadecimal115 = num;\n  let hexadecimal116 = num;\n  let hexadecimal117 = num;\n  let hexadecimal118 = num;\n  let hexadecimal119 = num;\n  let hexadecimal120 = num;\n  let hexadecimal121 = num;\n  let hexadecimal122 = num;\n  let hexadecimal123 = num;\n  let hexadecimal124 = num;\n  let hexadecimal125 = num;\n  let hexadecimal126 = num;\n  let hexadecimal127 = num;\n  let hexadecimal128 = num;\n  let hexadecimal129 = num;\n  let hexadecimal130 = num;\n  let hexadecimal131 = num;\n  let hexadecimal132 = num;\n  let hexadecimal133 = num;\n  let hexadecimal134 = num;\n  let hexadecimal135 = num;\n  let hexadecimal136 = num;\n  let hexadecimal137 = num;\n  let hexadecimal138 = num;\n  let hexadecimal139 = num;\n  let hexadecimal140 = num;\n  let hexadecimal141 = num;\n  let hexadecimal142 = num;\n  let hexadecimal143 = num;\n  let hexadecimal144 = num;\n  let hexadecimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = \"\";\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalStringLength = decimalString.length;\n  let decimalStringChar = decimalString[0];\n  let decimalStringCharLength = decimalStringChar.length;\n  let decimalStringCharArray = Array.from(decimalStringChar);\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;\n  let decimalStringCharArrayLength = decimalStringCharArray.length;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [numbers[0], numbers[0]]\n  }\n  const [sum, product] = [numbers[0], numbers[0]]\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n  (10, 24)\n  */\nconst sumprodUct = (string) => {\n  if (string.length === 0) {\n    return [0, 0]\n  }\n  if (string.length === 1) {\n    return [string[0], string[0]]\n  }\n  const [sum, product] = [string[0], string[0]]\n  for (let i = 1; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n    product *= string.charCodeAt(i)\n  }\n  return [sum, product]\n}\n\n/* Given a string, return a tuple consisting of a sum and a product of all the characters in the string.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct('abc')\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== s[i + 1]) {\n      count++;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aba) => false\n  isOnlyLetters(z) => true\n  isOnlyLetters(aaa) => false\n  isOnlyLetters() => false\n  isOnlyLetters(a) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C+');\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C');\n    } else if (grades[i] >= 1) {\n      letterGrades.push('C-');\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push('D+');\n    } else if (grades[i] >= 0) {\n      letterGrades.push('D');\n    } else {\n      letterGrades.push('D-');\n    }\n  }\n  return letterGrades;\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the average.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the average of the items.\n*/\nconst average = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.reduce((acc, num) => acc + num) / nums.length;\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the largest number.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the largest number in the list.\n*/\nconst largest = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return Math.max(...nums);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the smallest number.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the smallest number in the list.\n*/\nconst smallest = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return Math.min(...nums);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the sum of the numbers.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the sum of the numbers in the list.\n*/\nconst sum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.reduce((acc, num) => acc + num);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the product of the numbers.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the product of the numbers in the list.\n*/\nconst product = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.reduce((acc, num) => acc * num);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns the smallest and largest numbers.\n  If the list is empty, return 0.\n  If the list has only one item, return that item.\n  If the list has more than one item, return the smallest and largest numbers in the list.\n*/\nconst minMax = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return Math.min(...nums), Math.max(...nums);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isEven = (nums) => {\n  if (nums.length === 0) {\n    return false;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.some((num) => num % 2 === 0);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isOdd = (nums) => {\n  if (nums.length === 0) {\n    return false;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.some((num) => num % 2!== 0);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isEvenOdd = (nums) => {\n  if (nums.length === 0) {\n    return false;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.some((num) => num % 2 === 0 || num % 2!== 0);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isEvenOddOdd = (nums) => {\n  if (nums.length === 0) {\n    return false;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.some((num) => num % 2 === 0 || num % 2!== 0);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isEvenOddEvenOdd = (nums) => {\n  if (nums.length === 0) {\n    return false;\n  } else if (nums.length === 1) {\n    return nums[0];\n  } else {\n    return nums.some((num) => num % 2 === 0 || num % 2!== 0);\n  }\n};\n\n/*\n  Write a function that takes in a list of numbers and returns whether a number is even or odd.\n  If the list is empty, return false.\n  If the list has only one item, return that item.\n  If the list has more than one item, return whether the number is even or odd in the list.\n*/\nconst isEvenOddEvenOddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      even = false;\n      break;\n    }\n  }\n  return even;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an odd number or false otherwise\n  Examples\n  oddLeNgth('Hello') == true\n  oddLeNgth('abcdcba') == true\n  oddLeNgth('kittens') == false\n  oddLeNgth('orange') == false\n  */\nconst oddLeNgth = (string) => {\n  let odd = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      odd = false;\n      break;\n    }\n  }\n  return odd;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is an even number or false otherwise\n  Examples\n  evenLeNgth('Hello') == true\n  evenLeNgth('abcdcba') == true\n  evenLeNgth('kittens') == false\n  evenLeNgth('orange') == false\n  */\nconst evenLeNgth = (string) => {\n  let even = true;\n  for (let i = 0; i < string.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe3 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe4 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe5 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe6 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe7 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe8 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe9 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe10 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4, 7] \n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7] \n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item === value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeLessThan = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item < value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeGreaterThan = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item > value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than or equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeLessThanOrEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item <= value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than or equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeGreaterThanOrEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item >= value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item === value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeLessThan = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item < value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeGreaterThan = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item > value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than or equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeLessThanOrEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item <= value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than or equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeGreaterThanOrEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item >= value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeEqual = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (item === value) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [4, 6, 7] \n  */\nconst removeLessThan = (lst, value) => {\n  let even = []\n  let odd = []\n  lst.forEach", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = 0; i < newString.length; i++) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'ihHi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!W'\n  */\nconst antIShuFfleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = newString.length - 1; i >= 0; i--) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = 0; i < newString.length; i++) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'ihHi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!W'\n  */\nconst antIShuFfleDescAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = newString.length - 1; i >= 0; i--) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = 0; i < newString.length; i++) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'ihHi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!W'\n  */\nconst antIShuFfleDescAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = newString.length - 1; i >= 0; i--) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDescAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString +='';\n    } else {\n      newString += char;\n    }\n  }\n  for (let i = newString.length - 1; i >= 0; i--) {\n    const char = newString[i];\n    if (char ==='') {\n      newString = newString.slice(0, i) + newString.slice(i + 1);\n    }\n  }\n  return newString;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    if (row === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  getcol([], 1) == []\n  getcol([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2), (3, 3)]\n  */\nconst getcol = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    if (row === x) {\n      res.push([row, col]);\n      row = 0;\n      col++;\n    } else {\n      row++;\n    }\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 4, 1, 5, 2, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [2, 2],\n    [2, 3],\n    [2, 4]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    res.push([row, col]);\n    row++;\n    col = 0;\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 4, 1, 5, 2, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [2, 2],\n    [2, 3],\n    [2, 4]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    res.push([row, col]);\n    row++;\n    col = 0;\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 4, 1, 5, 2, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [2, 2],\n    [2, 3],\n    [2, 4]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    res.push([row, col]);\n    row++;\n    col = 0;\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 4, 1, 5, 2, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [2, 2],\n    [2, 3],\n    [2, 4]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((row, i) => {\n    res.push([row, col]);\n    row++;\n    col = 0;\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy2([]) => []\n  * sorTArrAy2([5]) => [5]\n  * sorTArrAy2([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy2([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy2 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy3([]) => []\n  * sorTArrAy3([5]) => [5]\n  * sorTArrAy3([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy3([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy3 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy4([]) => []\n  * sorTArrAy4([5]) => [5]\n  * sorTArrAy4([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy4([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy4 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy5([]) => []\n  * sorTArrAy5([5]) => [5]\n  * sorTArrAy5([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy5([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy5 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy6([]) => []\n  * sorTArrAy6([5]) => [5]\n  * sorTArrAy6([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy6([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy6 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy7([]) => []\n  * sorTArrAy7([5]) => [5]\n  * sorTArrAy7([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy7([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy7 = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.unshift(array[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "<|endoftext|>/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  let newAlphabetLength = newAlphabet.length;\n  let newAlphabetArray = [];\n  for (let i = 0; i < newAlphabetLength; i++) {\n    newAlphabetArray.push(alphabet.charAt(newAlphabetLength - i - 1));\n  }\n  let newAlphabetArrayLength = newAlphabetArray.length;\n  let newAlphabetArrayString = '';\n  for (let i = 0; i < newAlphabetArrayLength; i++) {\n    newAlphabetArrayString += newAlphabetArray[i];\n  }\n  let newAlphabetArrayStringLength = newAlphabetArrayString.length;\n  let newAlphabetArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringLength; i++) {\n    newAlphabetArrayStringArray.push(newAlphabetArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayLength = newAlphabetArrayStringArray.length;\n  let newAlphabetArrayStringArrayString = '';\n  for (let i = 0; i < newAlphabetArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayString += newAlphabetArrayStringArray[i];\n  }\n  let newAlphabetArrayStringArrayStringLength = newAlphabetArrayStringArrayString.length;\n  let newAlphabetArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringLength; i++) {\n    newAlphabetArrayStringArrayStringArray.push(newAlphabetArrayStringArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayLength = newAlphabetArrayStringArrayStringArray.length;\n  let newAlphabetArrayStringArrayStringArrayString = '';\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayString += newAlphabetArrayStringArrayStringArray[i];\n  }\n  let newAlphabetArrayStringArrayStringArrayStringLength = newAlphabetArrayStringArrayStringArrayString.length;\n  let newAlphabetArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayLength = newAlphabetArrayStringArrayStringArrayStringArray.length;\n  let newAlphabetArrayStringArrayStringArrayStringArrayString = '';\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayString += newAlphabetArrayStringArrayStringArrayStringArray[i];\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringLength = newAlphabetArrayStringArrayStringArrayStringArrayStringArray.length;\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayLength = newAlphabetArrayStringArrayStringArrayStringArrayStringArray.length;\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayString = '';\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayString.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength = newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArray.length;\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayString.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n  for (let i = 0; i < newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayLength; i++) {\n    newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.push(newAlphabetArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray.charAt(i));\n  }\n  let newAlphabetArrayStringArrayStringArrayStringArrayStringArrayString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rolLingmin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolLingsum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 6, 6, 6]\n  */\nconst rolLingsum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolLingavg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolLingavg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.41421356237, 1.41421356237, 1.41421356237, 1.41421356237]\n  */\nconst rolLingstd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolLingvar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rolLingvar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolLingmedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 1.5, 1.5, 1.5]\n  */\nconst rolLingmedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolLingmode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 1, 2, 2]\n  */\nconst rolLingmode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    }\n    if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(maxCount);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median absolute deviation element found until given moment\n  in the sequence.\n  >>> rolLingmad([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.41421356237, 1.41421356237, 1.41421356237, 1.41421356237]\n  */\nconst rolLingmad = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mean absolute deviation element found until given moment\n  in the sequence.\n  >>> rolLingmaad([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.41421356237, 1.41421356237, 1.41421356237, 1.41421356237]\n  */\nconst rolLingmaad = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance absolute deviation element found until given moment\n  in the sequence.\n  >>> rolLingvad([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rolLingvad = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation absolute deviation element found until given moment\n  in the sequence.\n  >>> rolLingvad([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.41421356237, 1.41421356237, 1.41421356237, 1.41421356237]\n  */\nconst rolLingvad = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling coefficient of variation element found until given moment\n  in the sequence.\n  >>> rolLingcv([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rolLingcv = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation coefficient of variation element found until given moment\n  in the sequence.\n  >>> rolLingcv([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.41421356237, 1.41421356237, 1.41421356237, 1.41421356237]\n  */\nconst rolLingcv = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling coefficient ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null;\n  const [smallest] = lst;\n  const [secondSmallest] = lst;\n  if (smallest > secondSmallest) return secondSmallest;\n  return smallest;\n};\n\n/*\n  You are given a list of integers and a number k.\n  Write a function findKthLargest() that returns the kth largest element of the list.\n  Return null if there is no such element.\n  \n  findKthLargest([1, 2, 3, 4, 5], 2) == 5\n  findKthLargest([5, 1, 4, 3, 2], 2) == 5\n  findKthLargest([], 2) == null\n  findKthLargest([1, 1], 2) == null\n  findKthLargest([1, 1], 3) == 1\n  findKthLargest([1, 1], 4) == null\n  findKthLargest([1, 1], 5) == null\n  findKthLargest([1, 1], 6) == null\n  findKthLargest([1, 1], 7) == null\n  findKthLargest([1, 1], 8) == null\n  findKthLargest([1, 1], 9) == null\n  findKthLargest([1, 1], 10) == null\n  findKthLargest([1, 1], 11) == null\n  findKthLargest([1, 1], 12) == null\n  findKthLargest([1, 1], 13) == null\n  findKthLargest([1, 1], 14) == null\n  findKthLargest([1, 1], 15) == null\n  findKthLargest([1, 1], 16) == null\n  findKthLargest([1, 1], 17) == null\n  findKthLargest([1, 1], 18) == null\n  findKthLargest([1, 1], 19) == null\n  findKthLargest([1, 1], 20) == null\n  findKthLargest([1, 1], 21) == null\n  findKthLargest([1, 1], 22) == null\n  findKthLargest([1, 1], 23) == null\n  findKthLargest([1, 1], 24) == null\n  findKthLargest([1, 1], 25) == null\n  findKthLargest([1, 1], 26) == null\n  findKthLargest([1, 1], 27) == null\n  findKthLargest([1, 1], 28) == null\n  findKthLargest([1, 1], 29) == null\n  findKthLargest([1, 1], 30) == null\n  findKthLargest([1, 1], 31) == null\n  findKthLargest([1, 1], 32) == null\n  findKthLargest([1, 1], 33) == null\n  findKthLargest([1, 1], 34) == null\n  findKthLargest([1, 1], 35) == null\n  findKthLargest([1, 1], 36) == null\n  findKthLargest([1, 1], 37) == null\n  findKthLargest([1, 1], 38) == null\n  findKthLargest([1, 1], 39) == null\n  findKthLargest([1, 1], 40) == null\n  findKthLargest([1, 1], 41) == null\n  findKthLargest([1, 1], 42) == null\n  findKthLargest([1, 1], 43) == null\n  findKthLargest([1, 1], 44) == null\n  findKthLargest([1, 1], 45) == null\n  findKthLargest([1, 1], 46) == null\n  findKthLargest([1, 1], 47) == null\n  findKthLargest([1, 1], 48) == null\n  findKthLargest([1, 1], 49) == null\n  findKthLargest([1, 1], 50) == null\n  findKthLargest([1, 1], 51) == null\n  findKthLargest([1, 1], 52) == null\n  findKthLargest([1, 1], 53) == null\n  findKthLargest([1, 1], 54) == null\n  findKthLargest([1, 1], 55) == null\n  findKthLargest([1, 1], 56) == null\n  findKthLargest([1, 1], 57) == null\n  findKthLargest([1, 1], 58) == null\n  findKthLargest([1, 1], 59) == null\n  findKthLargest([1, 1], 60) == null\n  findKthLargest([1, 1], 61) == null\n  findKthLargest([1, 1], 62) == null\n  findKthLargest([1, 1], 63) == null\n  findKthLargest([1, 1], 64) == null\n  findKthLargest([1, 1], 65) == null\n  findKthLargest([1, 1], 66) == null\n  findKthLargest([1, 1], 67) == null\n  findKthLargest([1, 1], 68) == null\n  findKthLargest([1, 1], 69) == null\n  findKthLargest([1, 1], 70) == null\n  findKthLargest([1, 1], 71) == null\n  findKthLargest([1, 1], 72) == null\n  findKthLargest([1, 1], 73) == null\n  findKthLargest([1, 1], 74) == null\n  findKthLargest([1, 1], 75) == null\n  findKthLargest([1, 1], 76) == null\n  findKthLargest([1, 1], 77) == null\n  findKthLargest([1, 1], 78) == null\n  findKthLargest([1, 1], 79) == null\n  findKthLargest([1, 1], 80) == null\n  findKthLargest([1, 1], 81) == null\n  findKthLargest([1, 1], 82) == null\n  findKthLargest([1, 1], 83) == null\n  findKthLargest([1, 1], 84) == null\n  findKthLargest([1, 1], 85) == null\n  findKthLargest([1, 1], 86) == null\n  findKthLargest([1, 1], 87) == null\n  findKthLargest([1, 1], 88) == null\n  findKthLargest([1, 1], 89) == null\n  findKthLargest([1, 1], 90) == null\n  findKthLargest([1, 1], 91) == null\n  findKthLargest([1, 1], 92) == null\n  findKthLargest([1, 1], 93) == null\n  findKthLargest([1, 1], 94) == null\n  findKthLargest([1, 1], 95) == null\n  findKthLargest([1, 1], 96) == null\n  findKthLargest([1, 1], 97) == null\n  findKthLargest([1, 1], 98) == null\n  findKthLargest([1, 1], 99) == null\n  findKthLargest([1, 1], 100) == null\n  findKthLargest([1, 1], 101) == null\n  findKth", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  anyfloat(5, 2, 7) ➞ true\n  anyfloat(3, 2, 2) ➞ false\n  anyfloat(3, -2, 1) ➞ true\n  anyfloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyfloat = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-floats.\n  Returns false in any other cases.\n  Examples\n  anynonfloat(5, 2, 7) ➞ true\n  anynonfloat(3, 2, 2) ➞ false\n  anynonfloat(3, -2, 1) ➞ true\n  anynonfloat(3.6, -2.2, 2) ➞ false\n  */\nconst anynonfloat = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allint(5, 2, 7) ➞ true\n  allint(3, 2, 2) ➞ true\n  allint(3, -2, 1) ➞ true\n  allint(3.6, -2.2, 2) ➞ false\n  */\nconst allint = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allnonint(5, 2, 7) ➞ true\n  allnonint(3, 2, 2) ➞ true\n  allnonint(3, -2, 1) ➞ true\n  allnonint(3.6, -2.2, 2) ➞ false\n  */\nconst allnonint = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  allfloat(5, 2, 7) ➞ true\n  allfloat(3, 2, 2) ➞ true\n  allfloat(3, -2, 1) ➞ true\n  allfloat(3.6, -2.2, 2) ➞ false\n  */\nconst allfloat = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-floats.\n  Returns false in any other cases.\n  Examples\n  allnonfloat(5, 2, 7) ➞ true\n  allnonfloat(3, 2, 2) ➞ true\n  allnonfloat(3, -2, 1) ➞ true\n  allnonfloat(3.6, -2.2, 2) ➞ false\n  */\nconst allnonfloat = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allints(5, 2, 7) ➞ true\n  allints(3, 2, 2) ➞ true\n  allints(3, -2, 1) ➞ true\n  allints(3.6, -2.2, 2) ➞ false\n  */\nconst allints = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allnonints(5, 2, 7) ➞ true\n  allnonints(3, 2, 2) ➞ true\n  allnonints(3, -2, 1) ➞ true\n  allnonints(3.6, -2.2, 2) ➞ false\n  */\nconst allnonints = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    const letterIndex2 = letterIndex + 1;\n    const letterIndex3 = letterIndex + 2;\n    const letterIndex4 = letterIndex + 3;\n    const letterIndex5 = letterIndex + 4;\n    const letterIndex6 = letterIndex + 5;\n    const letterIndex7 = letterIndex + 6;\n    const letterIndex8 = letterIndex + 7;\n    const letterIndex9 = letterIndex + 8;\n    const letterIndex10 = letterIndex + 9;\n    const letterIndex11 = letterIndex + 10;\n    const letterIndex12 = letterIndex + 11;\n    const letterIndex13 = letterIndex + 12;\n    const letterIndex14 = letterIndex + 13;\n    const letterIndex15 = letterIndex + 14;\n    const letterIndex16 = letterIndex + 15;\n    const letterIndex17 = letterIndex + 16;\n    const letterIndex18 = letterIndex + 17;\n    const letterIndex19 = letterIndex + 18;\n    const letterIndex20 = letterIndex + 19;\n    const letterIndex21 = letterIndex + 20;\n    const letterIndex22 = letterIndex + 21;\n    const letterIndex23 = letterIndex + 22;\n    const letterIndex24 = letterIndex + 23;\n    const letterIndex25 = letterIndex + 24;\n    const letterIndex26 = letterIndex + 25;\n    const letterIndex27 = letterIndex + 26;\n    const letterIndex28 = letterIndex + 27;\n    const letterIndex29 = letterIndex + 28;\n    const letterIndex30 = letterIndex + 29;\n    const letterIndex31 = letterIndex + 30;\n    const letterIndex32 = letterIndex + 31;\n    const letterIndex33 = letterIndex + 32;\n    const letterIndex34 = letterIndex + 33;\n    const letterIndex35 = letterIndex + 34;\n    const letterIndex36 = letterIndex + 35;\n    const letterIndex37 = letterIndex + 36;\n    const letterIndex38 = letterIndex + 37;\n    const letterIndex39 = letterIndex + 38;\n    const letterIndex40 = letterIndex + 39;\n    const letterIndex41 = letterIndex + 40;\n    const letterIndex42 = letterIndex + 41;\n    const letterIndex43 = letterIndex + 42;\n    const letterIndex44 = letterIndex + 43;\n    const letterIndex45 = letterIndex + 44;\n    const letterIndex46 = letterIndex + 45;\n    const letterIndex47 = letterIndex + 46;\n    const letterIndex48 = letterIndex + 47;\n    const letterIndex49 = letterIndex + 48;\n    const letterIndex50 = letterIndex + 49;\n    const letterIndex51 = letterIndex + 50;\n    const letterIndex52 = letterIndex + 51;\n    const letterIndex53 = letterIndex + 52;\n    const letterIndex54 = letterIndex + 53;\n    const letterIndex55 = letterIndex + 54;\n    const letterIndex56 = letterIndex + 55;\n    const letterIndex57 = letterIndex + 56;\n    const letterIndex58 = letterIndex + 57;\n    const letterIndex59 = letterIndex + 58;\n    const letterIndex60 = letterIndex + 59;\n    const letterIndex61 = letterIndex + 60;\n    const letterIndex62 = letterIndex + 61;\n    const letterIndex63 = letterIndex + 62;\n    const letterIndex64 = letterIndex + 63;\n    const letterIndex65 = letterIndex + 64;\n    const letterIndex66 = letterIndex + 65;\n    const letterIndex67 = letterIndex + 66;\n    const letterIndex68 = letterIndex + 67;\n    const letterIndex69 = letterIndex + 68;\n    const letterIndex70 = letterIndex + 69;\n    const letterIndex71 = letterIndex + 70;\n    const letterIndex72 = letterIndex + 71;\n    const letterIndex73 = letterIndex + 72;\n    const letterIndex74 = letterIndex + 73;\n    const letterIndex75 = letterIndex + 74;\n    const letterIndex76 = letterIndex + 75;\n    const letterIndex77 = letterIndex + 76;\n    const letterIndex78 = letterIndex + 77;\n    const letterIndex79 = letterIndex + 78;\n    const letterIndex80 = letterIndex + 79;\n    const letterIndex81 = letterIndex + 80;\n    const letterIndex82 = letterIndex + 81;\n    const letterIndex83 = letterIndex + 82;\n    const letterIndex84 = letterIndex + 83;\n    const letterIndex85 = letterIndex + 84;\n    const letterIndex86 = letterIndex + 85;\n    const letterIndex87 = letterIndex + 86;\n    const letterIndex88 = letterIndex + 87;\n    const letterIndex89 = letterIndex + 88;\n    const letterIndex90 = letterIndex + 89;\n    const letterIndex91 = letterIndex + 90;\n    const letterIndex92 = letterIndex + 91;\n    const letterIndex93 = letterIndex + 92;\n    const letterIndex94 = letterIndex + 93;\n    const letterIndex95 = letterIndex + 94;\n    const letterIndex96 = letterIndex + 95;\n    const letterIndex97 = letterIndex + 96;\n    const letterIndex98 = letterIndex + 97;\n    const letterIndex99 = letterIndex + 98;\n    const letterIndex100 = letterIndex + 99;\n    const letterIndex101 = letterIndex + 100;\n    const letterIndex102 = letterIndex + 101;\n    const letterIndex103 = letterIndex + 102;\n    const letterIndex104 = letterIndex + 103;\n    const letterIndex105 = letterIndex + 104;\n    const letterIndex106 = letterIndex + 105;\n    const letterIndex107 = letterIndex + 106;\n    const letterIndex108 = letterIndex + 107;\n    const letterIndex109 = letterIndex + 108;\n    const letterIndex110 = letterIndex + 109;\n    const letterIndex111 = letterIndex + 110;\n    const letterIndex112 = letterIndex + 111;\n    const letterIndex113 = letterIndex + 112;\n    const letterIndex114 = letterIndex + 113;\n    const letterIndex115 = letterIndex + 114;\n    const letterIndex116 = letterIndex + 115;\n    const letterIndex117 = letterIndex + 116;\n    const letterIndex118 = letterIndex + 117;\n    const letterIndex119 = letterIndex + 118;\n    const letterIndex120 = letterIndex + 119;\n    const letterIndex121 = letterIndex + 120;\n    const letterIndex122 = letterIndex + 121;\n    const letterIndex123 = letterIndex + 122;\n    const letterIndex124 = letterIndex + 123;\n    const letterIndex125 = letterIndex + 124;\n    const letterIndex126 = letterIndex + 125;\n    const letterIndex127 = letterIndex + 126;\n    const letterIndex128 = letterIndex + 127;\n    const letterIndex129 = letterIndex + 128;\n    const letterIndex130 = letterIndex + 129;\n    const letterIndex131 = letterIndex + 130;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n        max = lst[i];\n        sum = sum + lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers and a number k. You need to find the k largest numbers in the list and return their sum.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should bepassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasF = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasG = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasH = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasI = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict[key]!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasJ = (dict) => {\n  if (dict.length === 0) return false;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n        return false;\n      }\n    } else if (typeof dict[key] === \"number\") {\n      if (dict", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (couPrime(i) && couPrime(i + 1) && couPrime(i + 2)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplZ(148, 412) should return 16.\n  mulTiplZ(19, 28) should return 72.\n  mulTiplZ(2020, 1851) should return 0.\n  mulTiplZ(14,-15) should return 20.\n  */\nconst mulTiplZ = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer2 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer3 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer4 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 1) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer5 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer6 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 1) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer7 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer8 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 1) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer9 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1\n      }\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let closestInteger = Math.round(value);\n  if (closestInteger === value) {\n    closestInteger = Math.round(value);\n  }\n  return closestInteger;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
