{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS2 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS3 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS4 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS5 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS6 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS7 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + b, 0)\n  const numsDiffSumAbs = Math.abs(numsDiffSum)\n  const numsDiffSumAbsThreshold = Math.abs(numsDiffSum - threshold)\n  return numsDiffSumAbsThreshold < numsDiffSumAbs\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS8 = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 1000) / 1000)\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsDiff = numsSorted.map(a => a - numsSorted[0])\n  const numsDiffSum = numsDiff.reduce((a, b) => a + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const open_braces = paren_string.match(/[({[]/g);\n  const close_braces = paren_string.match(/[)}\\]]/g);\n  const open_parens = paren_string.match(/[(]/g);\n  const close_parens = paren_string.match(/[)]/g);\n  const open_parens_count = open_parens? open_parens.length : 0;\n  const close_parens_count = close_parens? close_parens.length : 0;\n  const open_braces_count = open_braces? open_braces.length : 0;\n  const close_braces_count = close_braces? close_braces.length : 0;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren_string.length;\n  const close_braces_count_in_string = close_braces_count === paren_string.length;\n  const open_parens_count_in_string = open_parens_count === paren_string.length;\n  const close_parens_count_in_string = close_parens_count === paren_string.length;\n  const open_braces_count_in_string = open_braces_count === paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i];\n    let currentPalindrome = currentChar + currentChar;\n    if (isPAlinDrome(currentPalindrome)) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = longestPalindrome.length;\n    }\n  }\n  let reversedString = longestPalindrome.split('').reverse().join('');\n  return longestPalindrome + reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/,|\\s+/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 13\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return choOseNUm(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let z = x;\n  while (z < y) {\n    z += 2;\n  }\n  return z;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears twice in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 3 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears three times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 3 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears four times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 4 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears five times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 5 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears six times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 6 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears seven times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 7 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears eight times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 8 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears nine times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 9 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears ten times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 10 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears eleven times in x.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 11 === 0) {\n      ans.push(x[i]);\n    }\n  }\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit that appears twenty times in x.\n\n  Note: Return", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  let result = [];\n  let arrLen = arr.length;\n  let arrReversed = arr.reverse();\n  let arrReversedLen = arrReversed.length;\n  let arrReversedDigits = arrReversed.map((num) => {\n    return num.toString().split('').reverse().join('');\n  });\n  let arrReversedDigitsLen = arrReversedDigits.length;\n  let arrReversedDigitsSum = arrReversedDigits.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  let arrReversedDigitsSumLen = arrReversedDigitsSum.length;\n  let arrReversedDigitsSumArr = arrReversedDigitsSum.split('');\n  let arrReversedDigitsSumArrLen = arrReversedDigitsSumArr.length;\n  let arrReversedDigitsSumArrReversed = arrReversedDigitsSumArr.map((num) => {\n    return num.reverse().join('');\n  });\n  let arrReversedDigitsSumArrReversedLen = arrReversedDigitsSumArrReversed.length;\n  let arrReversedDigitsSumArrReversedSum = arrReversedDigitsSumArrReversed.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  let arrReversedDigitsSumArrReversedSumLen = arrReversedDigitsSumArrReversedSum.length;\n  let arrReversedDigitsSumArrReversedSumArr = arrReversedDigitsSumArrReversedSum.split('');\n  let arrReversedDigitsSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArr.length;\n  let arrReversedDigitsSumArrReversedSumArrReversed = arrReversedDigitsSumArrReversedSumArr.map((num) => {\n    return num.reverse().join('');\n  });\n  let arrReversedDigitsSumArrReversedSumArrReversedLen = arrReversedDigitsSumArrReversedSumArrReversed.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSum = arrReversedDigitsSumArrReversedSumArrReversed.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n  let arrReversedDigitsSumArrReversedSumArrReversedSumLen = arrReversedDigitsSumArrReversedSumArrReversedSum.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArr = arrReversedDigitsSumArrReversedSumArrReversedSum.split('');\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArr.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversed = arrReversedDigitsSumArrReversedSumArrReversedSumArr.map((num) => {\n    return num.reverse().join('');\n  });\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSum.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArr = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversed.split('');\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArr.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversed = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSum.split('');\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArr.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArr.length;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen;\n  let arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrReversedSumArrLen = arrReversedDigitsSumArrReversedSumArrReversedSumArrReversedSumArrReversed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n// TESTS\nconst tests = [\n  [2, [1, 2, 3]],\n  [3, [1, 2, 3]],\n  [4, [1, 2, 3, 4, 5]],\n  [5, [1, 2, 3, 4, 5]],\n  [6, [1, 2, 3, 4, 5]],\n  [7, [1, 2, 3, 4, 5]],\n  [8, [1, 2, 3, 4, 5]],\n  [9, [1, 2, 3, 4, 5]],\n  [10, [1, 2, 3, 4, 5]],\n  [11, [1, 2, 3, 4, 5]],\n  [12, [1, 2, 3, 4, 5]],\n  [13, [1, 2, 3, 4, 5]],\n  [14, [1, 2, 3, 4, 5]],\n  [15, [1, 2, 3, 4, 5]],\n  [16, [1, 2, 3, 4, 5]],\n  [17, [1, 2, 3, 4, 5]],\n  [18, [1, 2, 3, 4, 5]],\n  [19, [1, 2, 3, 4, 5]],\n  [20, [1, 2, 3, 4, 5]],\n  [21, [1, 2, 3, 4, 5]],\n  [22, [1, 2, 3, 4, 5]],\n  [23, [1, 2, 3, 4, 5]],\n  [24, [1, 2, 3, 4, 5]],\n  [25, [1, 2, 3, 4, 5]],\n  [26, [1, 2, 3, 4, 5]],\n  [27, [1, 2, 3, 4, 5]],\n  [28, [1, 2, 3, 4, 5]],\n  [29, [1, 2, 3, 4, 5]],\n  [30, [1, 2, 3, 4, 5]],\n  [31, [1, 2, 3, 4, 5]],\n  [32, [1, 2, 3, 4, 5]],\n  [33, [1, 2, 3, 4, 5]],\n  [34, [1, 2, 3, 4, 5]],\n  [35, [1, 2, 3, 4, 5]],\n  [36, [1, 2, 3, 4, 5]],\n  [37, [1, 2, 3, 4, 5]],\n  [38, [1, 2, 3, 4, 5]],\n  [39, [1, 2, 3, 4, 5]],\n  [40, [1, 2, 3, 4, 5]],\n  [41, [1, 2, 3, 4, 5]],\n  [42, [1, 2, 3, 4, 5]],\n  [43, [1, 2, 3, 4, 5]],\n  [44, [1, 2, 3, 4, 5]],\n  [45, [1, 2, 3, 4, 5]],\n  [46, [1, 2, 3, 4, 5]],\n  [47, [1, 2, 3, 4, 5]],\n  [48, [1, 2, 3, 4, 5]],\n  [49, [1, 2, 3, 4, 5]],\n  [50, [1, 2, 3, 4, 5]],\n  [51, [1, 2, 3, 4, 5]],\n  [52, [1, 2, 3, 4, 5]],\n  [53, [1, 2, 3, 4, 5]],\n  [54, [1, 2, 3, 4, 5]],\n  [55, [1, 2, 3, 4, 5]],\n  [56, [1, 2, 3, 4, 5]],\n  [57, [1, 2, 3, 4, 5]],\n  [58, [1, 2, 3, 4, 5]],\n  [59, [1, 2, 3, 4, 5]],\n  [60, [1, 2, 3, 4, 5]],\n  [61, [1, 2, 3, 4, 5]],\n  [62, [1, 2, 3, 4, 5]],\n  [63, [1, 2, 3, 4, 5]],\n  [64, [1, 2, 3, 4, 5]],\n  [65, [1, 2, 3, 4, 5]],\n  [66, [1, 2, 3, 4, 5]],\n  [67, [1, 2, 3, 4, 5]],\n  [68, [1, 2, 3, 4, 5]],\n  [69, [1, 2, 3, 4, 5]],\n  [70, [1, 2, 3, 4, 5]],\n  [71, [1, 2, 3, 4, 5]],\n  [72, [1, 2, 3, 4, 5]],\n  [73, [1, 2, 3, 4, 5]],\n  [74, [1, 2, 3, 4, 5]],\n  [75, [1, 2, 3, 4, 5]],\n  [76, [1, 2, 3, 4, 5]],\n  [77, [1, 2, 3, 4, 5]],\n  [78, [1, 2, 3, 4, 5]],\n  [79, [1, 2, 3, 4, 5]],\n  [80, [1, 2, 3, 4, 5]],\n  [81, [1, 2, 3, 4, 5]],\n  [82, [1, 2, 3, 4, 5]],\n  [83, [1, 2, 3, 4, 5]],\n  [84, [1, 2, 3, 4, 5]],\n  [85, [1, 2, 3, 4, 5]],\n  [86, [1, 2, 3, 4, 5]],\n  [87, [1, 2, 3, 4, 5]],\n  [88, [1, 2, 3, 4, 5]],\n  [89, [1, 2, 3, 4, 5]],\n  [90, [1, 2, 3, 4, 5]],\n  [91, [1, 2, 3, 4, 5]],\n  [92, [1, 2, 3, 4, 5]],\n  [93, [1, 2, 3, 4, 5]],\n  [94, [1, 2, 3, 4, 5]],\n  [95, [1, 2, 3, 4, 5]],\n  [96, [1, 2, 3, 4, 5]],\n  [97, [1, 2, 3, 4, 5]],\n  [98, [1, 2, 3, 4, 5]],\n  [99, [1, 2, 3, 4, 5]],\n  [100, [1, 2, 3, 4, 5]],\n  [101, [1, 2, 3, 4, 5]],\n  [102, [1, 2, 3, 4, 5]],\n  [103, [1, 2, 3, 4, 5]],\n  [104, [1, 2, 3, 4, 5]],\n  [105, [1, 2, 3, 4, 5]],\n  [106, [1, 2, 3, 4, 5]],\n  [107, [1, 2, 3, 4, 5]],\n  [108, [1, 2, 3, 4, 5]],\n  [109, [1, 2, 3, 4, 5]],\n  [110, [1, 2, 3, 4, 5]],\n  [111, [1, 2, 3, 4, 5]],\n  [112, [1, 2, 3, 4, 5]],\n  [113, [1, 2, 3, 4, 5]],\n  [114, [1, 2, 3, 4, 5]],\n  [115, [1, 2, 3, 4, 5]],\n  [116, [1, 2, 3, 4, 5]],\n  [117, [1, 2, 3, 4, 5]],\n  [118, [1, 2, 3, 4, 5]],\n  [119, [1, 2, 3, 4, 5]],\n  [120, [1, 2, 3, 4, 5]],\n  [121, [1, 2, 3, 4, 5]],\n  [122, [1, 2, 3, 4, 5]],\n  [123, [1, 2, 3, 4, 5]],\n  [124, [1, 2, 3, 4, 5]],\n  [125, [1, 2, 3, 4, 5]],\n  [126, [1, 2, 3, 4, 5]],\n  [127, [1, 2, 3, 4, 5]],\n  [128, [1, 2, 3, 4, 5]],\n  [129, [1, 2, 3, 4, 5]],\n  [130, [1, 2, 3, 4, 5]],\n  [131, [1, 2, 3, 4, 5]],\n  [132, [1, 2, 3, 4, 5]],\n  [133, [1, 2, 3, 4, 5]],\n  [134, [1, 2, 3, 4, 5]],\n  [135, [1, 2, 3, 4, 5]],\n  [136, [1, 2, 3, 4, 5]],\n  [137, [1, 2, 3, 4, 5]],\n  [138, [1, 2, 3, 4, 5]],\n  [139, [1, 2, 3, 4, 5]],\n  [140, [1, 2, 3, 4, 5]],\n  [141, [1, 2, 3, 4, 5]],\n  [142, [1, 2, 3, 4, 5]],\n  [143, [1, 2, 3, 4, 5]],\n  [144, [1, 2, 3, 4, 5]],\n  [145, [1, 2, 3, 4, 5]],\n  [146, [1, 2, 3, 4, 5]],\n  [147, [1, 2, 3, 4, 5]],\n  [148, [1, 2, 3, 4, 5]],\n  [149, [1, 2, 3, 4, 5]],\n  [150, [1, 2, 3, 4, 5]],\n  [151, [1, 2, 3, 4, 5]],\n  [152, [1, 2, 3, 4, 5]],\n  [153, [1, 2, 3, 4, 5]],\n  [154, [1, 2, 3, 4, 5]],\n  [155, [1, 2, 3, 4, 5]],\n  [156, [1, 2, 3, 4, 5]],\n  [157, [1, 2, 3, 4, 5]],\n  [158, [1, 2, 3, 4, 5]],\n  [159, [1, 2, 3, 4, 5]],\n  [160, [1, 2, 3, 4, 5]],\n  [161, [1, 2, 3, 4, 5]],\n  [162, [1, 2, 3, 4, 5]],\n  [163, [1, 2, 3, 4, 5]],\n  [164, [1, 2, 3, 4, 5]],\n  [165, [1, 2, 3, 4, 5]],\n  [166, [1, 2, 3, 4, 5]],\n  [167, [1, 2, 3, 4, 5]],\n  [168, [1, 2, 3, 4, 5]],\n  [169, [1, 2, 3, 4, 5]],\n  [170, [1, 2, 3, 4, 5]],\n  [171, [1, 2, 3, 4, 5]],\n  [172, [1, 2, 3, 4, 5]],\n  [173, [1, 2, 3, 4, 5]],\n  [174, [1, 2, 3, 4, 5]],\n  [175, [1, 2, 3, 4, 5]],\n  [176, [1, 2, 3, 4, 5]],\n  [177, [1, 2, 3, 4, 5]],\n  [178, [1, 2, 3, 4, 5]],\n  [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "<|endoftext|>/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const d = arr[i];\n    if (d >= 0) {\n      sum += d;\n    } else {\n      sum += d * Math.pow(10, -i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const n = arr.length;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr1.toString() === arr2.toString()) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether \n  it is possible to sort this array in non-decreasing order using only right \n  shift operations.\n\n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr1.toString() === arr2.toString()) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether \n  it is possible to sort this array in non-decreasing order using only right \n  shift operations.\n\n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr1.toString() === arr2.toString()) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether \n  it is possible to sort this array in non-decreasing order using only right \n  shift operations.\n\n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr1.toString() === arr2.toString()) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether \n  it is possible to sort this array in non-decreasing order using only right \n  shift operations.\n\n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr1.toString() === arr2.toString()) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether \n  it is possible to sort this array in non-decreasing order using only right \n  shift operations.\n\n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('010', '110')\n  '110'\n  */\nconst strIngNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND NOT on these inputs and return result also as a string.\n  >>> strIngAndNot('010', '110')\n  '100'\n  */\nconst strIngAndNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR NOT on these inputs and return result also as a string.\n  >>> strIngOrNot('010', '110')\n  '100'\n  */\nconst strIngOrNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR NOT on these inputs and return result also as a string.\n  >>> strIngXorNot('010', '110')\n  '100'\n  */\nconst strIngXorNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAndNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOrNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXor('010', '110')\n  '100'\n  */\nconst strIngXorNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAndNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOrNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXor('010', '110')\n  '100'\n  */\nconst strIngXorNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '100'\n  */\nconst strIngAndNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] & b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '100'\n  */\nconst strIngOrNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += ~a[i] | b[i];\n  }\n  return res;\n};\n\n/* Input are two strings a and b consist", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test Cases\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // YES\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = {};\n  let letterCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (letters[letter]) {\n      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n  });\n  for (let key in letters) {\n    if (letters[key] > letterCount) {\n      letterCount = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE(s.replace(c, ''), c);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE2 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE2(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE3 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE3(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE4 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE4(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE5 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE5(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE6 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE6(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE7 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE7(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE8 = (s, k) => {\n  let rev = s.split('').reverse().join('');\n  let res = revErsedeletE8(s.replace(k, ''), k);\n  return [res, s.replace(rev, '').split('').reverse().join('') === rev];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const evens = evensT(lst);\n  const odds = oddsT(evens);\n  return evens.map((e, i) => `the number of odd elements ${e} of the str${i + 1}ng ${e} of the ${i + 1}nput.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  const odds = oddsT(lst);\n  const evens = evensT(odds);\n  return evens.map((e, i) => `the number of even elements ${e} of the str${i + 1}ng ${e} of the ${i + 1}nput.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even digits in the i'th\n  string of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evensT(['1234567'])\n  [\"the number of even digits 2n in the str2ng 2 of the 2nput.\"]\n  >>> evensT(['3',\"11111111\"])\n  [\"the number of even digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of even digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evensT = (lst) => {\n  const evens = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .filter((e) => e % 2 === 0);\n  return evens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd digits in the i'th\n  string of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddsT(['1234567'])\n  [\"the number of odd digits 4n the str4ng 4 of the 4nput.\"]\n  >>> oddsT(['3',\"11111111\"])\n  [\"the number of odd digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddsT = (lst) => {\n  const odds = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .filter((e) => e % 2 === 1);\n  return odds;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the sum of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the sum\n  of the digits in the i'th string of the input.\n\n  >>> sumT(['1234567'])\n  [\"the sum of the digits 5n the str5ng 5 of the 5nput.\"]\n  >>> sumT(['3',\"11111111\"])\n  [\"the sum of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the sum of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sumT = (lst) => {\n  const sum = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .reduce((a, b) => a + b);\n  return sum;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> productT(['1234567'])\n  [\"the product of the digits 5n the str5ng 5 of the 5nput.\"]\n  >>> productT(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productT = (lst) => {\n  const product = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .reduce((a, b) => a * b);\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> productT(['1234567'])\n  [\"the product of the digits 5n the str5ng 5 of the 5nput.\"]\n  >>> productT(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productT = (lst) => {\n  const product = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .reduce((a, b) => a * b);\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> productT(['1234567'])\n  [\"the product of the digits 5n the str5ng 5 of the 5nput.\"]\n  >>> productT(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productT = (lst) => {\n  const product = lst\n   .map((e) => e.split('').filter((x) => x!== '0').length)\n   .reduce((a, b) => a * b);\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 6\n  maxsubARraySUm([-1, -2, -3]) == 3\n  */\nconst maxsubARraySUm = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProd([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProd([-1, -2, -3]) == -1\n  */\nconst minsubARrayProd = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod < min) {\n      min = prod;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProd([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProd([-1, -2, -3]) == -1\n  */\nconst maxsubARrayProd = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum([-1, -2, -3]) == -1\n  */\nconst minsubARrayProdSum = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod < min) {\n      min = prod;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -1\n  */\nconst maxsubARrayProdSum = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum2([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum2([-1, -2, -3]) == -1\n  */\nconst minsubARrayProdSum2 = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod < min) {\n      min = prod;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum2([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum2([-1, -2, -3]) == -1\n  */\nconst maxsubARrayProdSum2 = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum3([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum3([-1, -2, -3]) == -1\n  */\nconst minsubARrayProdSum3 = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod < min) {\n      min = prod;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum3([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum3([-1, -2, -3]) == -1\n  */\nconst maxsubARrayProdSum3 = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum4([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum4([-1, -2, -3]) == -1\n  */\nconst minsubARrayProdSum4 = (nums) => {\n  const min = Number.MAX_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod < min) {\n      min = prod;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum4([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum4([-1, -2, -3]) == -1\n  */\nconst maxsubARrayProdSum4 = (nums) => {\n  const max = Number.MIN_SAFE_INTEGER;\n  const prod = 1;\n  for (let i = 0; i < nums.length; i++) {\n    prod *= nums[i];\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum5([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum5([-1, -2, -3]) == -1\n  */\nconst minsubARrayProdSum5 = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport { maxfill };\n\n/*\n  You are given an array A of length N, and an integer K. \n  Your task is to find the number of ways to partition the array into K equal subarrays.\n  Each subarray must contain at least one element.\n  \n  Example 1:\n      Input: A = [1,2,3,4,5,6,7], K = 3\n      Output: 3\n      Explanation: \n      Partition the array into 3 subarrays:\n      [1,2], [3,4], [5,6,7]\n  \n  Example 2:\n      Input: A = [1,2,3,4,5,6,7], K = 2\n      Output: 2\n      Explanation: \n      Partition the array into 2 subarrays:\n      [1,2], [3,4,5,6,7]\n      [1,2], [3,4], [5,6,7]\n      [1,2], [3,5], [4,6,7]\n      [1,2], [3,6], [4,5,7]\n      [1,2], [3,7], [4,5,6]\n      [1,2], [3,7], [4,5,6,]\n      [1,2], [3,7], [4,5,6,7]\n      \n  Example 3:\n      Input: A = [1,2,3,4,5,6,7], K = 1\n      Output: 1\n      Explanation: \n      Partition the array into 1 subarray:\n      [1,2], [3,4,5,6,7]\n  \n  Constraints:\n      1 <= A.length <= 10^5\n      1 <= K <= A.length\n      0 <= A[i] <= 10^9\n*/\nconst partition = (A, K) => {\n  const n = A.length;\n  if (K > n) {\n    return 0;\n  }\n  const count = new Array(K).fill(0);\n  for (let i = 0; i < n; i++) {\n    if (A[i] % K === 0) {\n      count[A[i] / K] += 1;\n    }\n  }\n  return count[K];\n};\n\nexport { partition };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Your task is to find the number of ways to partition the array into K equal subarrays.\n  Each subarray must contain at least one element.\n  \n  Example 1:\n      Input: A = [1,2,3,4,5,6,7], K = 3\n      Output: 3\n      Explanation: \n      Partition the array into 3 subarrays:\n      [1,2], [3,4], [5,6,7]\n  \n  Example 2:\n      Input: A = [1,2,3,4,5,6,7], K = 2\n      Output: 2\n      Explanation: \n      Partition the array into 2 subarrays:\n      [1,2], [3,4,5,6,7]\n      [1,2], [3,4], [5,6,7]\n      [1,2], [3,5], [4,6,7]\n      [1,2], [3,6], [4,5,7]\n      [1,2], [3,7], [4,5,6]\n      [1,2], [3,7], [4,5,6,]\n      [1,2], [3,7], [4,5,6,7]\n      \n  Example 3:\n      Input: A = [1,2,3,4,5,6,7], K = 1\n      Output: 1\n      Explanation: \n      Partition the array into 1 subarray:\n      [1,2], [3,4,5,6,7]\n  \n  Constraints:\n      1 <= A.length <= 10^5\n      1 <= K <= A.length\n      0 <= A[i] <= 10^9\n*/\nconst partition2 = A => {\n  const n = A.length;\n  if (n === 0) {\n    return 0;\n  }\n  const count = new Array(A.length).fill(0);\n  for (let i = 0; i < n; i++) {\n    if (A[i] % 2 === 0) {\n      count[A[i] / 2] += 1;\n    }\n  }\n  return count[A.length];\n};\n\nexport { partition2 };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Your task is to find the number of ways to partition the array into K equal subarrays.\n  Each subarray must contain at least one element.\n  \n  Example 1:\n      Input: A = [1,2,3,4,5,6,7], K = 3\n      Output: 3\n      Explanation: \n      Partition the array into 3 subarrays:\n      [1,2], [3,4], [5,6,7]\n  \n  Example 2:\n      Input: A = [1,2,3,4,5,6,7], K = 2\n      Output: 2\n      Explanation: \n      Partition the array into 2 subarrays:\n      [1,2], [3,4,5,6,7]\n      [1,2], [3,4], [5,6,7]\n      [1,2], [3,5], [4,6,7]\n      [1,2], [3,6], [4,5,7]\n      [1,2], [3,7], [4,5,6]\n      [1,2], [3,7], [4,5,6,]\n      [1,2], [3,7], [4,5,6,7]\n      \n  Example 3:\n      Input: A = [1,2,3,4,5,6,7], K = 1\n      Output: 1\n      Explanation: \n      Partition the array into 1 subarray:\n      [1,2], [3,4,5,6,7]\n  \n  Constraints:\n      1 <= A.length <= 10^5\n      1 <= K <= A.length\n      0 <= A[i] <= 10^9\n*/\nconst partition3 = A => {\n  const n = A.length;\n  if (n === 0) {\n    return 0;\n  }\n  const count = new Array(A.length).fill(0);\n  for (let i = 0; i < n; i++) {\n    if (A[i] % 3 === 0) {\n      count[A[i] / 3] += 1;\n    }\n  }\n  return count[A.length];\n};\n\nexport { partition3 };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Your task is to find the number of ways to partition the array into K equal subarrays.\n  Each subarray must contain at least one element.\n  \n  Example 1:\n      Input: A = [1,2,3,4,5,6,7], K = 3\n      Output: 3\n      Explanation: \n      Partition the array into 3 subarrays:\n      [1,2], [3,4], [5,6,7]\n  \n  Example 2:\n      Input: A = [1,2,3,4,5,6,7], K = 2\n      Output: 2\n      Explanation: \n      Partition the array into 2 subarrays:\n      [1,2], [3,4,5,6,7]\n      [1,2], [3,4], [5,6,7]\n      [1,2], [3,5], [4,6,7]\n      [1,2], [3,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => a - b);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => parseInt(x.toString(2), 10));\n  const sortedOnes = ones\n   .map((x) => x > 0? 1 : 0)\n   .sort((a, b) => b - a);\n  const sortedArr = sortedOnes.map((x) => arr[x - 1]);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAyDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorTArrAyDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAyDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAyDesc = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let res = [];\n  \n  if(s.length === 0) {\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i)!== \" \") {\n      if(s.charAt(i) === s.charAt(i + n)) {\n        res.push(s.substr(0, i + 1));\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3 = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5 = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7 = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9 = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11 = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13 = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15 = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17 = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19 = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21 = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23 = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25 = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27 = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29 = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31 = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33 = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35 = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37 = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39 = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41 = vowelsCount - 40;\n  let vowelsCount42 = vowelsCount - 41;\n  let vowelsCount43 = vowelsCount - 42;\n  let vowelsCount44 = vowelsCount - 43;\n  let vowelsCount45 = vowelsCount - 44;\n  let vowelsCount46 = vowelsCount - 45;\n  let vowelsCount47 = vowelsCount - 46;\n  let vowelsCount48 = vowelsCount - 47;\n  let vowelsCount49 = vowelsCount - 48;\n  let vowelsCount50 = vowelsCount - 49;\n  let vowelsCount51 = vowelsCount - 50;\n  let vowelsCount52 = vowelsCount - 51;\n  let vowelsCount53 = vowelsCount - 52;\n  let vowelsCount54 = vowelsCount - 53;\n  let vowelsCount55 = vowelsCount - 54;\n  let vowelsCount56 = vowelsCount - 55;\n  let vowelsCount57 = vowelsCount - 56;\n  let vowelsCount58 = vowelsCount - 57;\n  let vowelsCount59 = vowelsCount - 58;\n  let vowelsCount60 = vowelsCount - 59;\n  let vowelsCount61 = vowelsCount - 60;\n  let vowelsCount62 = vowelsCount - 61;\n  let vowelsCount63 = vowelsCount - 62;\n  let vowelsCount64 = vowelsCount - 63;\n  let vowelsCount65 = vowelsCount - 64;\n  let vowelsCount66 = vowelsCount - 65;\n  let vowelsCount67 = vowelsCount - 66;\n  let vowelsCount68 = vowelsCount - 67;\n  let vowelsCount69 = vowelsCount - 68;\n  let vowelsCount70 = vowelsCount - 69;\n  let vowelsCount71 = vowelsCount - 70;\n  let vowelsCount72 = vowelsCount - 71;\n  let vowelsCount73 = vowelsCount - 72;\n  let vowelsCount74 = vowelsCount - 73;\n  let vowelsCount75 = vowelsCount - 74;\n  let vowelsCount76 = vowelsCount - 75;\n  let vowelsCount77 = vowelsCount - 76;\n  let vowelsCount78 = vowelsCount - 77;\n  let vowelsCount79 = vowelsCount - 78;\n  let vowelsCount80 = vowelsCount - 79;\n  let vowelsCount81 = vowelsCount - 80;\n  let vowelsCount82 = vowelsCount - 81;\n  let vowelsCount83 = vowelsCount - 82;\n  let vowelsCount84 = vowelsCount - 83;\n  let vowelsCount85 = vowelsCount - 84;\n  let vowelsCount86 = vowelsCount - 85;\n  let vowelsCount87 = vowelsCount - 86;\n  let vowelsCount88 = vowelsCount - 87;\n  let vowelsCount89 = vowelsCount - 88;\n  let vowelsCount90 = vowelsCount - 89;\n  let vowelsCount91 = vowelsCount - 90;\n  let vowelsCount92 = vowelsCount - 91;\n  let vowelsCount93 = vowelsCount - 92;\n  let vowelsCount94 = vowelsCount - 93;\n  let vowelsCount95 = vowelsCount - 94;\n  let vowelsCount96 = vowelsCount - 95;\n  let vowelsCount97 = vowelsCount - 96;\n  let vowelsCount98 = vowelsCount - 97;\n  let vowelsCount99 = vowelsCount - 98;\n  let vowelsCount100 = vowelsCount - 99;\n  let vowelsCount101 = vowelsCount - 100;\n  let vowelsCount102 = vowelsCount - 101;\n  let vowelsCount103 = vowelsCount - 102;\n  let vowelsCount104 = vowelsCount - 103;\n  let vowelsCount105 = vowelsCount - 104;\n  let vowelsCount106 = vowelsCount - 105;\n  let vowelsCount107 = vowelsCount - 106;\n  let vowelsCount108 = vowelsCount - 107;\n  let vowelsCount109 = vowelsCount ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        res.push('No');\n      } else {\n        stack.pop();\n        if (stack.length === 0) {\n          res.push('Yes');\n        }\n      }\n    }\n  }\n  return res.join('');\n};\n\n/* You are given a string S and a string T. Your job is to find out if there\n  is a way to replace T with S in such a way that the resulting string will be\n  good.\n  For example: S = '(())', T = '()', the result will be '(())'\n  S = '(())', T = '(', the result will be '()()'\n  S = '(())', T = '(()', the result will be '()()()'\n  S = '(())', T = '()()', the result will be '()()()'\n  S = '(())', T = '(())', the result will be '()()()'\n  S = '(())', T = '(()())', the result will be '()()()()'\n  S = '(())', T = '()(())', the result will be '()()()()'\n  S = '(())', T = '(()(())', the result will be '()()()()'\n  S = '(())', T = '()(()())', the result will be '()()()()()'\n  S = '(())', T = '()(()(()))', the result will be '()()()()()()'\n  S = '(())', T = '()(()(()()))', the result will be '()()()()()()()'\n  S = '(())', T = '()(()(()(())))', the result will be '()()()()()()()()'\n  S = '(())', T = '()(()(()(()(())))', the result will be '()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(())))', the result will be '()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()()()()()()()'\n  S = '(())', T = '()(()(()(()(()(()(()(()(()(()(()(()(())))', the result will be '()()()()()()()()()()", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "<|endoftext|>/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings.reduce((longest, str) => {\n    return str.length > longest? str.length : longest;\n  }, 0);\n  return strings.find((str) => str.length === longest);\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n * Return null if the given array is empty.\n * >>> longestSubstringInString('abc', ['abc', 'ab'])\n  'abc'\n  >>> longestSubstringInString('abc', [])\n  null\n  */\nconst longestSubstringInString = (str, strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.find((str2) => str.includes(str2));\n};\n\n/**\n * Returns the longest string in the given array that is a substring of the given string.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minImum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxSum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      max += arr[j];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minSum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      min += arr[j];\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxProduct of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxProduct = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 1;\n    for (let j = 0; j < arr.length; j++) {\n      max *= arr[j];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minProduct of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minProduct = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 1;\n    for (let j = 0; j < arr.length; j++) {\n      min *= arr[j];\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxSumOfProduct = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 1;\n    for (let j = 0; j < arr.length; j++) {\n      max *= arr[j];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minSum of k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minSumOfProduct = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 1;\n    for (let j = 0; j < arr.length; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the even elements from the original list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN2 = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the odd elements from the original list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN3 = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in both lists.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN4 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN5 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN6 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN7 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN8 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN9 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN10 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN11 = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in either list.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtio", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(prev);\n      prev = prev * 2 % i;\n    } else {\n      prev = prev * 3 % i + 1;\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  let dateArray = date.split('-');\n  let dateArray2 = date.split('/');\n  let dateArray3 = date.split('.');\n  let dateArray4 = date.split(' ');\n  let dateArray5 = date.split('/');\n  let dateArray6 = date.split('.');\n  let dateArray7 = date.split(' ');\n  let dateArray8 = date.split('/');\n  let dateArray9 = date.split(' ');\n  let dateArray10 = date.split('/');\n  let dateArray11 = date.split(' ');\n  let dateArray12 = date.split('/');\n  let dateArray13 = date.split(' ');\n  let dateArray14 = date.split('/');\n  let dateArray15 = date.split(' ');\n  let dateArray16 = date.split('/');\n  let dateArray17 = date.split(' ');\n  let dateArray18 = date.split('/');\n  let dateArray19 = date.split(' ');\n  let dateArray20 = date.split('/');\n  let dateArray21 = date.split(' ');\n  let dateArray22 = date.split('/');\n  let dateArray23 = date.split(' ');\n  let dateArray24 = date.split('/');\n  let dateArray25 = date.split(' ');\n  let dateArray26 = date.split('/');\n  let dateArray27 = date.split(' ');\n  let dateArray28 = date.split('/');\n  let dateArray29 = date.split(' ');\n  let dateArray30 = date.split('/');\n  let dateArray31 = date.split(' ');\n  let dateArray32 = date.split('/');\n  let dateArray33 = date.split(' ');\n  let dateArray34 = date.split('/');\n  let dateArray35 = date.split(' ');\n  let dateArray36 = date.split('/');\n  let dateArray37 = date.split(' ');\n  let dateArray38 = date.split('/');\n  let dateArray39 = date.split(' ');\n  let dateArray40 = date.split('/');\n  let dateArray41 = date.split(' ');\n  let dateArray42 = date.split('/');\n  let dateArray43 = date.split(' ');\n  let dateArray44 = date.split('/');\n  let dateArray45 = date.split(' ');\n  let dateArray46 = date.split('/');\n  let dateArray47 = date.split(' ');\n  let dateArray48 = date.split('/');\n  let dateArray49 = date.split(' ');\n  let dateArray50 = date.split('/');\n  let dateArray51 = date.split(' ');\n  let dateArray52 = date.split('/');\n  let dateArray53 = date.split(' ');\n  let dateArray54 = date.split('/');\n  let dateArray55 = date.split(' ');\n  let dateArray56 = date.split('/');\n  let dateArray57 = date.split(' ');\n  let dateArray58 = date.split('/');\n  let dateArray59 = date.split(' ');\n  let dateArray60 = date.split('/');\n  let dateArray61 = date.split(' ');\n  let dateArray62 = date.split('/');\n  let dateArray63 = date.split(' ');\n  let dateArray64 = date.split('/');\n  let dateArray65 = date.split(' ');\n  let dateArray66 = date.split('/');\n  let dateArray67 = date.split(' ');\n  let dateArray68 = date.split('/');\n  let dateArray69 = date.split(' ');\n  let dateArray70 = date.split('/');\n  let dateArray71 = date.split(' ');\n  let dateArray72 = date.split('/');\n  let dateArray73 = date.split(' ');\n  let dateArray74 = date.split('/');\n  let dateArray75 = date.split(' ');\n  let dateArray76 = date.split('/');\n  let dateArray77 = date.split(' ');\n  let dateArray78 = date.split('/');\n  let dateArray79 = date.split(' ');\n  let dateArray80 = date.split('/');\n  let dateArray81 = date.split(' ');\n  let dateArray82 = date.split('/');\n  let dateArray83 = date.split(' ');\n  let dateArray84 = date.split('/');\n  let dateArray85 = date.split(' ');\n  let dateArray86 = date.split('/');\n  let dateArray87 = date.split(' ');\n  let dateArray88 = date.split('/');\n  let dateArray89 = date.split(' ');\n  let dateArray90 = date.split('/');\n  let dateArray91 = date.split(' ');\n  let dateArray92 = date.split('/');\n  let dateArray93 = date.split(' ');\n  let dateArray94 = date.split('/');\n  let dateArray95 = date.split(' ');\n  let dateArray96 = date.split('/');\n  let dateArray97 = date.split(' ');\n  let dateArray98 = date.split('/');\n  let dateArray99 = date.split(' ');\n  let dateArray100 = date.split('/');\n  let dateArray101 = date.split(' ');\n  let dateArray102 = date.split('/');\n  let dateArray103 = date.split(' ');\n  let dateArray104 = date.split('/');\n  let dateArray105 = date.split(' ');\n  let dateArray106 = date.split('/');\n  let dateArray107 = date.split(' ');\n  let dateArray108 = date.split('/');\n  let dateArray109 = date.split(' ');\n  let dateArray110 = date.split('/');\n  let dateArray111 = date.split(' ');\n  let dateArray112 = date.split('/');\n  let dateArray113 = date.split(' ');\n  let dateArray114 = date.split('/');\n  let dateArray115 = date.split(' ');\n  let dateArray116 = date.split('/');\n  let dateArray117 = date.split(' ');\n  let dateArray118 = date.split('/');\n  let dateArray119 = date.split(' ');\n  let dateArray120 = date.split('/');\n  let dateArray121 = date.split(' ');\n  let dateArray122 = date.split('/');\n  let dateArray123 = date.split(' ');\n  let dateArray124 = date.split('/');\n  let dateArray125 = date.split(' ');\n  let dateArray126 = date.split('/');\n  let dateArray127 = date.split(' ');\n  let dateArray128 = date.split('/');\n  let dateArray129 = date.split(' ');\n  let dateArray130 = date.split('/');\n  let dateArray131 = date.split(' ');\n  let dateArray132 = date.split('/');\n  let dateArray133 = date.split(' ');\n  let dateArray134 = date.split('/');\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersOdd = noCommas.filter((word) =>!/[a-z]/.test(word));\n  return noLettersOdd.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersOdd = noCommas.filter((word) =>!/[A-Z]/.test(word));\n  return noLettersOdd.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersEven = noCommas.filter((word) =>!/[a-z]/.test(word));\n  return noLettersEven.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersEven = noCommas.filter((word) =>!/[A-Z]/.test(word));\n  return noLettersEven.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersEven = noCommas.filter((word) =>!/[a-z]/.test(word));\n  return noLettersEven.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersEven = noCommas.filter((word) =>!/[A-Z]/.test(word));\n  return noLettersEven.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(\" \");\n  const noWhiteSpaces = words.filter((word) =>!/\\s/.test(word));\n  const noCommas = noWhiteSpaces.filter((word) =>!/,/.test(word));\n  const noLettersOdd = noCommas.filter((word) =>!/[a-z]/.test(word));\n  return noLettersOdd.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 25\n  Examples\n  splItWoRds(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  // If the list has less than 2 elements, return false\n  if (lst.length < 2) return false\n\n  // If the list has more than 1 duplicate of the same number, return false\n  const arr = []\n  for (let i = 0; i < lst.length; i++) {\n    if (arr.indexOf(lst[i]) > -1) return false\n    arr.push(lst[i])\n  }\n\n  // If all numbers are unique, return true\n  return arr.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  // If the list has less than 2 elements, return false\n  if (lst.length < 2) return false\n\n  // If the list has more than 1 duplicate of the same number, return false\n  const arr = []\n  for (let i = 0; i < lst.length; i++) {\n    if (arr.indexOf(lst[i]) > -1) return false\n    arr.push(lst[i])\n  }\n\n  // If all numbers are unique, return true\n  return arr.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval2End;\n  }\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2Start <= interval2End;\n  }\n  return interval1Start <= interval2Start && interval1End <= interval2End;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval2End;\n  }\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2Start <= interval2End;\n  }\n  return interval1Start <= interval2Start && interval1End <= interval2End;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval2End;\n  }\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2Start <= interval2End;\n  }\n  return interval1Start <= interval2Start && interval1End <= interval2End;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval2End;\n  }\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2Start <= interval2End;\n  }\n  return interval1Start <= interval2Start && interval1End <= interval2End;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * Math.sign(i));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const N = grid.length\n  const M = new Array(N).fill(0).map(() => new Array(N).fill(0))\n  const visited = new Array(N).fill(false)\n  const result = []\n  const dfs = (i, j) => {\n    if (visited[i][j]) return\n    visited[i][j] = true\n    for (let k = i; k <= j; k++) {\n      if (grid[i][k] === grid[k][j]) {\n        dfs(i, k)\n        dfs(k, j)\n      }\n    }\n    result.push(grid[i][j])\n  }\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= N; j++) {\n      if (i === N || j === N) continue\n      if (i === j) dfs(i, j)\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\nconsole.log(minpath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n], 3))\nconsole.log(minpath([\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2],\n], 1))</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Can you please explain why you used `M` array? Why not just use `visited` array?\n<|/ c |>\n<| c |>\nBecause `visited` array is used in `dfs` function and `M` is used in `minpath` function. I just wanted to show that `M` is used in `minpath` function and `visited` is used in `dfs` function.\n<|/ c |>\n<| c |>\nThanks for your answer. Can you please explain why you used `M` array? Why not just use `visited` array?\n<|/ c |>\n<| c |>\nBecause `visited` array is used in `dfs` function and `M` is used in `minpath` function. I just wanted to show that `M` is used in `minpath` function and `visited` is used in `dfs` function.\n<|/ c |>\n<| c |>\nThanks for your answer. Can you please explain why you used `M` array? Why not just use `visited` array?\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length;\n  const M = new Array(N).fill(0).map(() => new Array(N).fill(0));\n  const visited = new Array(N).fill(false);\n  const result = [];\n  const dfs = (i, j) => {\n    if (visited[i][j]) return\n    visited[i][j] = true;\n    for (let k = i; k <= j; k++) {\n      if (grid[i][k] === grid[k][j]) {\n        dfs(i, k)\n        dfs(k, j)\n      }\n    }\n    result.push(grid[i][j]);\n  }\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= N; j++) {\n      if (i === N || j === N) continue\n      if (i === j) dfs(i, j)\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\nconsole.log(minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n], 3))\nconsole.log(minPath([\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2],\n], 1))</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you please explain why you used `M` array? Why not just use `visited` array?\n<|/ c |>\n<| c |>\nBecause `visited` array is used in `dfs` function and `M` is used in `minpath` function. I just wanted to show that `M` is used in `minpath` function and `visited` is used in `dfs` function.\n<|/ c |>\n<| a |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length;\n  const M = new Array(N).fill(0).map(() => new Array(N).fill(0));\n  const visited = new Array(N).fill(false);\n  const result = [];\n  const dfs = (i, j) => {\n    if (visited[i][j]) return\n    visited[i][j] = true;\n    for (let k = i; k <= j; k++) {\n      if (grid[i][k] === grid[k][j]) {\n        dfs(i, k)\n        dfs(k, j)\n      }\n    }\n    result.push(grid[i][j]);\n  }\n  for (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= N; j++) {\n      if (i === N || j === N) continue\n      if (i === j) dfs(i, j)\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\nconsole.log(minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n], 3))\nconsole.log(minPath([\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2],\n], 1))</code>\n<|/ a dscore=1 tags=algorithm,javascript,arrays |>\n<| c |>\nThanks for your answer. Can you please explain why you used `M` array? Why not just use `visited` array?\n<|/ c |>\n<| c |>\nBecause `visited` array is used in `dfs` function and `M` is used in `minpath` function. I just wanted to show that `M` is used in `minpath` function and `visited` is used in `dfs` function.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length;\n  const M = new Array(N).fill(0).map(() => new Array(N).fill(0));\n  const visited = new Array(N).fill(false);\n  const result = [];\n  const dfs = (i, j) => {\n    if (visited[i][j]) return\n    visited[i][j] = true;\n    for (let k = i; k <= j; k++) {\n      if (grid[i][k] === grid[k][j]) {\n        dfs(i, k)\n        dfs(k, j)\n      }\n    }\n    result.push(grid[i][j]);\n  }\n  for (let i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const gcd = (a, b) => {\n    while (b) {\n      const t = b;\n      b = a % t;\n      a = t;\n    }\n    return a;\n  };\n  return gcd(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greAtesTCommOnDIvisoR(a, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [3, 1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = 1 + 4 * 3\n  spiral(5) = 1 + 4 + 5\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 5]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [1];\n  if (n % 2 === 0) return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n  return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = 1 + 4 * 3\n  spiral(5) = 1 + 4 + 5\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 5]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [1];\n  if (n % 2 === 0) return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n  return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = 1 + 4 * 3\n  spiral(5) = 1 + 4 + 5\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 5]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [1];\n  if (n % 2 === 0) return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n  return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = 1 + 4 * 3\n  spiral(5) = 1 + 4 + 5\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 5]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [1];\n  if (n % 2 === 0) return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n  return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = 1 + 4 * 3\n  spiral(5) = 1 + 4 + 5\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 5]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return [1];\n  if (n % 2 === 0) return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n  return [spiral(n - 1) + spiral(n - 2), spiral(n - 1)];\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 235\n  */\nconst evenDigIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst evenDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 0\n  */\nconst oddDigitsIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all dig", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const openingBrackets = '[[]'\n  const closingBrackets = '[]]'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsPosition = string.indexOf(openingBrackets)\n  const closingBracketsPosition = string.indexOf(closingBrackets)\n  const openingBracketsPositionCount = openingBracketsPosition\n   ? openingBracketsPosition + openingBracketsCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPosition\n   ? closingBracketsPosition + closingBracketsCount - 1\n    : 0\n  const openingBracketsPositionCount = openingBracketsPositionCount\n   ? openingBracketsPositionCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPositionCount\n   ? closingBracketsPositionCount - 1\n    : 0\n  const isNested = (\n    openingBracketsPositionCount === closingBracketsPositionCount\n  )\n  return isNested? true : false\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const openingBrackets = '[[]'\n  const closingBrackets = '[]]'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsPosition = string.indexOf(openingBrackets)\n  const closingBracketsPosition = string.indexOf(closingBrackets)\n  const openingBracketsPositionCount = openingBracketsPosition\n   ? openingBracketsPosition + openingBracketsCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPosition\n   ? closingBracketsPosition + closingBracketsCount - 1\n    : 0\n  const openingBracketsPositionCount = openingBracketsPositionCount\n   ? openingBracketsPositionCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPositionCount\n   ? closingBracketsPositionCount - 1\n    : 0\n  const isNested = (\n    openingBracketsPositionCount === closingBracketsPositionCount\n  )\n  return isNested? true : false\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const openingBrackets = '[[]'\n  const closingBrackets = '[]]'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsPosition = string.indexOf(openingBrackets)\n  const closingBracketsPosition = string.indexOf(closingBrackets)\n  const openingBracketsPositionCount = openingBracketsPosition\n   ? openingBracketsPosition + openingBracketsCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPosition\n   ? closingBracketsPosition + closingBracketsCount - 1\n    : 0\n  const openingBracketsPositionCount = openingBracketsPositionCount\n   ? openingBracketsPositionCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPositionCount\n   ? closingBracketsPositionCount - 1\n    : 0\n  const isNested = (\n    openingBracketsPositionCount === closingBracketsPositionCount\n  )\n  return isNested? true : false\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const openingBrackets = '[[]'\n  const closingBrackets = '[]]'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsPosition = string.indexOf(openingBrackets)\n  const closingBracketsPosition = string.indexOf(closingBrackets)\n  const openingBracketsPositionCount = openingBracketsPosition\n   ? openingBracketsPosition + openingBracketsCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPosition\n   ? closingBracketsPosition + closingBracketsCount - 1\n    : 0\n  const openingBracketsPositionCount = openingBracketsPositionCount\n   ? openingBracketsPositionCount - 1\n    : 0\n  const closingBracketsPositionCount = closingBracketsPositionCount\n   ? closingBracketsPositionCount - 1\n    : 0\n  const isNested = (\n    openingBracketsPositionCount === closingBracketsPositionCount\n  )\n  return isNested? true : false\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsLetter = lastChar.match(/[a-z]/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsLetter &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsDigit = lastChar.match(/\\d/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsDigit &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsPunct = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsPunct &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a whitespace and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsSpace = lastChar.match(/[ ]/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsSpace &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsWord = lastChar.match(/[a-z]+/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsWord &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsWord = lastChar.match(/[a-z]+/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsWord &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsWord = lastChar.match(/[a-z]+/i);\n  const lastCharIsNotWord = lastChar.match(/[^ ]/i);\n  return lastCharIsWord &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[max]) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 3\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let min = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[min]) {\n      min = i;\n    }\n  }\n  return min;\n};\n\n/*Create a function which returns the average of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraAvg([1,2,4,3,5]) = 4\n  canarraAvg([1,2,3]) = 0\n  */\nconst canarraAvg = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\n/*Create a function which returns the sum of an array of numbers. The given\n  array will not contain duplicate values.\n\n  Examples:\n  canarraSum([1,2,4,3,5]) = 15\n  canarraSum([1,2,3]) = 5\n  */\nconst canarraSum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Create a function which returns the product of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraProd([1,2,4,3,5]) = 24\n  canarraProd([1,2,3]) = 24\n  */\nconst canarraProd = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Create a function which returns the largest and smallest numbers in an\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  canarraMinMax([1,2,4,3,5]) = [1,5]\n  canarraMinMax([1,2,3]) = [1,3]\n  */\nconst canarraMinMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returns the average of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraMean([1,2,4,3,5]) = 4\n  canarraMean([1,2,3]) = 0\n  */\nconst canarraMean = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Create a function which returns the sum of an array of numbers. The given\n  array will not contain duplicate values.\n\n  Examples:\n  canarraSumSq([1,2,4,3,5]) = 25\n  canarraSumSq([1,2,3]) = 5\n  */\nconst canarraSumSq = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Create a function which returns the product of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraProdSq([1,2,4,3,5]) = 24\n  canarraProdSq([1,2,3]) = 24\n  */\nconst canarraProdSq = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i] * arr[i];\n  }\n  return product;\n};\n\n/*Create a function which returns the largest and smallest numbers in an\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  canarraMinMaxSq([1,2,4,3,5]) = [1,5]\n  canarraMinMaxSq([1,2,3]) = [1,3]\n  */\nconst canarraMinMaxSq = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returns the average of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraMeanSq([1,2,4,3,5]) = 4\n  canarraMeanSq([1,2,3]) = 0\n  */\nconst canarraMeanSq = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Create a function which returns the sum of an array of numbers. The given\n  array will not contain duplicate values.\n\n  Examples:\n  canarraSumSqR([1,2,4,3,5]) = 25\n  canarraSumSqR([1,2,3]) = 5\n  */\nconst canarraSumSqR = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n};\n\n/*Create a function which returns the product of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraProdSqR([1,2,4,3,5]) = 24\n  canarraProdSqR([1,2,3]) = 24\n  */\nconst canarraProdSqR = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= Math.pow(arr[i], 2);\n  }\n  return product;\n};\n\n/*Create a function which returns the largest and smallest numbers in an\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  canarraMinMaxSqR([1,2,4,3,5]) = [1,5]\n  canarraMinMaxSqR([1,2,3]) = [1,3]\n  */\nconst canarraMinMaxSqR = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returns the average of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraMeanSqR([1,2,4,3,5]) = 4\n  canarraMeanSqR([1,2,3]) = 0\n  */\nconst canarraMeanSqR = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Create a function which returns the sum of an array of numbers. The given\n  array will not contain duplicate values.\n\n  Examples:\n  canarraSumR([1,2,4,3,5]) = 15\n  canarraSumR([1,2,3]) = 5\n  */\nconst canarraSumR = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Create a function which returns the product of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  canarraProdR([1,2,4,3,5])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestgestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestGestsmallEstintegErs([]) == (null, null)\n  largestGestsmallEstintegErs([0]) == (null, null)\n  */\nconst largestGestsmallEstintegErs = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"*\" || b === \"*\") return null\n  if (a === \"/\" || b === \"/\") return null\n  if (a === \"^\" || b === \"^\") return null\n  if (a === \"%\" || b === \"%\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"<\" || b === \"<\") return null", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isNegativeSumeveN(4) == false\n  isNegativeSumeveN(6) == false\n  isNegativeSumeveN(8) == true\n  */\nconst isNegativeSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isPositiveSumeveN(4) == false\n  isPositiveSumeveN(6) == false\n  isPositiveSumeveN(8) == true\n  */\nconst isPositiveSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isPositiveOddSumeveN(4) == false\n  isPositiveOddSumeveN(6) == false\n  isPositiveOddSumeveN(8) == true\n  */\nconst isPositiveOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isNegativeOddSumeveN(4) == false\n  isNegativeOddSumeveN(6) == false\n  isNegativeOddSumeveN(8) == true\n  */\nconst isNegativeOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isPositiveEvenSumeveN(4) == false\n  isPositiveEvenSumeveN(6) == false\n  isPositiveEvenSumeveN(8) == true\n  */\nconst isPositiveEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isPositiveOddEvenSumeveN(4) == false\n  isPositiveOddEvenSumeveN(6) == false\n  isPositiveOddEvenSumeveN(8) == true\n  */\nconst isPositiveOddEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isNegativeEvenSumeveN(4) == false\n  isNegativeEvenSumeveN(6) == false\n  isNegativeEvenSumeveN(8) == true\n  */\nconst isNegativeEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isNegativeOddEvenSumeveN(4) == false\n  isNegativeOddEvenSumeveN(6) == false\n  isNegativeOddEvenSumeveN(8) == true\n  */\nconst isNegativeOddEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isPositiveEvenEvenSumeveN(4) == false\n  isPositiveEvenEvenSumeveN(6) == false\n  isPositiveEvenEvenSumeveN(8) == true\n  */\nconst isPositiveEvenEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isPositiveOddEvenSumeveN(4) == false\n  isPositiveOddEvenSumeveN(6) == false\n  isPositiveOddEvenSumeveN(8) == true\n  */\nconst isPositiveOddEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isNegativeEvenEvenSumeveN(4) == false\n  isNegativeEvenSumeveN(6) == false\n  isNegativeEvenSumeveN(8) == true\n  */\nconst isNegativeEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isNegativeOddEvenSumeveN(4) == false\n  isNegativeOddEvenSumeveN(6) == false\n  isNegativeOddEvenSumeveN(8) == true\n  */\nconst isNegativeOddEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isPositiveEvenEvenSumeveN(4) == false\n  isPositiveEvenEvenSumeveN(6) == false\n  isPositiveEvenEvenSumeveN(8) == true\n  */\nconst isPositiveEvenEvenSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum > 0) {\n      return true;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n < 0) {\n    return factorial(-n);\n  }\n  return factorialRiaL(n);\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of negative numbers is defined as:\n  factorial(n) = factorial(n-1) * factorial(n-2)\n  where n > 0\n\n  For example:\n  >>> factorial(3)\n  6\n  >>> factorial(-3)\n  -6\n  >>> factorial(-4)\n  24\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorialRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const prefixes = [];\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes2 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes3 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes4 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes5 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes6 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes7 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allprefIxes8 = (string, prefixes) => {\n  let longest = 0;\n  let longestIx = 0;\n  let shortest = 0;\n  let shortestIx = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const ix = string.indexOf(char, i + 1);\n\n    if (ix === -1) {\n      prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n      longest = i;\n      longestIx = i;\n      shortest = i;\n      shortestIx = i;\n    } else {\n      longest = ix;\n      longestIx = ix;\n      shortest = i;\n      shortestIx = i;\n    }\n  }\n\n  prefixes.push(string.substr(longest + 1, shortest - longest - 1));\n\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('ab')\n  ['ab']\n  */\nconst allpref", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  return text.replace(/ /g, \"_\").replace(/  +/g, \"_\").replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all punctuation marks, \n  and if a string has more than 2 consecutive punctuation marks, \n  then remove all consecutive punctuation marks with - \n  \n  fixpuncEs(\"Example\") == \"Example\"\n  fixpuncEs(\"Example 1\") == \"Example_1\"\n  fixpuncEs(\" Example 2\") == \"Example_2\"\n  fixpuncEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixpuncEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixnonalnumEs(\"Example\") == \"Example\"\n  fixnonalnumEs(\"Example 1\") == \"Example_1\"\n  fixnonalnumEs(\" Example 2\") == \"Example_2\"\n  fixnonalnumEs(\" Example   3\") == \"Example_3\"\n  */\nconst fixnonalnumEs = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries in the list whose indexes are a multiple of 3 \n  and whose indexes are a multiple of 4. The function shall not change the entries in the list whose indexes are not a multiple of 3 \n  or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a list of integers and returns the sum of all entries ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce2 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce3 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce4 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce5 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce6 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce7 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce7 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce8 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.filter((val) => {\n    return val.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "<|endoftext|>/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));</code>\n<|/ a |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a tags=javascript,fractions |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,fractions |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/\");\n  return numerator % 1 === 0 && denominator % 1 === 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simPlifY(x, n) {\n  let [numerator, denominator] = x.split(\"/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal + num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal - num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointI([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointI([]) == []\n  */\nconst ordErBypointI = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal + num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal - num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointI([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointI([]) == []\n  */\nconst ordErBypointI = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal + num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal - num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal + num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, 11, -1, 1]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal - num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointI([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointI([]) == []\n  */\nconst ordErBypointI = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = numToString(num);\n    const val = map.get(key);\n    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const oldVal = val;\n      map.set(key, oldVal + num);\n    }\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. You have to find out whether there exists two elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: true\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + nums[1] = 2 + 7 = 9\n      nums[2] + nums[3] = 11 + 15 = 9\n  */\nconst twoSum = (nums, target) => {\n  let hash = {};\n  for (let i = 0; i < nums.length; i++) {\n    let key = target - nums[i];\n    if (hash[key]) {\n      return true;\n    }\n    hash[nums[i]] = true;\n  }\n  return false;\n};\n\n/*\n  You are given an integer array nums and an integer target. \n  You have to find out whether there exists a pair of elements \n  in nums such that their sum is equal to the given integer target.\n  \n  Example :\n      Input: nums = [2,7,11,15], target = 9\n      Output: false\n      Explanation: \n      nums[0] + num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let planet1OrbitOrbit = orbit(planet1, planet2);\n  let planet2OrbitOrbit = orbit(planet2, planet1);\n  let planet1OrbitOrbitOrbit = orbit(planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbit = orbit(planet2, planet1, planet2);\n  let planet1OrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2);\n  let planet2OrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1);\n  let planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet1, planet2, planet1, planet2, planet1, planet2, planet1, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the product of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      list.push(product * lst[i]);\n    }\n  }\n  return list;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      list.push(sum + lst[i]);\n    }\n  }\n  return list;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      list.push(sum);\n    }\n  }\n  return list;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      list.push(sum);\n    }\n  }\n  return list;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2!== 0) {\n      list.push(sum);\n    }\n  }\n  return list;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that\n  are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [1, 9, 0, 3]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [0, -1, -2]\n  douBleTHeDifFerEnce([9, -2]) == [9, 81]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  const results = []\n  \n  for (let i = 0; i < guesses.length; i++) {\n    const difference = Math.abs(guesses[i] - scores[i])\n    if (difference === 0) {\n      results.push(0)\n    } else {\n      results.push(difference)\n    }\n  }\n  return results\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.reduce() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.reduce((acc, curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    if (difference === 0) {\n      acc.push(0)\n    } else {\n      acc.push(difference)\n    }\n    return acc\n  }, [])\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.map() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.map((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    if (difference === 0) {\n      return 0\n    } else {\n      return difference\n    }\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.filter() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.filter((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.forEach() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.forEach((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    if (difference === 0) {\n      return 0\n    } else {\n      return difference\n    }\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.find() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.find((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.some() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.some((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.every() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.every((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.filter() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.filter((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.map() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.map((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.forEach() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.forEach((curr, i) => {\n    const difference = Math.abs(guesses[i] - scores[i])\n    return difference === 0\n  })\n}\n\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))</code>\n\nThis code will run a lot faster if you use Array.find() instead of for loops:\n\n<code>\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  return guesses.find((curr, i) => {\n    const difference = Math.abs(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_ext = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const ext = extensions[i];\n    const cap = ext.toUpperCase().length;\n    const sm = ext.toLowerCase();\n    const strength = cap - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_ext = ext;\n    }\n  }\n  return `${class_name}${strongest_ext}`;\n};\n\n/*\n  Given a string, you should return a new string where all the characters are\n  reversed.\n  Example:\n  reverseString('hello') == 'olleh'\n  reverseString('abracadabra') == 'rabracadabra'\n*/\nconst reverseString = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, you should return a new string where all the characters are\n  reversed, except for the characters that are in the given set (case\n  sensitive).\n  Example:\n  reverseStringWithSet('hello', ['h', 'e', 'l', 'l', 'o']) == 'olleh'\n  reverseStringWithSet('abracadabra', ['a', 'b', 'r', 'c', 'd']) == 'rabracadabra'\n*/\nconst reverseStringWithSet = (str, set) => {\n  return str.split('').reverse().join('').split('').filter((c) => set.indexOf(c) === -1).join('');\n};\n\n/*\n  Given a string, you should return a new string where all the characters are\n  reversed, except for the characters that are in the given set (case\n  sensitive), except for the characters that are in the given set (case\n  insensitive).\n  Example:\n  reverseStringWithSetInsensitive('hello', ['h', 'e', 'l', 'l', 'o']) == 'olleh'\n  reverseStringWithSetInsensitive('abracadabra', ['a', 'b', 'r', 'c', 'd']) == 'rabracadabra'\n*/\nconst reverseStringWithSetInsensitive = (str, set) => {\n  return str.split('').reverse().join('').split('').filter((c) => set.indexOf(c) === -1 && c.toUpperCase()!== c).join('');\n};\n\n/*\n  Given a string, you should return a new string where all the characters are\n  reversed, except for the characters that are in the given set (case\n  sensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), except for the characters that are in the given set (case\n  insensitive), ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) return true;\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => true\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => true\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => true\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  if(aArr.length === 0 || bArr.length === 0) return false;\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bAr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eve", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  const romanNum = romanToInt(number);\n  const romanNumString = romanNum.toString();\n  const romanNumArray = romanNumString.split('');\n  const romanNumArrayLength = romanNumArray.length;\n  const romanNumArrayCopy = romanNumArray.slice();\n  const romanNumArrayCopyLength = romanNumArrayCopy.length;\n  let romanNumStringCopy = '';\n  let romanNumStringCopyLength = 0;\n  let romanNumStringCopyIndex = 0;\n  let romanNumStringCopyIndexLength = 0;\n  let romanNumStringCopyIndexValue = 0;\n  let romanNumStringCopyIndexValueLength = 0;\n  let romanNumStringCopyIndexValueValue = 0;\n  let romanNumStringCopyIndexValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValueValueValue = 0;\n  let romanNumStringCopyIndexValueValueValueLength = 0;\n  let romanNumStringCopyIndexValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const cb = c - b;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abbc = ab * bc;\n  const acbc = ac * bc;\n  const abbcd = abbc + acbc;\n  const acbcdd = acbc + abbc;\n  const abbcde = abbc - acbc;\n  const acbcdde = acbc - abbc;\n  const abbcdef = abbc - acbc - abbc + acbc;\n  const acbcddef = acbc - abbc - abbc + acbc + acbc;\n  return abbcde == acbcdde && abbcdef == acbcddef && abbcdef == acbcddef;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 2, 4) == true\n  rigHtAnGleTrIanGle(1, 3, 5) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const cb = c - b;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abbc = ab * bc;\n  const acbc = ac * bc;\n  const abbcd = abbc + acbc;\n  const acbcdd = acbc + abbc;\n  const abbcde = abbc - acbc;\n  const acbcdde = acbc - abbc;\n  const abbcdef = abbc - acbc - abbc + acbc;\n  const acbcddef = acbc - abbc - abbc + acbc + acbc;\n  return abbcde == acbcdde && abbcdef == acbcddef && abbcdef == acbcddef;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const cb = c - b;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abbc = ab * bc;\n  const acbc = ac * bc;\n  const abbcd = abbc + acbc;\n  const acbcdd = acbc + abbc;\n  const abbcde = abbc - acbc;\n  const acbcdde = acbc - abbc;\n  const abbcdef = abbc - acbc - abbc + acbc;\n  const acbcddef = acbc - abbc - abbc + acbc + acbc;\n  return abbcde == acbcdde && abbcdef == acbcddef && abbcdef == acbcddef;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const cb = c - b;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abbc = ab * bc;\n  const acbc = ac * bc;\n  const abbcd = abbc + acbc;\n  const acbcdd = acbc + abbc;\n  const abbcde = abbc - acbc;\n  const acbcdde = acbc - abbc;\n  const abbcdef = abbc - acbc - abbc + acbc;\n  const acbcddef = acbc - abbc - abbc + acbc + acbc;\n  return abbcde == acbcdde && abbcdef == acbcddef && abbcdef == acbcddef;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  const cb = c - b;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abbc = ab * bc;\n  const acbc = ac * bc;\n  const abbcd = abbc + acbc;\n  const acbcdd = acbc + abbc;\n  const abbcde = abbc - acbc;\n  const acbcdde = acbc - abbc;\n  const abbcdef = abbc - acbc - abbc + acbc;\n  const acbcddef = acbc - abbc - abbc + acbc + acbc;\n  return abbcde == acbcdde && abbcdef == acbcddef && abbcdef == acbcddef;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMin([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finDMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finDMin = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverage([\"name\", \"of\", \"string\"]) === \"string\"\n  finDAverage([\"name\", \"enam\", \"game\"]) === \"game\"\n  finDAverage([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finDAverage = (words) => {\n  let sum = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMin([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finDMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finDMin = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverage([\"name\", \"of\", \"string\"]) === \"string\"\n  finDAverage([\"name\", \"enam\", \"game\"]) === \"game\"\n  finDAverage([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finDAverage = (words) => {\n  let sum = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMin([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finDMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finDMin = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== word) {\n        word = words[i].charAt(j);\n        count = 1;\n      } else {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDAverage([\"name\", \"of", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueCharsCount++;\n    }\n  }\n  return uniqueCharsCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let uniqueCharsCount = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueChars", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid input');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid input');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid input');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid input');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '**') {\n      result **= operand;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  if (operatorLength < 1 || operandLength < 1) {\n    throw new Error('Invalid input');\n  }\n\n  let result = 0;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup(\"abca\") = \"\"\n  */\nconst solDup = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (newS.indexOf(s[i]) == -1) {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from the string.\n  If the string contains no duplicates, return an empty string.\n  The function should return the resulted string.\n  Examples\n  solDup(\"ab\") = \"b\"\n  solDup(\"aba\") = \"ba\"\n  solDup(\"abca\") = \"bca\"\n  solDup", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) return null;\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha1('Hello world') == '8da9c61ddc83d54d64c3f7afa9c60e49e'\n  */\nconst strIngTOSha1 = (text) => {\n  if (!text) return null;\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strIngTOSha256 = (text) => {\n  if (!text) return null;\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const evenDigits = str.split('')\n     .filter(x => x % 2 === 0)\n     .map(x => parseInt(x, 10));\n    arr.push(...evenDigits);\n  }\n  return arr;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerO = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const oddDigits = str.split('')\n     .filter(x => x % 2 === 1)\n     .map(x => parseInt(x, 10));\n    arr.push(...oddDigits);\n  }\n  return arr;\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSum = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumR = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reverse().reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumL = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumLR = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reverse().reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumLR = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumLRA = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reverse().reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumLRA = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reverse().reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumLRA = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const str = i.toString();\n    const digits = str.split('')\n     .map(x => parseInt(x, 10));\n    arr.push(...digits);\n  }\n  return arr.reverse().reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInte", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  // Your code here\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map(music => music.split('|'));\n  const music_array3 = music_array2.map(music => music.map(music => music.split('o')));\n  const music_array4 = music_array3.map(music => music.map(music => music.map(music => music.split(' '))))\n  const music_array5 = music_array4.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array6 = music_array5.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array7 = music_array6.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array8 = music_array7.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array9 = music_array8.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array10 = music_array9.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array11 = music_array10.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array12 = music_array11.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array13 = music_array12.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array14 = music_array13.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array15 = music_array14.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array16 = music_array15.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array17 = music_array16.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array18 = music_array17.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array19 = music_array18.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array20 = music_array19.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array21 = music_array20.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array22 = music_array21.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array23 = music_array22.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array24 = music_array23.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array25 = music_array24.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array26 = music_array25.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array27 = music_array26.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array28 = music_array27.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array29 = music_array28.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array30 = music_array29.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array31 = music_array30.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array32 = music_array31.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array33 = music_array32.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array34 = music_array33.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array35 = music_array34.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array36 = music_array35.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array37 = music_array36.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array38 = music_array37.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array39 = music_array38.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array40 = music_array39.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array41 = music_array40.map(music => music.map(music => music.map(music => music.map(music => music.split(' ')))));\n  const music_array42 = music_array41.map(music => music.map(music => music.map(music => music.map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLetTer('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLetTer = (letters) => {\n  const letterArray = letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErI = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErI(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truNcatENumbErIz(3.5)\n  '003'\n  */\nconst truNcatENumbErIz = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return '0' + integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closest1 = sortedNumbers[0];\n  const closest2 = sortedNumbers[1];\n  return [closest1, closest2];\n};\n\n/**\n * Given a number and a set of numbers, return the number that is closest to the given number in the set.\n * If the given number is in the set, the number itself is returned.\n * If the given number is not in the set, the number itself is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple numbers that are closest to the given number, the one with the smallest distance is returned.\n * If there are multiple number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const firstNumberIsSmaller = firstNumber < lastNumber;\n  const firstNumberIsBigger = firstNumber > lastNumber;\n  const firstNumberIsEven = firstNumber % 2 === 0;\n  const firstNumberIsOdd = firstNumber % 2!== 0;\n  const firstNumberIsPositive = firstNumber > 0;\n  const firstNumberIsNegative = firstNumber < 0;\n  const firstNumberIsNegativeOrEven = firstNumberIsNegative || firstNumberIsEven;\n  const firstNumberIsNegativeOrOdd = firstNumberIsNegative || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOdd = firstNumberIsNegativeOrEven || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositive = firstNumberIsNegativeOrEvenOrOdd && firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndNegative = firstNumberIsNegativeOrEvenOrOdd && firstNumberIsNegative;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrNegative = firstNumberIsNegativeOrEvenOrOddAndNegative || firstNumberIsNegative;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositive = firstNumberIsNegativeOrEvenOrOddAndPositive || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrNegativeOrEven = firstNumberIsNegativeOrEvenOrOddAndPositiveOrNegative || firstNumberIsEven;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrNegativeOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrNegative || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEven = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEven || firstNumberIsEven;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositive = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositive || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndNegative = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndNegative || firstNumberIsNegative;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegative = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegative || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEven = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEven || firstNumberIsEven;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositive = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositive || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndNegative = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndNegative || firstNumberIsNegative;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegative = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegative || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEven = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEven || firstNumberIsEven;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOdd = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOdd || firstNumberIsOdd;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositive = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositive || firstNumberIsPositive;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndNegative = firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndPositiveOrNegativeOrEvenOrOddAndNegative || firstNumberIsNegative;\n  const firstNumberIsNegativeOrEvenOrOddAndPositiveOrPositiveOrEvenOrOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for floats\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value) || Number.isFloat(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for strings\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  ['a', 'abc', 5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  ['abc', {}, []]\n  */\nconst filTerINtegeRs = (strs) => {\n  const result = [];\n  strs.forEach((str) => {\n    if (Number.isInteger(str) || Number.isFloat(str)) {\n      result.push(str);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [true, false, true]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2\n    } else {\n      length++\n    }\n  }\n  return length\n}\n\n/**\n * Returns true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abd')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length\n  return index >= 0 && string.indexOf(suffix, index) === index\n}\n\n/**\n * Returns true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abd')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.indexOf(prefix)\n  return index >= 0 && string.indexOf(prefix, index + prefix.length) === index\n}\n\n/**\n * Returns true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abd')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Returns true if given string contains given substring ignoring case\n * >>> containsIgnoreCase('abc', 'ab')\n  true\n  >>> containsIgnoreCase('abc', 'abd')\n  false\n  */\nconst containsIgnoreCase = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignores given prefix\n * >>> containsIgnoreCaseWithPrefix('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefix('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithPrefix = (string, substring, prefix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring ignoring case\n * and ignores given suffix\n * >>> containsIgnoreCaseWithSuffix('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithSuffix('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithSuffix = (string, substring, suffix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix\n * >>> containsIgnoreCaseWithPrefixAndSuffix('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefixAndSuffix('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithPrefixAndSuffix = (string, substring, prefix, suffix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given suffix\n * >>> containsIgnoreCaseWithSuffixAndPrefix('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithSuffixAndPrefix('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithSuffixAndPrefix = (string, substring, suffix, prefix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase = (string, substring, prefix, suffix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase = (string, substring, suffix, prefix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase = (string, substring, prefix, suffix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase = (string, substring, suffix, prefix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase = (string, substring, prefix, suffix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCaseWithSuffixAndPrefixAndIgnoreCase = (string, substring, suffix, prefix) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1 && string.toLowerCase().indexOf(suffix.toLowerCase())!== -1 && string.toLowerCase().indexOf(prefix.toLowerCase())!== -1\n}\n\n/**\n * Returns true if given string contains given substring\n * and ignores given prefix and suffix\n * >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  true\n  >>> containsIgnoreCaseWithPrefixAndSuffixAndIgnoreCase('abc', 'ab', 'abd')\n  false\n  */\nconst containsIgnoreCase", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let largest = n;\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n    if (divisor > n) {\n      divisor = n;\n    }\n    if (divisor > largest) {\n      largest = divisor;\n    }\n  }\n  return largest;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * and greater than n\n * >>> larGestdivisOr(15)\n * 5\n * >>> larGestdivisOr(16)\n * 8\n * >>> larGestdivisOr(17)\n * 10\n * >>> larGestdivisOr(18)\n * 12\n * >>> larGestdivisOr(19)\n * 14\n * >>> larGestdivisOr(20)\n * 16\n * >>> larGestdivisOr(21)\n * 18\n * >>> larGestdivisOr(22)\n * 20\n * >>> larGestdivisOr(23)\n * 22\n * >>> larGestdivisOr(24)\n * 24\n * >>> larGestdivisOr(25)\n * 25\n * >>> larGestdivisOr(26)\n * 26\n * >>> larGestdivisOr(27)\n * 27\n * >>> larGestdivisOr(28)\n * 28\n * >>> larGestdivisOr(29)\n * 29\n * >>> larGestdivisOr(30)\n * 30\n * >>> larGestdivisOr(31)\n * 31\n * >>> larGestdivisOr(32)\n * 32\n * >>> larGestdivisOr(33)\n * 33\n * >>> larGestdivisOr(34)\n * 34\n * >>> larGestdivisOr(35)\n * 35\n * >>> larGestdivisOr(36)\n * 36\n * >>> larGestdivisOr(37)\n * 37\n * >>> larGestdivisOr(38)\n * 38\n * >>> larGestdivisOr(39)\n * 39\n * >>> larGestdivisOr(40)\n * 40\n * >>> larGestdivisOr(41)\n * 41\n * >>> larGestdivisOr(42)\n * 42\n * >>> larGestdivisOr(43)\n * 43\n * >>> larGestdivisOr(44)\n * 44\n * >>> larGestdivisOr(45)\n * 45\n * >>> larGestdivisOr(46)\n * 46\n * >>> larGestdivisOr(47)\n * 47\n * >>> larGestdivisOr(48)\n * 48\n * >>> larGestdivisOr(49)\n * 49\n * >>> larGestdivisOr(50)\n * 50\n * >>> larGestdivisOr(51)\n * 51\n * >>> larGestdivisOr(52)\n * 52\n * >>> larGestdivisOr(53)\n * 53\n * >>> larGestdivisOr(54)\n * 54\n * >>> larGestdivisOr(55)\n * 55\n * >>> larGestdivisOr(56)\n * 56\n * >>> larGestdivisOr(57)\n * 57\n * >>> larGestdivisOr(58)\n * 58\n * >>> larGestdivisOr(59)\n * 59\n * >>> larGestdivisOr(60)\n * 60\n * >>> larGestdivisOr(61)\n * 61\n * >>> larGestdivisOr(62)\n * 62\n * >>> larGestdivisOr(63)\n * 63\n * >>> larGestdivisOr(64)\n * 64\n * >>> larGestdivisOr(65)\n * 65\n * >>> larGestdivisOr(66)\n * 66\n * >>> larGestdivisOr(67)\n * 67\n * >>> larGestdivisOr(68)\n * 68\n * >>> larGestdivisOr(69)\n * 69\n * >>> larGestdivisOr(70)\n * 70\n * >>> larGestdivisOr(71)\n * 71\n * >>> larGestdivisOr(72)\n * 72\n * >>> larGestdivisOr(73)\n * 73\n * >>> larGestdivisOr(74)\n * 74\n * >>> larGestdivisOr(75)\n * 75\n * >>> larGestdivisOr(76)\n * 76\n * >>> larGestdivisOr(77)\n * 77\n * >>> larGestdivisOr(78)\n * 78\n * >>> larGestdivisOr(79)\n * 79\n * >>> larGestdivisOr(80)\n * 80\n * >>> larGestdivisOr(81)\n * 81\n * >>> larGestdivisOr(82)\n * 82\n * >>> larGestdivisOr(83)\n * 83\n * >>> larGestdivisOr(84)\n * 84\n * >>> larGestdivisOr(85)\n * 85\n * >>> larGestdivisOr(86)\n * 86\n * >>> larGestdivisOr(87)\n * 87\n * >>> larGestdivisOr(88)\n * 88\n * >>> larGestdivisOr(89)\n * 89\n * >>> larGestdivisOr(90)\n * 90\n * >>> larGestdivisOr(91)\n * 91\n * >>> larGestdivisOr(92)\n * 92\n * >>> larGestdivisOr(93)\n * 93\n * >>> larGestdivisOr(94)\n * 94\n * >>> larGestdivisOr(95)\n * 95\n * >>> larGestdivisOr(96)\n * 96\n * >>> larGestdivisOr(97)\n * 97\n * >>> larGestdivisOr(98)\n * 98\n * >>> larGestdivisOr(99)\n * 99\n * >>> larGestdivisOr(100)\n * 100\n * >>> larGestdivisOr(101)\n * 101\n * >>> larGestdivisOr(102)\n * 102\n * >>> larGestdivisOr(103)\n * 103\n * >>> larGestdivisOr(104)\n * 104\n * >>> larGestdivisOr(105)\n * 105\n * >>> larGestdivisOr(106)\n * 106\n * >>> larGestdivisOr(107)\n * 107\n * >>> larGestdivisOr(108)\n * 108\n * >>> larGestdivisOr(109)\n * 109\n * >>> larGestdivisOr(110)\n * 110\n * >>> larGestdivisOr(111)\n * 111\n * >>> larGestdivisOr(112)\n * 112\n * >>> larGestdivisOr(113)\n * 113\n * >>> larGestdivisOr(114)\n * 114\n * >>> larGestdivisOr(115)\n * 115\n * >>> larGestdivisOr(116)\n * 116\n * >>> larGestdivis", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facTori = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = n / i;\n    }\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZ = (n) => {\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factorization.push(i);\n      n = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteL([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteL = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteE([1, 3, 2])\n  [1, 3]\n  */\nconst remOveDUplicAteE = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.includes(i)) {\n      result.push", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasE('HELLO')\n  'hELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasL('hello')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasL('hello')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/* Given a string, flip all lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasU = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCasU('HELLO')\n  'HELLO'\n  */\nconst fliPCasL = (string) => {\n  return string.toUpperCase().replace(/[A-Z", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str\n  }, '')\n}\n\n/* Return true if string contains only alphabetic characters, false otherwise\n  >>> isAlphaOnly('a')\n  true\n  >>> isAlphaOnly('ab')\n  false\n  */\nconst isAlphaOnly = (str) => {\n  return /^[a-zA-Z]+$/.test(str)\n}\n\n/* Return true if string contains only numeric characters, false otherwise\n  >>> isNumericOnly('a')\n  true\n  >>> isNumericOnly('ab')\n  false\n  */\nconst isNumericOnly = (str) => {\n  return /^[0-9]+$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters, false otherwise\n  >>> isAlphanumericOnly('a')\n  true\n  >>> isAlphanumericOnly('ab')\n  false\n  */\nconst isAlphanumericOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers, false otherwise\n  >>> isAlphanumericOrNumericOnly('a')\n  true\n  >>> isAlphanumericOrNumericOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str) || /^\\s$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces or dashes, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str) || /^\\s$/.test(str) || /^-$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces or dashes or spaces, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str) || /^\\s$/.test(str) || /^-$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces or dashes or spaces or dashes, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str) || /^\\s$/.test(str) || /^-$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces or dashes or spaces or dashes or spaces, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOrSpacesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOrSpacesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOrSpacesOnly = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str) || /^[0-9]+$/.test(str) || /^_+$/.test(str) || /^-$/.test(str) || /^\\s$/.test(str) || /^-$/.test(str)\n}\n\n/* Return true if string contains only alphanumeric characters or numbers or underscores or dashes or spaces or dashes or spaces or dashes or spaces or dashes, false otherwise\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOrSpacesOrDashesOnly('a')\n  true\n  >>> isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashesOrSpacesOrDashesOnly('ab')\n  false\n  */\nconst isAlphanumericOrNumericOrUnderscoreOrDashesOrSpacesOrDashesOrSpacesOrDashes", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const filteredStrings = strings.filter(s => s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filTerBYPrefIxIx = (strings, suffix) => {\n  const filteredStrings = strings.filter(s => s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxSub = (strings, substring) => {\n  const filteredStrings = strings.filter(s => s.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSub = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotPref = (strings, prefix) => {\n  const filteredStrings = strings.filter(s =>!s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSuf = (strings, suffix) => {\n  const filteredStrings = strings.filter(s =>!s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSub = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotPref = (strings, prefix) => {\n  const filteredStrings = strings.filter(s =>!s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSuf = (strings, suffix) => {\n  const filteredStrings = strings.filter(s =>!s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSub = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotPref = (strings, prefix) => {\n  const filteredStrings = strings.filter(s =>!s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSuf = (strings, suffix) => {\n  const filteredStrings = strings.filter(s =>!s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSub = (strings, substring) => {\n  const filteredStrings = strings.filter(s =>!s.includes(substring));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotPref = (strings, prefix) => {\n  const filteredStrings = strings.filter(s =>!s.startsWith(prefix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYPrefIxNotSuf = (strings, suffix) => {\n  const filteredStrings = strings.filter(s =>!s.endsWith(suffix));\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  const balance = operations.reduce((acc, val) => acc + val, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getnegTive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getnegTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getnegTive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getnumTive([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getnumTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getnumTive = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getstrTive(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  >>> getstrTive(['a', 'b', 'c', 'd', 'e', 'f'])\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  */\nconst getstrTive = (l) => {\n  return l.filter((x) => typeof x ==='string');\n};\n\n/*Return only booleans in the list.\n  >>> getboolTive([true, false, true, true, false])\n  [true, false, true, true, false]\n  >>> getboolTive([false, false, false, false, true])\n  [false, false, false, false, true]\n  */\nconst getboolTive = (l) => {\n  return l.filter((x) => typeof x === 'boolean');\n};\n\n/*Return only objects in the list.\n  >>> getobjTive([{a: 1}, {b: 2}, {c: 3}, {d: 4}, {e: 5}, {f: 6}])\n  [{a: 1}, {b: 2}, {c: 3}, {d: 4}, {e: 5}, {f: 6}]\n  >>> getobjTive([{a: 1}, {b: 2}, {c: 3}, {d: 4}, {e: 5}, {f: 6}, {g: 7}, {h: 8}])\n  [{a: 1}, {b: 2}, {c: 3}, {d: 4}, {e: 5}, {f: 6}, {g: 7}, {h: 8}]\n  */\nconst getobjTive = (l) => {\n  return l.filter((x) => typeof x === 'object');\n};\n\n/*Return only arrays in the list.\n  >>> getarrTive([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  >>> getarrTive([[1, 2, 3], [4, 5, 6], [7, 8, 9], {a: 10, b: 11, c: 12, d: 13, e: 14, f: 15}])\n  [[1, 2, 3], [4, 5, 6], [7, 8, 9], [{a: 10, b: 11, c: 12, d: 13, e: 14, f: 15}]]\n  */\nconst getarrTive = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only empty arrays in the list.\n  >>> getarrTive([[], [], []])\n  [[], [], []]\n  >>> getarrTive([[], [], [], []])\n  [[], [], []]\n  */\nconst getarrTive = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getobjTive([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getobjTive([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getobjTive = (l) => {\n  return l.filter((x) => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getstrTive(['', ''])\n  ['', '']\n  >>> getstrTive(['', '', ''])\n  ['', '']\n  */\nconst getstrTive = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty booleans in the list.\n  >>> getboolTive([false, false, false, false, false])\n  [false, false, false, false, false]\n  >>> getboolTive([false, false, false, false, false, false])\n  [false, false, false, false, false]\n  */\nconst getboolTive = (l) => {\n  return l.filter((x) =>!x);\n};\n\n/*Return only empty numbers in the list.\n  >>> getnumTive([0, 0])\n  [0, 0]\n  >>> getnumTive([0, 0, 0])\n  [0, 0]\n  */\nconst getnumTive = (l) => {\n  return l.filter((x) => x === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getstrTive([])\n  []\n  >>> getstrTive([])\n  []\n  */\nconst getstrTive = (l) => {\n  return l.filter((x) => x === '');\n};\n\n/*Return only empty objects in the list.\n  >>> getobjTive([])\n  []\n  >>> getobjTive([])\n  []\n  */\nconst getobjTive = (l) => {\n  return l.filter((x) => x === {});\n};\n\n/*Return only empty arrays in the list.\n  >>> getarrTive([])\n  []\n  >>> getarrTive([])\n  []\n  */\nconst getarrTive = (l) => {\n  return l.filter((x) => x === []);\n};\n\n/*Return only empty strings in the list.\n  >>> getstrTive([])\n  []\n  >>> getstrTive([])\n  []\n  */\nconst getstrTive = (l) => {\n  return l.filter((x) => x === '');\n};\n\n/*Return only empty booleans in the list.\n  >>> getboolTive([])\n  []\n  >>> getboolTive([])\n  []\n  */\nconst getboolTive = (l) => {\n  return l.filter((x) => x === false);\n};\n\n/*Return only empty numbers in the list.\n  >>> getnumTive([])\n  []\n  >>> getnumTive([])\n  []\n  */\nconst getnumTive = (l) => {\n  return l.filter((x) => x === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getstrTive([])\n  []\n  >>> getstrTive([])\n  []\n  */\nconst getstrTive = (l) => {\n  return l.filter((x) => x === '');\n};\n\n/*Return only empty objects in the list.\n  >>> getobjTive([])\n  []\n  >>> getobjTive([])\n  []\n  */\nconst getobjTive = (l) => {\n  return l.filter((x) => x === {});\n};\n\n/*Return only empty arrays in the list.\n  >>> getarrTive([])\n  []\n  >>> getarrTive([])\n  []\n  */\nconst getarrTive = (l) => {\n  return l.filter((x) => x === []);\n};\n\n/*Return only empty strings in the list.\n  >>> getstrTive([])\n  []\n  >>> getstrTive([])\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return true\n  if (n % 2 == 0 || n % 3 == 0) return false\n  if (n % 5 == 0) return false\n  if (n % 7 == 0) return false\n  if (n % 11 == 0) return false\n  if (n % 13 == 0) return false\n  if (n % 17 == 0) return false\n  if (n % 19 == 0) return false\n  return true\n}\n\n/*Return true if a given number is even, and false otherwise.\n  >>> isEven(6)\n  false\n  >>> isEven(101)\n  true\n  >>> isEven(11)\n  true\n  >>> isEven(13441)\n  true\n  >>> isEven(61)\n  true\n  >>> isEven(4)\n  false\n  >>> isEven(1)\n  false\n  */\nconst isEven = (n) => {\n  if (n % 2 == 0) return true\n  return false\n}\n\n/*Return true if a given number is odd, and false otherwise.\n  >>> isOdd(6)\n  true\n  >>> isOdd(101)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(13441)\n  false\n  >>> isOdd(61)\n  true\n  >>> isOdd(4)\n  true\n  >>> isOdd(1)\n  true\n  */\nconst isOdd = (n) => {\n  if (n % 2 == 1) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 3, and false otherwise.\n  >>> isDivisibleBy3(6)\n  false\n  >>> isDivisibleBy3(101)\n  false\n  >>> isDivisibleBy3(11)\n  false\n  >>> isDivisibleBy3(13441)\n  false\n  >>> isDivisibleBy3(61)\n  false\n  >>> isDivisibleBy3(4)\n  false\n  >>> isDivisibleBy3(1)\n  false\n  */\nconst isDivisibleBy3 = (n) => {\n  if (n % 3 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 5, and false otherwise.\n  >>> isDivisibleBy5(6)\n  false\n  >>> isDivisibleBy5(101)\n  false\n  >>> isDivisibleBy5(11)\n  false\n  >>> isDivisibleBy5(13441)\n  false\n  >>> isDivisibleBy5(61)\n  false\n  >>> isDivisibleBy5(4)\n  false\n  >>> isDivisibleBy5(1)\n  false\n  */\nconst isDivisibleBy5 = (n) => {\n  if (n % 5 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 7, and false otherwise.\n  >>> isDivisibleBy7(6)\n  false\n  >>> isDivisibleBy7(101)\n  false\n  >>> isDivisibleBy7(11)\n  false\n  >>> isDivisibleBy7(13441)\n  false\n  >>> isDivisibleBy7(61)\n  false\n  >>> isDivisibleBy7(4)\n  false\n  >>> isDivisibleBy7(1)\n  false\n  */\nconst isDivisibleBy7 = (n) => {\n  if (n % 7 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 11, and false otherwise.\n  >>> isDivisibleBy11(6)\n  false\n  >>> isDivisibleBy11(101)\n  false\n  >>> isDivisibleBy11(11)\n  true\n  >>> isDivisibleBy11(13441)\n  true\n  >>> isDivisibleBy11(61)\n  true\n  >>> isDivisibleBy11(4)\n  true\n  >>> isDivisibleBy11(1)\n  true\n  */\nconst isDivisibleBy11 = (n) => {\n  if (n % 11 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 13, and false otherwise.\n  >>> isDivisibleBy13(6)\n  false\n  >>> isDivisibleBy13(101)\n  false\n  >>> isDivisibleBy13(11)\n  false\n  >>> isDivisibleBy13(13441)\n  true\n  >>> isDivisibleBy13(61)\n  true\n  >>> isDivisibleBy13(4)\n  true\n  >>> isDivisibleBy13(1)\n  true\n  */\nconst isDivisibleBy13 = (n) => {\n  if (n % 13 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 17, and false otherwise.\n  >>> isDivisibleBy17(6)\n  false\n  >>> isDivisibleBy17(101)\n  false\n  >>> isDivisibleBy17(11)\n  false\n  >>> isDivisibleBy17(13441)\n  false\n  >>> isDivisibleBy17(61)\n  false\n  >>> isDivisibleBy17(4)\n  false\n  >>> isDivisibleBy17(1)\n  false\n  */\nconst isDivisibleBy17 = (n) => {\n  if (n % 17 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 19, and false otherwise.\n  >>> isDivisibleBy19(6)\n  false\n  >>> isDivisibleBy19(101)\n  false\n  >>> isDivisibleBy19(11)\n  false\n  >>> isDivisibleBy19(13441)\n  false\n  >>> isDivisibleBy19(61)\n  false\n  >>> isDivisibleBy19(4)\n  false\n  >>> isDivisibleBy19(1)\n  false\n  */\nconst isDivisibleBy19 = (n) => {\n  if (n % 19 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 23, and false otherwise.\n  >>> isDivisibleBy23(6)\n  false\n  >>> isDivisibleBy23(101)\n  false\n  >>> isDivisibleBy23(11)\n  false\n  >>> isDivisibleBy23(13441)\n  false\n  >>> isDivisibleBy23(61)\n  false\n  >>> isDivisibleBy23(4)\n  false\n  >>> isDivisibleBy23(1)\n  false\n  */\nconst isDivisibleBy23 = (n) => {\n  if (n % 23 == 0) return true\n  return false\n}\n\n/*Return true if a given number is divisible by 29, and false otherwise.\n  >>> isDivisibleBy29(6)\n  false\n  >>> isDivisibleBy29(101)\n  false\n  >>> isDivisibleBy29(11)\n  false\n  >>> isDivisibleBy29(13441)\n  false\n  >>> isDivisibleBy29(61)\n  false\n  >>> isDivisibleBy29(4)\n  false\n  >>> isDivisibleBy29(1)\n  false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "<|endoftext|>/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x0 = xs[0];\n  const x1 = xs[1];\n  const x2 = xs[2];\n  const x3 = xs[3];\n  const x4 = xs[4];\n  const x5 = xs[5];\n  const x6 = xs[6];\n  const x7 = xs[7];\n  const x8 = xs[8];\n  const x9 = xs[9];\n  const x10 = xs[10];\n  const x11 = xs[11];\n  const x12 = xs[12];\n  const x13 = xs[13];\n  const x14 = xs[14];\n  const x15 = xs[15];\n  const x16 = xs[16];\n  const x17 = xs[17];\n  const x18 = xs[18];\n  const x19 = xs[19];\n  const x20 = xs[20];\n  const x21 = xs[21];\n  const x22 = xs[22];\n  const x23 = xs[23];\n  const x24 = xs[24];\n  const x25 = xs[25];\n  const x26 = xs[26];\n  const x27 = xs[27];\n  const x28 = xs[28];\n  const x29 = xs[29];\n  const x30 = xs[30];\n  const x31 = xs[31];\n  const x32 = xs[32];\n  const x33 = xs[33];\n  const x34 = xs[34];\n  const x35 = xs[35];\n  const x36 = xs[36];\n  const x37 = xs[37];\n  const x38 = xs[38];\n  const x39 = xs[39];\n  const x40 = xs[40];\n  const x41 = xs[41];\n  const x42 = xs[42];\n  const x43 = xs[43];\n  const x44 = xs[44];\n  const x45 = xs[45];\n  const x46 = xs[46];\n  const x47 = xs[47];\n  const x48 = xs[48];\n  const x49 = xs[49];\n  const x50 = xs[50];\n  const x51 = xs[51];\n  const x52 = xs[52];\n  const x53 = xs[53];\n  const x54 = xs[54];\n  const x55 = xs[55];\n  const x56 = xs[56];\n  const x57 = xs[57];\n  const x58 = xs[58];\n  const x59 = xs[59];\n  const x60 = xs[60];\n  const x61 = xs[61];\n  const x62 = xs[62];\n  const x63 = xs[63];\n  const x64 = xs[64];\n  const x65 = xs[65];\n  const x66 = xs[66];\n  const x67 = xs[67];\n  const x68 = xs[68];\n  const x69 = xs[69];\n  const x70 = xs[70];\n  const x71 = xs[71];\n  const x72 = xs[72];\n  const x73 = xs[73];\n  const x74 = xs[74];\n  const x75 = xs[75];\n  const x76 = xs[76];\n  const x77 = xs[77];\n  const x78 = xs[78];\n  const x79 = xs[79];\n  const x80 = xs[80];\n  const x81 = xs[81];\n  const x82 = xs[82];\n  const x83 = xs[83];\n  const x84 = xs[84];\n  const x85 = xs[85];\n  const x86 = xs[86];\n  const x87 = xs[87];\n  const x88 = xs[88];\n  const x89 = xs[89];\n  const x90 = xs[90];\n  const x91 = xs[91];\n  const x92 = xs[92];\n  const x93 = xs[93];\n  const x94 = xs[94];\n  const x95 = xs[95];\n  const x96 = xs[96];\n  const x97 = xs[97];\n  const x98 = xs[98];\n  const x99 = xs[99];\n  const x100 = xs[100];\n  const x101 = xs[101];\n  const x102 = xs[102];\n  const x103 = xs[103];\n  const x104 = xs[104];\n  const x105 = xs[105];\n  const x106 = xs[106];\n  const x107 = xs[107];\n  const x108 = xs[108];\n  const x109 = xs[109];\n  const x110 = xs[110];\n  const x111 = xs[111];\n  const x112 = xs[112];\n  const x113 = xs[113];\n  const x114 = xs[114];\n  const x115 = xs[115];\n  const x116 = xs[116];\n  const x117 = xs[117];\n  const x118 = xs[118];\n  const x119 = xs[119];\n  const x120 = xs[120];\n  const x121 = xs[121];\n  const x122 = xs[122];\n  const x123 = xs[123];\n  const x124 = xs[124];\n  const x125 = xs[125];\n  const x126 = xs[126];\n  const x127 = xs[127];\n  const x128 = xs[128];\n  const x129 = xs[129];\n  const x130 = xs[130];\n  const x131 = xs[131];\n  const x132 = xs[132];\n  const x133 = xs[133];\n  const x134 = xs[134];\n  const x135 = xs[135];\n  const x136 = xs[136];\n  const x137 = xs[137];\n  const x138 = xs[138];\n  const x139 = xs[139];\n  const x140 = xs[140];\n  const x141 = xs[141];\n  const x142 = xs[142];\n  const x143 = xs[143];\n  const x144 = xs[144];\n  const x145 = xs[145];\n  const x146 = xs[146];\n  const x147 = xs[147];\n  const x148 = xs[148];\n  const x149 = xs[149];\n  const x150 = xs[150];\n  const x151 = xs[151];\n  const x152 = xs[152];\n  const x153 = xs[153];\n  const x154 = xs[154];\n  const x155 = xs[155];\n  const x156 = xs[156];\n  const x157 = xs[157];\n  const x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd2 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd3 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd4 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd5 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd6 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd7 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd8 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd9 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd10 = (l) => {\n  const l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l1[i];\n    }\n  }\n  return l1;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "<|endoftext|>/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  return l.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return uniQue(l).filter((v, i, a) => a.indexOf(v) === i)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniQue(l).sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -26\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumEntLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -26\n  */\nconst sumEntLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  26\n  */\nconst sumEntLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumEntGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumEntGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumEntEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number or less than the given number.\n  >>> sumEntGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num || l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number or greater than the given number.\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num || l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number or greater than the given number or less than the given number.\n  >>> sumEntEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num || l[i] > num || l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number or less than the given number or equal to the given number.\n  >>> sumEntGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num || l[i] <= num || l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number or greater than the given number or equal to the given number.\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num || l[i] < num || l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number or greater than the given number or less than the given number or equal to the given number.\n  >>> sumEntEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  >>> sumEntLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  26\n  */\nconst sumEntEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num || l[i] > num || l[i] < num || l[i] === num) {\n      sum += l[i];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0 || n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => a - b);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indici", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic11 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic12 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic13 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "<|endoftext|>/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB2 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB2(1)\n  2\n  >>> priMeFiB2(2)\n  3\n  >>> priMeFiB2(3)\n  5\n  >>> priMeFiB2(4)\n  13\n  >>> priMeFiB2(5)\n  89\n  */\nconst priMeFiB2 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB3 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB3(1)\n  2\n  >>> priMeFiB3(2)\n  3\n  >>> priMeFiB3(3)\n  5\n  >>> priMeFiB3(4)\n  13\n  >>> priMeFiB3(5)\n  89\n  */\nconst priMeFiB3 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB4 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB4(1)\n  2\n  >>> priMeFiB4(2)\n  3\n  >>> priMeFiB4(3)\n  5\n  >>> priMeFiB4(4)\n  13\n  >>> priMeFiB4(5)\n  89\n  */\nconst priMeFiB4 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB5 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB5(1)\n  2\n  >>> priMeFiB5(2)\n  3\n  >>> priMeFiB5(3)\n  5\n  >>> priMeFiB5(4)\n  13\n  >>> priMeFiB5(5)\n  89\n  */\nconst priMeFiB5 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB6 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB6(1)\n  2\n  >>> priMeFiB6(2)\n  3\n  >>> priMeFiB6(3)\n  5\n  >>> priMeFiB6(4)\n  13\n  >>> priMeFiB6(5)\n  89\n  */\nconst priMeFiB6 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB7 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB7(1)\n  2\n  >>> priMeFiB7(2)\n  3\n  >>> priMeFiB7(3)\n  5\n  >>> priMeFiB7(4)\n  13\n  >>> priMeFiB7(5)\n  89\n  */\nconst priMeFiB7 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB8 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB8(1)\n  2\n  >>> priMeFiB8(2)\n  3\n  >>> priMeFiB8(3)\n  5\n  >>> priMeFiB8(4)\n  13\n  >>> priMeFiB8(5)\n  89\n  */\nconst priMeFiB8 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB9 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB9(1)\n  2\n  >>> priMeFiB9(2)\n  3\n  >>> priMeFiB9(3)\n  5\n  >>> priMeFiB9(4)\n  13\n  >>> priMeFiB9(5)\n  89\n  */\nconst priMeFiB9 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB10 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB10(1)\n  2\n  >>> priMeFiB10(2)\n  3\n  >>> priMeFiB10(3)\n  5\n  >>> priMeFiB10(4)\n  13\n  >>> priMeFiB10(5)\n  89\n  */\nconst priMeFiB10 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB11 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB11(1)\n  2\n  >>> priMeFiB11(2)\n  3\n  >>> priMeFiB11(3)\n  5\n  >>> priMeFiB11(4)\n  13\n  >>> priMeFiB11(5)\n  89\n  */\nconst priMeFiB11 = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\n/*\n  priMeFiB12 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB12(1)\n  2\n  >>> priMeFiB12(2)\n  3\n  >>> priMeFiB12(3)\n  5\n  >>> priMeFiB12(4)\n  13\n  >>> priMeFiB12(5)\n  89\n  */\nconst priMeFiB12 = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => {\n    const diff = value - meanValue;\n    return sum + Math.abs(diff);\n  }, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const meanValue = numbers.reduce((sum, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "<|endoftext|>/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSioN[i].collide(carsSioN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsN[i].collide(carsN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolli = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].collide(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSioN[i].collide(carsSioN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsN[i].collide(carsN[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRLisT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRLisT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1\n  }\n  return r\n}\n\n/*Return list with elements decremented by 1.\n  >>> decRListT([1, 2, 3])\n  [1, 2, 2]\n  >>> decRListT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRListT = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1\n  }\n  return r\n}\n\n/*Return list with elements incremented by 1.\n  >>> incRListT([1, 2, 3])\n  [2, 3, 4]\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "<|endoftext|>/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRoRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRoRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRoRoRoRoRoRoRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(x % base)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str = ''\n  let i = 0\n  while (i < base) {\n    str += String.fromCharCode(Math.pow(base, i) * x)\n    x = Math.floor(x / base)\n    i++\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using radix base.\n  >>> chaNgeRBase(8, 3)\n  '22'\n  >>> chaNgeRBase(8, 2)\n  '1000'\n  >>> chaNgeRBase(7, 2)\n  '111'\n  */\nconst chaNgeRBase = (x, base) => {\n  let str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  const s = Math.sqrt(a * a + h * h);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (s, h) => {\n  const a = Math.sqrt(s * s);\n  return Math.acos(a / s) * 180 / Math.PI;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  if (n <= 2) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// TESTS\n\n// Test the fib4 function\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\nconsole.log(fib4(8));\nconsole.log(fib4(9));\nconsole.log(fib4(10));\nconsole.log(fib4(11));\nconsole.log(fib4(12));\nconsole.log(fib4(13));\nconsole.log(fib4(14));\nconsole.log(fib4(15));\nconsole.log(fib4(16));\nconsole.log(fib4(17));\nconsole.log(fib4(18));\nconsole.log(fib4(19));\nconsole.log(fib4(20));\nconsole.log(fib4(21));\nconsole.log(fib4(22));\nconsole.log(fib4(23));\nconsole.log(fib4(24));\nconsole.log(fib4(25));\nconsole.log(fib4(26));\nconsole.log(fib4(27));\nconsole.log(fib4(28));\nconsole.log(fib4(29));\nconsole.log(fib4(30));\nconsole.log(fib4(31));\nconsole.log(fib4(32));\nconsole.log(fib4(33));\nconsole.log(fib4(34));\nconsole.log(fib4(35));\nconsole.log(fib4(36));\nconsole.log(fib4(37));\nconsole.log(fib4(38));\nconsole.log(fib4(39));\nconsole.log(fib4(40));\nconsole.log(fib4(41));\nconsole.log(fib4(42));\nconsole.log(fib4(43));\nconsole.log(fib4(44));\nconsole.log(fib4(45));\nconsole.log(fib4(46));\nconsole.log(fib4(47));\nconsole.log(fib4(48));\nconsole.log(fib4(49));\nconsole.log(fib4(50));\nconsole.log(fib4(51));\nconsole.log(fib4(52));\nconsole.log(fib4(53));\nconsole.log(fib4(54));\nconsole.log(fib4(55));\nconsole.log(fib4(56));\nconsole.log(fib4(57));\nconsole.log(fib4(58));\nconsole.log(fib4(59));\nconsole.log(fib4(60));\nconsole.log(fib4(61));\nconsole.log(fib4(62));\nconsole.log(fib4(63));\nconsole.log(fib4(64));\nconsole.log(fib4(65));\nconsole.log(fib4(66));\nconsole.log(fib4(67));\nconsole.log(fib4(68));\nconsole.log(fib4(69));\nconsole.log(fib4(70));\nconsole.log(fib4(71));\nconsole.log(fib4(72));\nconsole.log(fib4(73));\nconsole.log(fib4(74));\nconsole.log(fib4(75));\nconsole.log(fib4(76));\nconsole.log(fib4(77));\nconsole.log(fib4(78));\nconsole.log(fib4(79));\nconsole.log(fib4(80));\nconsole.log(fib4(81));\nconsole.log(fib4(82));\nconsole.log(fib4(83));\nconsole.log(fib4(84));\nconsole.log(fib4(85));\nconsole.log(fib4(86));\nconsole.log(fib4(87));\nconsole.log(fib4(88));\nconsole.log(fib4(89));\nconsole.log(fib4(90));\nconsole.log(fib4(91));\nconsole.log(fib4(92));\nconsole.log(fib4(93));\nconsole.log(fib4(94));\nconsole.log(fib4(95));\nconsole.log(fib4(96));\nconsole.log(fib4(97));\nconsole.log(fib4(98));\nconsole.log(fib4(99));\nconsole.log(fib4(100));\nconsole.log(fib4(101));\nconsole.log(fib4(102));\nconsole.log(fib4(103));\nconsole.log(fib4(104));\nconsole.log(fib4(105));\nconsole.log(fib4(106));\nconsole.log(fib4(107));\nconsole.log(fib4(108));\nconsole.log(fib4(109));\nconsole.log(fib4(110));\nconsole.log(fib4(111));\nconsole.log(fib4(112));\nconsole.log(fib4(113));\nconsole.log(fib4(114));\nconsole.log(fib4(115));\nconsole.log(fib4(116));\nconsole.log(fib4(117));\nconsole.log(fib4(118));\nconsole.log(fib4(119));\nconsole.log(fib4(120));\nconsole.log(fib4(121));\nconsole.log(fib4(122));\nconsole.log(fib4(123));\nconsole.log(fib4(124));\nconsole.log(fib4(125));\nconsole.log(fib4(126));\nconsole.log(fib4(127));\nconsole.log(fib4(128));\nconsole.log(fib4(129));\nconsole.log(fib4(130));\nconsole.log(fib4(131));\nconsole.log(fib4(132));\nconsole.log(fib4(133));\nconsole.log(fib4(134));\nconsole.log(fib4(135));\nconsole.log(fib4(136));\nconsole.log(fib4(137));\nconsole.log(fib4(138));\nconsole.log(fib4(139));\nconsole.log(fib4(140));\nconsole.log(fib4(141));\nconsole.log(fib4(142));\nconsole.log(fib4(143));\nconsole.log(fib4(144));\nconsole.log(fib4(145));\nconsole.log(fib4(146));\nconsole.log(fib4(147));\nconsole.log(fib4(148));\nconsole.log(fib4(149));\nconsole.log(fib4(150));\nconsole.log(fib4(151));\nconsole.log(fib4(152));\nconsole.log(fib4(153));\nconsole.log(fib4(154));\nconsole.log(fib4(155));\nconsole.log(fib4(156));\nconsole.log(fib4(157));\nconsole.log(fib4(158));\nconsole.log(fib4(159));\nconsole.log(fib4(160));\nconsole.log(fib4(161));\nconsole.log(fib4(162));\nconsole.log(fib4(163));\nconsole.log(fib4(164));\nconsole.log(fib4(165));\nconsole.log(fib4(166));\nconsole.log(fib4(167));\nconsole.log(fib4(168));\nconsole.log(fib4(169));\nconsole.log(fib4(170));\nconsole.log(fib4(171));\nconsole.log(fib4(172));\nconsole.log(fib4(173));\nconsole.log(fib4(174));\nconsole.log(fib4(175));\nconsole.log(fib4(176));\nconsole.log(fib4(177));\nconsole.log(fib4(178));\nconsole.log(fib4(179));\nconsole.log(fib4(180));\nconsole.log(fib4(181));\nconsole.log(fib4(182));\nconsole.log(fib4(183));\nconsole.log(fib4(184));\nconsole.log(fib4(185));\nconsole.log(fib4(186));\nconsole.log(fib4(187));\nconsole.log(fib4(188));\nconsole.log(fib4(189));\nconsole.log(fib4(190));\nconsole.log(fib4(191));\nconsole.log(fib4(192));\nconsole.log(fib4(193));\nconsole.log(fib4(194));\nconsole.log(fib4(195));\nconsole.log(fib4(196));\nconsole.log(fib4(197));\nconsole.log(fib4(198));\nconsole.log(fib4(199));\nconsole.log(fib4(200));\nconsole.log(fib4(201));\nconsole.log(fib4(202));\nconsole.log(fib4(203));\nconsole.log(fib4(204));\nconsole.log(fib4(205));\nconsole.log(fib4(206));\nconsole.log(fib4(207));\nconsole.log(fib4(208));\nconsole.log(fib4(209));\nconsole.log(fib4(210));\nconsole.log(fib4(211));\nconsole.log(fib4(212));\nconsole.log(fib4(213));\nconsole.log(fib4(214));\nconsole.log(fib4(215));\nconsole.log(fib4(216));\nconsole.log(fib4(217));\nconsole.log(fib4(218));\nconsole.log(fib4(219));\nconsole.log(fib4(220));\nconsole.log(fib4(221));\nconsole.log(fib4(222));\nconsole.log(fib4(223));\nconsole.log(fib4(224));\nconsole.log(fib4(225));\nconsole.log(fib4(226));\nconsole.log(fib4(227));\nconsole.log(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "<|endoftext|>/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[l.length - 1]) / 2;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    if (item > maxCount) {\n      maxCount = item;\n      maxItem = i;\n    }\n  }\n  return maxItem;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquares = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  -60\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list l.\n  >>> sumOf([3, 1, 2, 4, 5])\n  15\n  >>> sumOf([-10, 4, 6, 1000, 10, 20])\n  -60\n  */\nconst sumOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquaresOf = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of squares of elements in the list l.\n  >>> sumOfSquaresOf([3, 1, 2, 4, 5])\n  25\n  >>> sumOfSquaresOf([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .toLowerCase()\n   .split('')", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * p) % p;\n  }\n  return res;\n};\n\n/*\n  >>> modPow(7, 11, 7)\n  1\n  >>> modPow(7, 11, 9)\n  7\n  >>> modPow(7, 11, 10)\n  1\n  >>> modPow(7, 11, 11)\n  1\n  >>> modPow(7, 11, 12)\n  1\n  >>> modPow(7, 11, 13)\n  1\n  >>> modPow(7, 11, 14)\n  1\n  >>> modPow(7, 11, 15)\n  1\n  >>> modPow(7, 11, 16)\n  1\n  >>> modPow(7, 11, 17)\n  1\n  >>> modPow(7, 11, 18)\n  1\n  >>> modPow(7, 11, 19)\n  1\n  >>> modPow(7, 11, 20)\n  1\n  >>> modPow(7, 11, 21)\n  1\n  >>> modPow(7, 11, 22)\n  1\n  >>> modPow(7, 11, 23)\n  1\n  >>> modPow(7, 11, 24)\n  1\n  >>> modPow(7, 11, 25)\n  1\n  >>> modPow(7, 11, 26)\n  1\n  >>> modPow(7, 11, 27)\n  1\n  >>> modPow(7, 11, 28)\n  1\n  >>> modPow(7, 11, 29)\n  1\n  >>> modPow(7, 11, 30)\n  1\n  >>> modPow(7, 11, 31)\n  1\n  >>> modPow(7, 11, 32)\n  1\n  >>> modPow(7, 11, 33)\n  1\n  >>> modPow(7, 11, 34)\n  1\n  >>> modPow(7, 11, 35)\n  1\n  >>> modPow(7, 11, 36)\n  1\n  >>> modPow(7, 11, 37)\n  1\n  >>> modPow(7, 11, 38)\n  1\n  >>> modPow(7, 11, 39)\n  1\n  >>> modPow(7, 11, 40)\n  1\n  >>> modPow(7, 11, 41)\n  1\n  >>> modPow(7, 11, 42)\n  1\n  >>> modPow(7, 11, 43)\n  1\n  >>> modPow(7, 11, 44)\n  1\n  >>> modPow(7, 11, 45)\n  1\n  >>> modPow(7, 11, 46)\n  1\n  >>> modPow(7, 11, 47)\n  1\n  >>> modPow(7, 11, 48)\n  1\n  >>> modPow(7, 11, 49)\n  1\n  >>> modPow(7, 11, 50)\n  1\n  >>> modPow(7, 11, 51)\n  1\n  >>> modPow(7, 11, 52)\n  1\n  >>> modPow(7, 11, 53)\n  1\n  >>> modPow(7, 11, 54)\n  1\n  >>> modPow(7, 11, 55)\n  1\n  >>> modPow(7, 11, 56)\n  1\n  >>> modPow(7, 11, 57)\n  1\n  >>> modPow(7, 11, 58)\n  1\n  >>> modPow(7, 11, 59)\n  1\n  >>> modPow(7, 11, 60)\n  1\n  >>> modPow(7, 11, 61)\n  1\n  >>> modPow(7, 11, 62)\n  1\n  >>> modPow(7, 11, 63)\n  1\n  >>> modPow(7, 11, 64)\n  1\n  >>> modPow(7, 11, 65)\n  1\n  >>> modPow(7, 11, 66)\n  1\n  >>> modPow(7, 11, 67)\n  1\n  >>> modPow(7, 11, 68)\n  1\n  >>> modPow(7, 11, 69)\n  1\n  >>> modPow(7, 11, 70)\n  1\n  >>> modPow(7, 11, 71)\n  1\n  >>> modPow(7, 11, 72)\n  1\n  >>> modPow(7, 11, 73)\n  1\n  >>> modPow(7, 11, 74)\n  1\n  >>> modPow(7, 11, 75)\n  1\n  >>> modPow(7, 11, 76)\n  1\n  >>> modPow(7, 11, 77)\n  1\n  >>> modPow(7, 11, 78)\n  1\n  >>> modPow(7, 11, 79)\n  1\n  >>> modPow(7, 11, 80)\n  1\n  >>> modPow(7, 11, 81)\n  1\n  >>> modPow(7, 11, 82)\n  1\n  >>> modPow(7, 11, 83)\n  1\n  >>> modPow(7, 11, 84)\n  1\n  >>> modPow(7, 11, 85)\n  1\n  >>> modPow(7, 11, 86)\n  1\n  >>> modPow(7, 11, 87)\n  1\n  >>> modPow(7, 11, 88)\n  1\n  >>> modPow(7, 11, 89)\n  1\n  >>> modPow(7, 11, 90)\n  1\n  >>> modPow(7, 11, 91)\n  1\n  >>> modPow(7, 11, 92)\n  1\n  >>> modPow(7, 11, 93)\n  1\n  >>> modPow(7, 11, 94)\n  1\n  >>> modPow(7, 11, 95)\n  1\n  >>> modPow(7, 11, 96)\n  1\n  >>> modPow(7, 11, 97)\n  1\n  >>> modPow(7, 11, 98)\n  1\n  >>> modPow(7, 11, 99)\n  1\n  >>> modPow(7, 11, 100)\n  1\n  >>> modPow(7, 11, 101)\n  1\n  >>> modPow(7, 11, 102)\n  1\n  >>> modPow(7, 11, 103)\n  1\n  >>> modPow(7, 11, 104)\n  1\n  >>> modPow(7, 11, 105)\n  1\n  >>> modPow(7, 11, 106)\n  1\n  >>> modPow(7, 11, 107)\n  1\n  >>> modPow(7, 11, 108)\n  1\n  >>> modPow(7, 11, 109)\n  1\n  >>> modPow(7, 11, 110)\n  1\n  >>> modPow(7, 11, 111)\n  1\n  >>> modPow(7, 11, 112)\n  1\n  >>> modPow(7, 11, 113)\n  1\n  >>> modPow(7, 11, 114)\n  1\n  >>> modPow(7, 11, 115)\n  1\n  >>> modPow(7, 11, 116)\n  1\n  >>> modPow(7, 11, 117)\n  1\n  >>> modPow(7, 11, 118)\n  1\n  >>> modPow(7, 11, 119)\n  1\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Remove all occurrences of an element from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAll = (list, element) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== element) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValue = (list, value) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== value) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i]) === -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues2 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues3 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i]) === -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues4 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues5 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i]) === -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues6 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues7 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i]) === -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues8 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues9 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i]) === -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues10 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues11 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues12 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  [1]\n  */\nconst removeAllValues13 = (list,...values) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (values.indexOf(list[i])!== -1) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of a value from a list\n  >>> removeAll([1, 2, 3, 1], 1)\n  [2, 3]\n  >>> removeAll([1, 2, 3, 1], 2)\n  [1, 2, 3]\n  >>> removeAll([1, 2, 3, 1], 3)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "<|endoftext|>/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels2 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels2('')\n  ''\n  >>> remOveVOwels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels2('abcdef')\n  'bcdf'\n  >>> remOveVOwels2('aaaaa')\n  ''\n  >>> remOveVOwels2('aaBAA')\n  'B'\n  >>> remOveVOwels2('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels2 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels3 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels3('')\n  ''\n  >>> remOveVOwels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels3('abcdef')\n  'bcdf'\n  >>> remOveVOwels3('aaaaa')\n  ''\n  >>> remOveVOwels3('aaBAA')\n  'B'\n  >>> remOveVOwels3('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels3 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels4 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels4('')\n  ''\n  >>> remOveVOwels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels4('abcdef')\n  'bcdf'\n  >>> remOveVOwels4('aaaaa')\n  ''\n  >>> remOveVOwels4('aaBAA')\n  'B'\n  >>> remOveVOwels4('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels4 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels5 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels5('')\n  ''\n  >>> remOveVOwels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels5('abcdef')\n  'bcdf'\n  >>> remOveVOwels5('aaaaa')\n  ''\n  >>> remOveVOwels5('aaBAA')\n  'B'\n  >>> remOveVOwels5('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels5 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels6 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels6('')\n  ''\n  >>> remOveVOwels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels6('abcdef')\n  'bcdf'\n  >>> remOveVOwels6('aaaaa')\n  ''\n  >>> remOveVOwels6('aaBAA')\n  'B'\n  >>> remOveVOwels6('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels6 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels7 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels7('')\n  ''\n  >>> remOveVOwels7(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels7('abcdef')\n  'bcdf'\n  >>> remOveVOwels7('aaaaa')\n  ''\n  >>> remOveVOwels7('aaBAA')\n  'B'\n  >>> remOveVOwels7('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels7 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels8 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels8('')\n  ''\n  >>> remOveVOwels8(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels8('abcdef')\n  'bcdf'\n  >>> remOveVOwels8('aaaaa')\n  ''\n  >>> remOveVOwels8('aaBAA')\n  'B'\n  >>> remOveVOwels8('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels8 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels9 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels9('')\n  ''\n  >>> remOveVOwels9(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels9('abcdef')\n  'bcdf'\n  >>> remOveVOwels9('aaaaa')\n  ''\n  >>> remOveVOwels9('aaBAA')\n  'B'\n  >>> remOveVOwels9('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels9 = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVOwels10 returns a function that takes string and returns string without vowels.\n  >>> remOveVOwels10('')\n  ''\n  >>> remOveVOwels10(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels10('abcdef')\n  'bcdf'\n  >>> remOveVOwels10('aaaaa')\n  ''\n  >>> remOveVOwels10('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belOwThReshoUd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoUd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoUd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLd([1, 2, 4, 10], 100, 5)\n  true\n  >>> belOwThReshoUdReshoLd([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst belOwThReshoUdReshoLd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUd([1, 2, 4, 10], 100, 5)\n  true\n  >>> belOwThReshoUdReshoUd([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst belOwThReshoUdReshoUd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > u || l[i] > v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] < v) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 10)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 10)\n  false\n  */\nconst belOwThReshoUdReshoL", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the reciprocal of number x\n  >>> reciprocal(-3)\n  -1\n  >>> reciprocal(3)\n  1\n  */\nconst reciprocal = x => {\n  return 1 / x;\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -2\n  >>> floor(3.5)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -1\n  >>> ceil(3.5)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> truncate(-3)\n  -3\n  >>> truncate(3.5)\n  3\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-3)\n  -Infinity\n  >>> log(3)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(-3)\n  -Infinity\n  >>> log10(3)\n  0\n  */\nconst log10 = x => {\n  return Math.log10(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(-3)\n  -Infinity\n  >>> log2(3)\n  0\n  */\nconst log2 = x => {\n  return Math.log2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> log3(-3)\n  -Infinity\n  >>> log3(3)\n  0\n  */\nconst log3 = x => {\n  return Math.log3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logb(-3)\n  -Infinity\n  >>> logb(3)\n  0\n  */\nconst logb = x => {\n  return Math.logb(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logb2(-3)\n  -Infinity\n  >>> logb2(3)\n  0\n  */\nconst logb2 = x => {\n  return Math.logb2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> logb3(-3)\n  -Infinity\n  >>> logb3(3)\n  0\n  */\nconst logb3 = x => {\n  return Math.logb3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logc(-3)\n  -Infinity\n  >>> logc(3)\n  0\n  */\nconst logc = x => {\n  return Math.logc(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logc2(-3)\n  -Infinity\n  >>> logc2(3)\n  0\n  */\nconst logc2 = x => {\n  return Math.logc2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> logc3(-3)\n  -Infinity\n  >>> logc3(3)\n  0\n  */\nconst logc3 = x => {\n  return Math.logc3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logd\n  -Infinity\n  >>> logd(3)\n  0\n  */\nconst logd = x => {\n  return Math.logd(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logd2\n  -Infinity\n  >>> logd2(3)\n  0\n  */\nconst logd2 = x => {\n  return Math.logd2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> logd3\n  -Infinity\n  >>> logd3(3)\n  0\n  */\nconst logd3 = x => {\n  return Math.logd3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> loge\n  -Infinity\n  >>> loge(3)\n  0\n  */\nconst loge = x => {\n  return Math.loge(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> loge2\n  -Infinity\n  >>> loge2(3)\n  0\n  */\nconst loge2 = x => {\n  return Math.loge2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> loge3\n  -Infinity\n  >>> loge3(3)\n  0\n  */\nconst loge3 = x => {\n  return Math.loge3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logf\n  -Infinity\n  >>> logf(3)\n  0\n  */\nconst logf = x => {\n  return Math.logf(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logf2\n  -Infinity\n  >>> logf2(3)\n  0\n  */\nconst logf2 = x => {\n  return Math.logf2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> logf3\n  -Infinity\n  >>> logf3(3)\n  0\n  */\nconst logf3 = x => {\n  return Math.logf3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logg\n  -Infinity\n  >>> logg(3)\n  0\n  */\nconst logg = x => {\n  return Math.logg(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logg2\n  -Infinity\n  >>> logg2(3)\n  0\n  */\nconst logg2 = x => {\n  return Math.logg2(x);\n};\n\n/*Get the base 3 logarithm of number x\n  >>> logg3\n  -Infinity\n  >>> logg3(3)\n  0\n  */\nconst logg3 = x => {\n  return Math.logg3(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> logg\n  -Infinity\n  >>> logg(3)\n  0\n  */\nconst logg = x => {\n  return Math.logg(x);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> logg2\n  -Infinity\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRsR = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRsRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRsRsR = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRsRsRs = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsRsRsRsR = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  4\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  const openingBracketsCountEti = openingBracketsCount - closingBracketsCount;\n  return openingBracketsCountEti === 0;\n};\n\n/**\n * Returns true if the given string is a valid rectangle bracket expression.\n *\n * A valid rectangle bracket expression has exactly one opening bracket\n * and exactly one closing bracket.\n *\n * >>> corRectbrackEtiNg(\"()\")\n * true\n * >>> corRectbrackEtiNg(\"()()\")\n * true\n * >>> corRectbrackEtiNg(\"(())\")\n * true\n * >>> corRectbrackEtiNg(\"(()())\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()()()()()()()()()()\")\n * true\n * >>> corRectbrackEtiNg(\"(()()())()()()()()()", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "<|endoftext|>/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "<|endoftext|>/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = l1.reduce((acc, cur) => {\n    const index = l2.indexOf(cur);\n    if (index!== -1) {\n      acc.push(cur);\n      l2.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  return com;\n};\n\n/*Return sorted ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTau = (n) => {\n  let smallestPrimeFactor = 1\n  let smallestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (smallestPrimeFactorFound) {\n        smallestPrimeFactor = i\n        break\n      } else {\n        smallestPrimeFactorFound = true\n      }\n    }\n  }\n  return smallestPrimeFactor\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTau(13195)\n  29\n  >>> larGestprimefacTau(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let smallestPrimeFactor = 1\n  let smallestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (smallestPrimeFactorFound) {\n        smallestPrimeFactor = i\n        break\n      } else {\n        smallestPrimeFactorFound = true\n      }\n    }\n  }\n  return smallestPrimeFactor\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let smallestPrimeFactor = 1\n  let smallestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (smallestPrimeFactorFound) {\n        smallestPrimeFactor = i\n        break\n      } else {\n        smallestPrimeFactorFound = true\n      }\n    }\n  }\n  return smallestPrimeFactor\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let smallestPrimeFactor = 1\n  let smallestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (smallestPrimeFactorFound) {\n        smallestPrimeFactor = i\n        break\n      } else {\n        smallestPrimeFactorFound = true\n      }\n    }\n  }\n  return smallestPrimeFactor\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let smallestPrimeFactor = 1\n  let smallestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (smallestPrimeFactorFound) {\n        smallestPrimeFactor = i\n        break\n      } else {\n        smallestPrimeFactorFound = true\n      }\n    }\n  }\n  return smallestPrimeFactor\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTauTor(13195)\n  29\n  >>> larGestprimefacTauTor(2048)\n  2\n  */\nconst larGestprimefacTauTor = (n) => {\n  let largestPrimeFactor = 1\n  let largestPrimeFactorFound = false\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestPrimeFactorFound) {\n        largestPrimeFactor = i\n        break\n      } else {\n        largestPrimeFactorFound = true\n      }\n    }\n  }\n  return largestPrimeFactor\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larG", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  const parNeStedPAreNsMaxLevelLength = parNeStedPAreNsMaxLevel.toString().length;\n  const parNeStedPAreNsMaxLevelNesting = (parNeStedPAreNsMaxLevelLength - parNeStedPAreNsLength);\n  return parNeStedPAreNs.map(n => n.length).sort((a, b) => b - a);\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevel = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevel;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNesting = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevelNesting;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNestingLength = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevelNestingLength;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNestingLength = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevelNestingLength;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNestingLength = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevelNestingLength;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNestingLength = (paren_string) => {\n  const parNeStedPAreNs = paren_string.match(/[^()]+/g);\n  const parNeStedPAreNsLength = parNeStedPAreNs.length;\n  const parNeStedPAreNsMaxLevel = Math.max(...parNeStedPAreNs.map(n => n.length));\n  return parNeStedPAreNsMaxLevelNestingLength;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNsMaxLevelNestingLength = (paren_string) => {\n  const parNeStedPAreN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "<|endoftext|>/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.match(/[()]+/g);\n  const closingBrackets = brackets.match(/[)]+/g);\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> cor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve2 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve3 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve4 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve5 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve6 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve7 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve8 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve9 = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[0] * xs[0] + xs[1] * xs[1];\n  const result = [];\n  for (let i = 2; i < n; ++i) {\n    result.push(xs[i] * xs[0] + xs[i - 1] * xs[1]);\n  }\n  return [d === 0? 0 : result];\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels found in it.\n  >>> vowelCount(\"Hello World\")\n  2\n  >>> vowelCount(\"Hello World!\")\n  0\n  >>> vowelCount(\"Hello World!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount(\"Hello World!!!\")\n  1\n  >>> vowelCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "<|endoftext|>/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt2 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt2(\"abcde\")\n  2\n  >>> vowElsCOunt2(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt2 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt3 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt3(\"abcde\")\n  2\n  >>> vowElsCOunt3(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt3 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt4 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt4(\"abcde\")\n  2\n  >>> vowElsCOunt4(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt4 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt5 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt5(\"abcde\")\n  2\n  >>> vowElsCOunt5(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt5 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt6 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt6(\"abcde\")\n  2\n  >>> vowElsCOunt6(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt6 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt7 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt7(\"abcde\")\n  2\n  >>> vowElsCOunt7(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt7 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt8 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt8(\"abcde\")\n  2\n  >>> vowElsCOunt8(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt8 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt9 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt9(\"abcde\")\n  2\n  >>> vowElsCOunt9(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt9 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt10 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt10(\"abcde\")\n  2\n  >>> vowElsCOunt10(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let str = x.toString();\n  str = str.split('').reverse().join('');\n  str = str.split('').slice(shift, str.length).join('');\n  return str;\n};\n\n/*\n  >>> cirCulaRShifT(12, 0)\n  \"12\"\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  >>> cirCulaRShifT(12, 3)\n  \"21\"\n  >>> cirCulaRShifT(12, 4)\n  \"12\"\n  >>> cirCulaRShifT(12, 5)\n  \"21\"\n  >>> cirCulaRShifT(12, 6)\n  \"12\"\n  >>> cirCulaRShifT(12, 7)\n  \"21\"\n  >>> cirCulaRShifT(12, 8)\n  \"12\"\n  >>> cirCulaRShifT(12, 9)\n  \"21\"\n  >>> cirCulaRShifT(12, 10)\n  \"12\"\n  >>> cirCulaRShifT(12, 11)\n  \"21\"\n  >>> cirCulaRShifT(12, 12)\n  \"12\"\n  >>> cirCulaRShifT(12, 13)\n  \"21\"\n  >>> cirCulaRShifT(12, 14)\n  \"12\"\n  >>> cirCulaRShifT(12, 15)\n  \"21\"\n  >>> cirCulaRShifT(12, 16)\n  \"12\"\n  >>> cirCulaRShifT(12, 17)\n  \"21\"\n  >>> cirCulaRShifT(12, 18)\n  \"12\"\n  >>> cirCulaRShifT(12, 19)\n  \"21\"\n  >>> cirCulaRShifT(12, 20)\n  \"12\"\n  >>> cirCulaRShifT(12, 21)\n  \"21\"\n  >>> cirCulaRShifT(12, 22)\n  \"12\"\n  >>> cirCulaRShifT(12, 23)\n  \"21\"\n  >>> cirCulaRShifT(12, 24)\n  \"12\"\n  >>> cirCulaRShifT(12, 25)\n  \"21\"\n  >>> cirCulaRShifT(12, 26)\n  \"12\"\n  >>> cirCulaRShifT(12, 27)\n  \"21\"\n  >>> cirCulaRShifT(12, 28)\n  \"12\"\n  >>> cirCulaRShifT(12, 29)\n  \"21\"\n  >>> cirCulaRShifT(12, 30)\n  \"12\"\n  >>> cirCulaRShifT(12, 31)\n  \"21\"\n  >>> cirCulaRShifT(12, 32)\n  \"12\"\n  >>> cirCulaRShifT(12, 33)\n  \"21\"\n  >>> cirCulaRShifT(12, 34)\n  \"12\"\n  >>> cirCulaRShifT(12, 35)\n  \"21\"\n  >>> cirCulaRShifT(12, 36)\n  \"12\"\n  >>> cirCulaRShifT(12, 37)\n  \"21\"\n  >>> cirCulaRShifT(12, 38)\n  \"12\"\n  >>> cirCulaRShifT(12, 39)\n  \"21\"\n  >>> cirCulaRShifT(12, 40)\n  \"12\"\n  >>> cirCulaRShifT(12, 41)\n  \"21\"\n  >>> cirCulaRShifT(12, 42)\n  \"12\"\n  >>> cirCulaRShifT(12, 43)\n  \"21\"\n  >>> cirCulaRShifT(12, 44)\n  \"12\"\n  >>> cirCulaRShifT(12, 45)\n  \"21\"\n  >>> cirCulaRShifT(12, 46)\n  \"12\"\n  >>> cirCulaRShifT(12, 47)\n  \"21\"\n  >>> cirCulaRShifT(12, 48)\n  \"12\"\n  >>> cirCulaRShifT(12, 49)\n  \"21\"\n  >>> cirCulaRShifT(12, 50)\n  \"12\"\n  >>> cirCulaRShifT(12, 51)\n  \"21\"\n  >>> cirCulaRShifT(12, 52)\n  \"12\"\n  >>> cirCulaRShifT(12, 53)\n  \"21\"\n  >>> cirCulaRShifT(12, 54)\n  \"12\"\n  >>> cirCulaRShifT(12, 55)\n  \"21\"\n  >>> cirCulaRShifT(12, 56)\n  \"12\"\n  >>> cirCulaRShifT(12, 57)\n  \"21\"\n  >>> cirCulaRShifT(12, 58)\n  \"12\"\n  >>> cirCulaRShifT(12, 59)\n  \"21\"\n  >>> cirCulaRShifT(12, 60)\n  \"12\"\n  >>> cirCulaRShifT(12, 61)\n  \"21\"\n  >>> cirCulaRShifT(12, 62)\n  \"12\"\n  >>> cirCulaRShifT(12, 63)\n  \"21\"\n  >>> cirCulaRShifT(12, 64)\n  \"12\"\n  >>> cirCulaRShifT(12, 65)\n  \"21\"\n  >>> cirCulaRShifT(12, 66)\n  \"12\"\n  >>> cirCulaRShifT(12, 67)\n  \"21\"\n  >>> cirCulaRShifT(12, 68)\n  \"12\"\n  >>> cirCulaRShifT(12, 69)\n  \"21\"\n  >>> cirCulaRShifT(12, 70)\n  \"12\"\n  >>> cirCulaRShifT(12, 71)\n  \"21\"\n  >>> cirCulaRShifT(12, 72)\n  \"12\"\n  >>> cirCulaRShifT(12, 73)\n  \"21\"\n  >>> cirCulaRShifT(12, 74)\n  \"12\"\n  >>> cirCulaRShifT(12, 75)\n  \"21\"\n  >>> cirCulaRShifT(12, 76)\n  \"12\"\n  >>> cirCulaRShifT(12, 77)\n  \"21\"\n  >>> cirCulaRShifT(12, 78)\n  \"12\"\n  >>> cirCulaRShifT(12, 79)\n  \"21\"\n  >>> cirCulaRShifT(12, 80)\n  \"12\"\n  >>> cirCulaRShifT(12, 81)\n  \"21\"\n  >>> cirCulaRShifT(12, 82)\n  \"12\"\n  >>> cirCulaRShifT(12, 83)\n  \"21\"\n  >>> cirCulaRShifT(12, 84)\n  \"12\"\n  >>> cirCulaRShifT(12, 85)\n  \"21\"\n  >>> cirCulaRShifT(12, 86)\n  \"12\"\n  >>> cirCulaRShifT(12, 87)\n  \"21\"\n  >>> cirCulaRShifT(12, 88)\n  \"12\"\n  >>> cirCulaRShifT(12, 89)\n  \"21\"\n  >>> cirCulaRShifT(12, 90)\n  \"12\"\n  >>> cirCulaRShifT(12, 91)\n  \"21\"\n  >>> cirCulaRShifT(12, 92)\n  \"12\"\n  >>> cirCulaRShifT(12, 93)\n  \"21\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 97 && c <= 122) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      sum += c;\n    }\n    if (c >= 97 && c <= 122) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      sum += c;\n    }\n    if (c >= 97 && c <= 122) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      sum += c;\n    }\n    if (c >= 97 && c <= 122) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      sum += c;\n    }\n    if (c >= 97 && c <= 122) {\n      sum += c;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mango] = s.split(' ');\n  const [apples, oranges, mango] = s.split(' ');\n  const [apple, orange, mang", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, index) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return index;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  const pluCked = arr.filter((val, index) => index!== minIndex && val % 2 === 0);\n  return [minValue, minIndex];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const minIndex = oddValues.reduce((acc, curr, index) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return index;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = oddValues[minIndex];\n  const pluCked = arr.filter((val, index) => index!== minIndex && val % 2!== 0);\n  return [minValue, minIndex];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const minIndex = oddValues.reduce((acc, curr, index) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return index;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = oddValues[minIndex];\n  const pluCked = arr.filter((val, index) => index!== minIndex && val % 2!== 0);\n  return [minValue, minIndex];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, index) => {\n    if (curr < acc) {\n      return curr;\n    }\n    return index;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  const pluCked = arr.filter((val, index) => index!== minIndex && val % 2 === 0);\n  return [minValue, minIndex];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  const freq = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[lst[i]] === undefined) {\n      freq[lst[i]] = 0;\n    }\n    freq[lst[i]]++;\n  }\n  for (let key in freq) {\n    if (freq[key] > freq[key]) {\n      return key;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a string where each letter\n  is replaced by the number of times it appears in the original string.\n  Examples:\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracadabra\") → \"a2b1c2d1c1\"\n      countLetters(\"abracad", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  >>> filTerBYSubsNoTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsNoTriNg = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsNoTriNg([], 'a')\n  []\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strAngesortLIst(left).concat([min], strAngesortLIst(right));\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea2 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea3 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea4 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea5 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea6 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea7 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea8 = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c) / 2\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight && isBalanced(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  w", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst2\n  }\n  return lst1\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let count = 0;\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = i; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexnum = 0;\n  let hexdigit;\n  for (let i = 0; i < num.length; i++) {\n    hexdigit = num.charCodeAt(i).toString(16);\n    hexnum += hexdigit.length;\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey2 = (num) => {\n  let hexnum = 0;\n  let hexdigit;\n  for (let i = 0; i < num.length; i++) {\n    hexdigit = num.charCodeAt(i).toString(16);\n    hexnum += hexdigit.length;\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey3 = (num) => {\n  let hexnum = 0;\n  let hexdigit;\n  for (let i = 0; i < num.length; i++) {\n    hexdigit = num.charCodeAt(i).toString(16);\n    hexnum += hexdigit.length;\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey4 = (num) => {\n  let hexnum = 0;\n  let hexdigit;\n  for (let i = 0; i < num.length; i++) {\n    hexdigit = num.charCodeAt(i).toString(16);\n    hexnum += hexdigit.length;\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey5 = (num) => {\n  let hexnum = 0;\n  let hexdigit;\n  for (let i = 0; i < num.length; i++) {\n    hexdigit = num.charCodeAt(i).toString(16);\n    hexnum += hexdigit.length;\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n  let binaryToDecimal = '';\n  while (binary!== '0') {\n    binaryToDecimal = binary % 10;\n    decimal = decimal + binaryToDecimal;\n    binary = binary / 10;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in decimal form.\n  Examples:\n  decImaltoBinAry(15)   # returns 15\n  decImaltoBinAry(32)   # returns 32\n*/\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalToBinary = '';\n  while (decimal!== 0) {\n    decimalToBinary = decimal.toString(2);\n    decimal = decimal - 1;\n    binary = binary + decimalToBinary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a number as input and returns the number in binary form.\n  Examples:\n  binImaltoDecAry(1111)   # returns 15\n  binImaltoDecAry(10000)  # returns 32\n*/\nconst binImaltoDecAry = (", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n\n  const sum = (acc, val) => {\n    return acc + val;\n  };\n\n  const product = (acc, val) => {\n    return acc * val;\n  };\n\n  const [sumVal, productVal] = numbers.reduce(sum, int).reduce(product, int);\n\n  return [sumVal, productVal];\n};\n\n/**\n * Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([2, 3, 4, 5])\n  (10, 24)\n  */", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(aa) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(abcde) => false\n  isOnlyLetters(abcdef) => true\n  isOnlyLetters(abcdefg) => false\n  isOnlyLetters(abcdefgh) => false\n  isOnlyLetters(abcdefghi) => false\n  isOnlyLetters(abcdefghij) => false\n  isOnlyLetters(abcdefghijk) => false\n  isOnlyLetters(abcdefghijkl) => false\n  isOnlyLetters(abcdefghijklm) => false\n  isOnlyLetters(abcdefghijklmn) => false\n  isOnlyLetters(abcdefghijklmno) => false\n  isOnlyLetters(abcdefghijklmnop) => false\n  isOnlyLetters(abcdefghijklmnopq) => false\n  isOnlyLetters(abcdefghijklmnopqr) => false\n  isOnlyLetters(abcdefghijklmnopqrs) => false\n  isOnlyLetters(abcdefghijklmnopqrst) => false\n  isOnlyLetters(abcdefghijklmnopqrstu) => false\n  isOnlyLetters(abcdefghijklmnopqrstuv) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvw) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwx) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxy) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzz) => false\n  isOnlyLetters(abcdef", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    const gradeLetter = grade > gradesAvg? 'D-' : grade > gradesAvg - 0.7? 'D+' : grade > gradesAvg - 0.3? 'D' : grade > gradesAvg - 0.1? 'C+' : grade > gradesAvg - 0.07? 'C' : grade > gradesAvg - 0.03? 'C' : grade > gradesAvg - 0.01? 'B+' : grade > gradesAvg - 0.07? 'B' : grade > gradesAvg - 0.03? 'B' : grade > gradesAvg - 0.01? 'A+' : grade > gradesAvg? 'A' : grade > gradesAvg - 0.07? 'A' : grade > gradesAvg - 0.03? 'A' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > gradesAvg - 0.07? 'A-' : grade > gradesAvg - 0.03? 'A-' : grade > gradesAvg - 0.01? 'A-' : grade > gradesAvg? 'A-' : grade > grades", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeEnd0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeStartS = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst staRtsONeStart0 = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe2 = (solVe) => {\n  let sum = 0;\n  while (solVe > 0) {\n    sum += solVe % 2;\n    solVe = Math.floor(solVe / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe3 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe4 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe5 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe6 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe7 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe8 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe9 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe10 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!'\n  */\nconst antIShuFfleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return bCharCode - aCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!'\n  */\nconst antIShuFfleDescAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return bCharCode - aCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'rldHello!!!'\n  */\nconst antIShuFfleDescAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return bCharCode - aCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDescAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    const bCharCode = b\n     .split('')\n     .map((char) => char.charCodeAt(0));\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const res = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        rowRes.push([i, j]);\n      }\n    }\n    res.push(rowRes);\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n  res.sort((a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getcol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getcol([], 1) == []\n  getcol([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst getcol = (lst, x) => {\n  const res = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  for (let i = 0; i < cols; i++) {\n    const col = lst[i];\n    const colRes = [];\n    for (let j = 0; j < rows; j++) {\n      if (col[j] === x) {\n        colRes.push([i, j]);\n      }\n    }\n    res.push(colRes);\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n  res.sort((a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 6, 5, 2, 4],\n    [1, 6, 5, 1, 4],\n    [1, 6, 5, 2, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < cols; j++) {\n      rowRes.push(row[j]);\n    }\n    res.push(rowRes);\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n  res.sort((a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 6, 5, 2, 4],\n    [1, 6, 5, 1, 4],\n    [1, 6, 5, 2, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < cols; j++) {\n      rowRes.push(row[j]);\n    }\n    res.push(rowRes);\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n  res.sort((a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 6, 5, 2, 4],\n    [1, 6, 5, 1, 4],\n    [1, 6, 5, 2, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n  ]\n  */\nconst transpose = (lst) => {\n  const res = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < cols; ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = [...array];\n  const sumFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumFirstIndex & 1;\n  const isEven = sumLastIndex & 1;\n  if (isOdd === isEven) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "<|endoftext|>/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt2 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt2('hi') returns 'lm'\n  encRypt2('asdfghjkl') returns 'ewhjklnop'\n  encRypt2('gf') returns 'kj'\n  encRypt2('et') returns 'ix'\n  */\nconst encRypt2 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt3 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt3('hi') returns 'lm'\n  encRypt3('asdfghjkl') returns 'ewhjklnop'\n  encRypt3('gf') returns 'kj'\n  encRypt3('et') returns 'ix'\n  */\nconst encRypt3 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt4 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt4('hi') returns 'lm'\n  encRypt4('asdfghjkl') returns 'ewhjklnop'\n  encRypt4('gf') returns 'kj'\n  encRypt4('et') returns 'ix'\n  */\nconst encRypt4 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt5 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt5('hi') returns 'lm'\n  encRypt5('asdfghjkl') returns 'ewhjklnop'\n  encRypt5('gf') returns 'kj'\n  encRypt5('et') returns 'ix'\n  */\nconst encRypt5 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt6 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt6('hi') returns 'lm'\n  encRypt6('asdfghjkl') returns 'ewhjklnop'\n  encRypt6('gf') returns 'kj'\n  encRypt6('et') returns 'ix'\n  */\nconst encRypt6 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt7 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt7('hi') returns 'lm'\n  encRypt7('asdfghjkl') returns 'ewhjklnop'\n  encRypt7('gf') returns 'kj'\n  encRypt7('et') returns 'ix'\n  */\nconst encRypt7 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt8 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt8('hi') returns 'lm'\n  encRypt8('asdfghjkl') returns 'ewhjklnop'\n  encRypt8('gf') returns 'kj'\n  encRypt8('et') returns 'ix'\n  */\nconst encRypt8 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt9 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt9('hi') returns 'lm'\n  encRypt9('asdfghjkl') returns 'ewhjklnop'\n  encRypt9('gf') returns 'kj'\n  encRypt9('et') returns 'ix'\n  */\nconst encRypt9 = (s) => {\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    newStr += String.fromCharCode((s.charCodeAt(i) + 2) % (26 * 26))\n  }\n  return newStr\n}\n\n/*Create a function encRypt10 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multipli", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rolLingmin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolLingsum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 6, 6, 6]\n  */\nconst rolLingsum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolLingavg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolLingavg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rolLingstd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolLingvar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.25, 2.25, 2.25, 2.25]\n  */\nconst rolLingvar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolLingmedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolLingmedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolLingmode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 2, 2, 2]\n  */\nconst rolLingmode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    }\n    if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolLingmedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolLingmedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolLingmode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 2, 2, 2]\n  */\nconst rolLingmode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    }\n    if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4]\n  */\nconst rolLingmin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSma", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(3.6, -2.2, 2) ➞ false\n  */\nconst anynonint = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anynonint(5, 2, 7) ➞ true\n  anynonint(3, 2, 2) ➞ false\n  anynonint(3, -2, 1) ➞ true\n  anynonint(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decOde('test')\n  'test'\n  >>> decOde('This is a message')\n  'This is a message'\n  */\nconst decOde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      newMessage += englishAlphabet[letterIndex + 1];\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const vowelIndex = vowels.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessage += letter;\n    } else if (vowelIndex === -1) {\n      newMessage += englishAlphabet[letterIndex + 1];\n    } else {\n      new", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum = sum + lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of the factors.\n\n  Examples:\n  For lst = [2,3,5,7,11] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasF = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasG = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasH = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasI = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasJ = (dict) => {\n  let isString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiC", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (couPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTiplY(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplZ(148, 412) should return 16.\n  mulTiplZ(19, 28) should return 72.\n  mulTiplZ(2020, 1851) should return 0.\n  mulTiplZ(14,-15) should return 20.\n  */\nconst mulTiplZ = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTiplZ(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = mulTipl(a%10, b%10) + a%10 * b%10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtLowUpPer('aBCdEf') returns 1\n  couNtLowUpPer('abcdefg') returns 0\n  couNtLowUpPer('dBBE') returns 0\n  */\nconst couNtLowUpPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  couNtVowPer('aBCdEf') returns 1\n  couNtVowPer('abcdefg') returns 0\n  couNtVowPer('dBBE') returns 0\n  */\nconst couNtVowPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  couNtConsPer('aBCdEf') returns 1\n  couNtConsPer('abcdefg') returns 0\n  couNtConsPer('dBBE') returns 0\n  */\nconst couNtConsPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  couNtConsPer('aBCdEf') returns 1\n  couNtConsPer('abcdefg') returns 0\n  couNtConsPer('dBBE') returns 0\n  */\nconst couNtConsPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  couNtVowPer('aBCdEf') returns 1\n  couNtVowPer('abcdefg') returns 0\n  couNtVowPer('dBBE') returns 0\n  */\nconst couNtVowPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  couNtConsPer('aBCdEf') returns 1\n  couNtConsPer('abcdefg') returns 0\n  couNtConsPer('dBBE') returns 0\n  */\nconst couNtConsPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices. \n  \n  For example:\n  couNtLowUpPer('aBCdEf') returns 1\n  couNtLowUpPer('abcdefg') returns 0\n  couNtLowUpPer('dBBE') returns 0\n  */\nconst couNtLowUpPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  couNtVowPer('aBCdEf') returns 1\n  couNtVowPer('abcdefg') returns 0\n  couNtVowPer('dBBE') returns 0\n  */\nconst couNtVowPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  couNtConsPer('aBCdEf') returns 1\n  couNtConsPer('abcdefg') returns 0\n  couNtConsPer('d", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return num > 0? Math.floor(num) + diff : Math.floor(num) - diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
