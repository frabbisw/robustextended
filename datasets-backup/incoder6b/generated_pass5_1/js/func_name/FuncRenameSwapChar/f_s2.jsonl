{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return middleNumber >= threshold && middleNumber <= threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isInCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isInCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isInCloselEements = (numbers, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(.*?\\)/g);\n  const paren_array_filtered = paren_array.filter(\n    item => item.trim().length!== 0\n  );\n  return paren_array_filtered;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let longestPalindrome", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter.\n  \n  For example:\n  wordsStartWith(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  wordsStartWith(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\", \"six\"]\n  */\nconst wordsStartWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word => word.startsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a given letter.\n  \n  For example:\n  wordsEndWith(\"Hi, my name is John\", \"n\") == [\"John\"]\n  wordsEndWith(\"One, two, three, four, five, six\", \"o\") == [\"six\"]\n  */\nconst wordsEndWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word => word.endsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the given letter.\n  \n  For example:\n  wordsContain(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  wordsContain(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\", \"six\"]\n  */\nconst wordsContain = (s, letter) => {\n  return s.split(/,|\\s/).filter(word => word.includes(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  wordsNotContain(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotContain(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContain = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.includes(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with a given letter.\n  \n  For example:\n  wordsNotStartWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotStartWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotStartWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.startsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with a given letter.\n  \n  For example:\n  wordsNotEndWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotEndWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotEndWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.endsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  wordsNotContain(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotContain(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContain = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.includes(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with a given letter.\n  \n  For example:\n  wordsNotStartWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotStartWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotStartWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.startsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with a given letter.\n  \n  For example:\n  wordsNotEndWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotEndWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotEndWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.endsWith(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  wordsNotContain(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotContain(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContain = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.includes(letter))\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with a given letter.\n  \n  For example:\n  wordsNotStartWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsNotStartWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotStartWith = (s, letter) => {\n  return s.split(/,|\\s/).filter(word =>!word.startsWith(letter))\n}\n\n/*\n  You will be given a string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a tags=javascript,binary,average,numbers |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${avg}`.padStart(end, '0');\n  return binary;\n}\n\nconsole.log(binaryAverage(1, 5));\nconsole.log(binaryAverage(7, 5));\nconsole.log(binaryAverage(10, 20));\nconsole.log(binaryAverage(20, 33));\n</code>\n<|/ a tags=javascript,binary,average,numbers |>\n<| a dscore=1 |>\n<code>\nfunction binaryAverage(start, end) {\n  const avg = Math.floor((start + end) / 2);\n  const binary = `${", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 1){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0 && x[i] % 10 === 0){\n      result.push(x[i]);\n    }\n  }\n  \n  return result.sort();\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"ybLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"],\n  },\n  {\n    name: \"ybLength\",\n    arr: [],\n    expected: [],\n  },\n  {\n    name: \"ybLength\",\n    arr: [1, -1, 55],\n    expected: [\"One\"],\n  },\n];\n\ndescribe(\"ybLength\", () => {\n  tests.forEach((test) => {\n    it(test.name, () => {\n      expect(ybLength(test.arr)).toEqual(test.expected);\n    });\n  });\n});\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"ybLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"],\n  },\n  {\n    name: \"ybLength\",\n    arr: [],\n    expected: [],\n  },\n  {\n    name: \"ybLength\",\n    arr: [1, -1, 55],\n    expected: [\"One\"],\n  },\n];\n\ndescribe(\"ybLength\", () => {\n  tests.forEach((test) => {\n    it(test.name, () => {\n      expect(ybLength(test.arr)).toEqual(test.expected);\n    });\n  });\n});\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"ybLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"],\n  },\n  {\n    name: \"ybLength\",\n    arr: [],\n    expected: [],\n  },\n  {\n    name: \"ybLength\",\n    arr: [1, -1, 55],\n    expected: [\"One\"],\n  },\n];\n\ndescribe(\"ybLength\", () => {\n  tests.forEach((test) => {\n    it(test.name, () => {\n      expect(ybLength(test.arr)).toEqual(test.expected);\n    });\n  });\n});\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Se", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  { input: 2, expected: 1 },\n  { input: 3, expected: 2 },\n  { input: 4, expected: 3 },\n  { input: 5, expected: 6 },\n  { input: 6, expected: 6 },\n  { input: 7, expected: 15 },\n  { input: 8, expected: 30 },\n  { input: 9, expected: 150 },\n  { input: 10, expected: 3628800},\n  { input: 11, expected: 1.8446744e+19},\n  { input: 12, expected: 3.6083854e+20},\n  { input: 13, expected: 9.8696044e+21},\n  { input: 14, expected: 1.8446744e+23},\n  { input: 15, expected: 3.6083854e+24},\n  { input: 16, expected: 9.8696044e+25},\n  { input: 17, expected: 1.8446744e+26},\n  { input: 18, expected: 3.6083854e+27},\n  { input: 19, expected: 9.8696044e+28},\n  { input: 20, expected: 1.8446744e+29},\n  { input: 21, expected: 3.6083854e+30},\n  { input: 22, expected: 9.8696044e+31},\n  { input: 23, expected: 1.8446744e+32},\n  { input: 24, expected: 3.6083854e+33},\n  { input: 25, expected: 9.8696044e+34},\n  { input: 26, expected: 1.8446744e+35},\n  { input: 27, expected: 3.6083854e+36},\n  { input: 28, expected: 9.8696044e+37},\n  { input: 29, expected: 1.8446744e+38},\n  { input: 30, expected: 3.6083854e+39},\n  { input: 31, expected: 9.8696044e+40},\n  { input: 32, expected: 1.8446744e+41},\n  { input: 33, expected: 3.6083854e+42},\n  { input: 34, expected: 9.8696044e+43},\n  { input: 35, expected: 1.8446744e+44},\n  { input: 36, expected: 3.6083854e+45},\n  { input: 37, expected: 9.8696044e+46},\n  { input: 38, expected: 1.8446744e+47},\n  { input: 39, expected: 3.6083854e+48},\n  { input: 40, expected: 9.8696044e+49},\n  { input: 41, expected: 1.8446744e+50},\n  { input: 42, expected: 3.6083854e+51},\n  { input: 43, expected: 9.8696044e+52},\n  { input: 44, expected: 1.8446744e+53},\n  { input: 45, expected: 3.6083854e+54},\n  { input: 46, expected: 9.8696044e+55},\n  { input: 47, expected: 1.8446744e+56},\n  { input: 48, expected: 3.6083854e+57},\n  { input: 49, expected: 9.8696044e+58},\n  { input: 50, expected: 1.8446744e+59},\n  { input: 51, expected: 3.6083854e+60},\n  { input: 52, expected: 9.8696044e+61},\n  { input: 53, expected: 1.8446744e+62},\n  { input: 54, expected: 3.6083854e+63},\n  { input: 55, expected: 9.8696044e+64},\n  { input: 56, expected: 1.8446744e+65},\n  { input: 57, expected: 3.6083854e+66},\n  { input: 58, expected: 9.8696044e+67},\n  { input: 59, expected: 1.8446744e+68},\n  { input: 60, expected: 3.6083854e+69},\n  { input: 61, expected: 9.8696044e+70},\n  { input: 62, expected: 1.8446744e+71},\n  { input: 63, expected: 3.6083854e+72},\n  { input: 64, expected: 9.8696044e+73},\n  { input: 65, expected: 1.8446744e+74},\n  { input: 66, expected: 3.6083854e+75},\n  { input: 67, expected: 9.8696044e+76},\n  { input: 68, expected: 1.8446744e+77},\n  { input: 69, expected: 3.6083854e+78},\n  { input: 70, expected: 9.8696044e+79},\n  { input: 71, expected: 1.8446744e+80},\n  { input: 72, expected: 3.6083854e+81},\n  { input: 73, expected: 9.8696044e+82},\n  { input: 74, expected: 1.8446744e+83},\n  { input: 75, expected: 3.6083854e+84},\n  { input: 76, expected: 9.8696044e+85},\n  { input: 77, expected: 1.8446744e+86},\n  { input: 78, expected: 3.6083854e+87},\n  { input: 79, expected: 9.8696044e+88},\n  { input: 80, expected: 1.8446744e+89},\n  { input: 81, expected: 3.6083854e+90},\n  { input: 82, expected: 9.8696044e+91},\n  { input: 83, expected: 1.8446744e+92},\n  { input: 84, expected: 3.6083854e+93},\n  { input: 85, expected: 9.8696044e+94},\n  { input: 86, expected: 1.8446744e+95},\n  { input: 87, expected: 3.6083854e+96},\n  { input: 88, expected: 9.8696044e+97},\n  { input: 89, expected: 1.8446744e+98},\n  { input: 90, expected: 3.6083854e+99},\n  { input: 91, expected: 9.8696044e+100},\n  { input: 92, expected: 1.8446744e+101},\n  { input: 93, expected: 3.6083854e+102},\n  { input: 94, expected: 9.8696044e+103},\n  { input: 95, expected: 1.8446744e+104},\n  { input: 96, expected: 3.6083854e+105},\n  { input: 97, expected: 9.8696044e+106},\n  { input: 98, expected: 1.8446744e+107},\n  { input: 99, expected: 3.6083854e+108},\n  { input: 100, expected: 9.8696044e+109},\n  { input: 101, expected: 1.8446744e+110},\n  { input: 102, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "<|endoftext|>/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (digit < 0) {\n      n += Math.pow(10, -digit);\n    } else {\n      n += digit;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let flag = true;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and print it on the screen.\n\n  If the given array is empty then print -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  maxElement([3, 4, 5, 1, 2])==>5\n  Explanation: By performing the following operations, we can find the maximum\n               element in the given array arr: [3, 4, 5, 1, 2].\n               \n               1. Move all elements of the array to the right by one position.\n               2. Find the maximum element in the array and print it on the screen.\n               3. Move all elements of the array to the left by one position.\n               4. Find the maximum element in the array and print it on the screen.\n               5. Move all elements of the array to the right by one position.\n               6. Find the maximum element in the array and print it on the screen.\n               7. Move all elements of the array to the left by one position.\n               8. Find the maximum element in the array and print it on the screen.\n               9. Move all elements of the array to the right by one position.\n               10. Find the maximum element in the array and print it on the screen.\n               11. Move all elements of the array to the left by one position.\n               12. Find the maximum element in the array and print it on the screen.\n               13. Move all elements of the array to the right by one position.\n               14. Find the maximum element in the array and print it on the screen.\n               15. Move all elements of the array to the left by one position.\n               16. Find the maximum element in the array and print it on the screen.\n               17. Move all elements of the array to the right by one position.\n               18. Find the maximum element in the array and print it on the screen.\n               19. Move all elements of the array to the left by one position.\n               20. Find the maximum element in the array and print it on the screen.\n               21. Move all elements of the array to the right by one position.\n               22. Find the maximum element in the array and print it on the screen.\n               23. Move all elements of the array to the left by one position.\n               24. Find the maximum element in the array and print it on the screen.\n               25. Move all elements of the array to the right by one position.\n               26. Find the maximum element in the array and print it on the screen.\n               27. Move all elements of the array to the left by one position.\n               28. Find the maximum element in the array and print it on the screen.\n               29. Move all elements of the array to the right by one position.\n               30. Find the maximum element in the array and print it on the screen.\n               31. Move all elements of the array to the left by one position.\n               32. Find the maximum element in the array and print it on the screen.\n               33. Move all elements of the array to the right by one position.\n               34. Find the maximum element in the array and print it on the screen.\n               35. Move all elements of the array to the left by one position.\n               36. Find the maximum element in the array and print it on the screen.\n               37. Move all elements of the array to the right by one position.\n               38. Find the maximum element in the array and print it on the screen.\n               39. Move all elements of the array to the left by one position.\n               40. Find the maximum element in the array and print it on the screen.\n               41. Move all elements of the array to the right by one position.\n               42. Find the maximum element in the array and print it on the screen.\n               43. Move all elements of the array to the left by one position.\n               44. Find the maximum element in the array and print it on the screen.\n               45. Move all elements of the array to the right by one position.\n               46. Find the maximum element in the array and print it on the screen.\n               47. Move all elements of the array to the left by one position.\n               48. Find the maximum element in the array and print it on the screen.\n               49. Move all elements of the array to the right by one position.\n               50. Find the maximum element in the array and print it on the screen.\n               51. Move all elements of the array to the left by one position.\n               52. Find the maximum element in the array and print it on the screen.\n               53. Move all elements of the array to the right by one position.\n               54. Find the maximum element in the array and print it on the screen.\n               55. Move all elements of the array to the left by one position.\n               56. Find the maximum element in the array and print it on the screen.\n               57. Move all elements of the array to the right by one position.\n               58. Find the maximum element in the array and print it on the screen.\n               59. Move all elements of the array to the left by one position.\n               60. Find the maximum element in the array and print it on the screen.\n               61. Move all elements of the array to the right by one position.\n               62. Find the maximum element in the array and print it on the screen.\n               63. Move all elements of the array to the left by one position.\n               64. Find the maximum element in the array and print it on the screen.\n               65. Move all elements of the array to the right by one position.\n               66. Find the maximum element in the array and print it on the screen.\n               67. Move all elements of the array to the left by one position.\n               68. Find the maximum element in the array and print it on the screen.\n               69. Move all elements of the array to the right by one position.\n               70. Find the maximum element in the array and print it on the screen.\n               71. Move all elements of the array to the left by one position.\n               72. Find the maximum element in the array and print it on the screen.\n               73. Move all elements of the array to the right by one position.\n               74. Find the maximum element in the array and print it on the screen.\n               75. Move all elements of the array to the left by one position.\n               76. Find the maximum element in the array and print it on the screen.\n               77. Move all elements of the array to the right by one position.\n               78. Find the maximum element in the array and print it on the screen.\n               79. Move all elements of the array to the left by one position.\n               80. Find the maximum element in the array and print it on the screen.\n               81. Move all elements of the array to the right by one position.\n               82. Find the maximum element in the array and print it on the screen.\n               83. Move all elements of the array to the left by one position.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor2 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor3 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor4 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor5 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor6 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor7 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor8 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor9 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor10 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor11 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor12 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor13 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor14 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor15 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);\n  const result = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return result;\n};\n\n/* Given two strings s and t, perform XOR on these inputs and return result\n  also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor16 = (s, t) => {\n  const aArr = s.split('').map(Number);\n  const bArr = t.split('').map(Number);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4])) // YES\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5])) // NO\nconsole.log", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(letter => letter.toLowerCase());\n  let counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]? acc[letter] + 1 : 1;\n    return acc;\n  }, {});\n  let maxCount = Math.max(...Object.values(counts));\n  let maxLetter = Object.keys(counts).find(letter => counts[letter] === maxCount);\n  return { maxLetter, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c[i]) {\n      result += s[i];\n    } else {\n      flag = true;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters from string s.\n  Example\n  For s = \"abcdef\", k = 3, the result should be \"abcde\"\n  For s = \"abcdef\", k = 1  the result should be \"abcde\"\n  For s = \"abcdef\", k = 0  the result should be \"\"\n  For s = \"abcdef\", k = -1  the result should be \"\"\n  For s = \"abcdef\", k = -2  the result should be \"\"\n  For s = \"abcdef\", k = -4  the result should be \"\"\n  For s = \"abcdef\", k = -5  the result should be \"\"\n  For s = \"abcdef\", k = -6  the result should be \"\"\n  For s = \"abcdef\", k = -7  the result should be \"\"\n  For s = \"abcdef\", k = -8  the result should be \"\"\n  For s = \"abcdef\", k = -9  the result should be \"\"\n  For s = \"abcdef\", k = -10 the result should be \"\"\n  For s = \"abcdef\", k = -11 the result should be \"\"\n  For s = \"abcdef\", k = -12 the result should be \"\"\n  For s = \"abcdef\", k = -13 the result should be \"\"\n  For s = \"abcdef\", k = -14 the result should be \"\"\n  For s = \"abcdef\", k = -15 the result should be \"\"\n  For s = \"abcdef\", k = -16 the result should be \"\"\n  For s = \"abcdef\", k = -17 the result should be \"\"\n  For s = \"abcdef\", k = -18 the result should be \"\"\n  For s = \"abcdef\", k = -19 the result should be \"\"\n  For s = \"abcdef\", k = -20 the result should be \"\"\n  For s = \"abcdef\", k = -21 the result should be \"\"\n  For s = \"abcdef\", k = -22 the result should be \"\"\n  For s = \"abcdef\", k = -23 the result should be \"\"\n  For s = \"abcdef\", k = -24 the result should be \"\"\n  For s = \"abcdef\", k = -25 the result should be \"\"\n  For s = \"abcdef\", k = -26 the result should be \"\"\n  For s = \"abcdef\", k = -27 the result should be \"\"\n  For s = \"abcdef\", k = -28 the result should be \"\"\n  For s = \"abcdef\", k = -29 the result should be \"\"\n  For s = \"abcdef\", k = -30 the result should be \"\"\n  For s = \"abcdef\", k = -31 the result should be \"\"\n  For s = \"abcdef\", k = -32 the result should be \"\"\n  For s = \"abcdef\", k = -33 the result should be \"\"\n  For s = \"abcdef\", k = -34 the result should be \"\"\n  For s = \"abcdef\", k = -35 the result should be \"\"\n  For s = \"abcdef\", k = -36 the result should be \"\"\n  For s = \"abcdef\", k = -37 the result should be \"\"\n  For s = \"abcdef\", k = -38 the result should be \"\"\n  For s = \"abcdef\", k = -39 the result should be \"\"\n  For s = \"abcdef\", k = -40 the result should be \"\"\n  For s = \"abcdef\", k = -41 the result should be \"\"\n  For s = \"abcdef\", k = -42 the result should be \"\"\n  For s = \"abcdef\", k = -43 the result should be \"\"\n  For s = \"abcdef\", k = -44 the result should be \"\"\n  For s = \"abcdef\", k = -45 the result should be \"\"\n  For s = \"abcdef\", k = -46 the result should be \"\"\n  For s = \"abcdef\", k = -47 the result should be \"\"\n  For s = \"abcdef\", k = -48 the result should be \"\"\n  For s = \"abcdef\", k = -49 the result should be \"\"\n  For s = \"abcdef\", k = -50 the result should be \"\"\n  For s = \"abcdef\", k = -51 the result should be \"\"\n  For s = \"abcdef\", k = -52 the result should be \"\"\n  For s = \"abcdef\", k = -53 the result should be \"\"\n  For s = \"abcdef\", k = -54 the result should be \"\"\n  For s = \"abcdef\", k = -55 the result should be \"\"\n  For s = \"abcdef\", k = -56 the result should be \"\"\n  For s = \"abcdef\", k = -57 the result should be \"\"\n  For s = \"abcdef\", k = -58 the result should be \"\"\n  For s = \"abcdef\", k = -59 the result should be \"\"\n  For s = \"abcdef\", k = -60 the result should be \"\"\n  For s = \"abcdef\", k = -61 the result should be \"\"\n  For s = \"abcdef\", k = -62 the result should be \"\"\n  For s = \"abcdef\", k = -63 the result should be \"\"\n  For s = \"abcdef\", k = -64 the result should be \"\"\n  For s = \"abcdef\", k = -65 the result should be \"\"\n  For s = \"abcdef\", k = -66 the result should be \"\"\n  For s = \"abcdef\", k = -67 the result should be \"\"\n  For s = \"abcdef\", k = -68 the result should be \"\"\n  For s = \"abcdef\", k = -69 the result should be \"\"\n  For s = \"abcdef\", k = -70 the result should be \"\"\n  For s = \"abcdef\", k = -71 the result should be \"\"\n  For s = \"abcdef\", k = -72 the result should be \"\"\n  For s = \"abcdef\", k = -73 the result should be \"\"\n  For s = \"abcdef\", k = -74 the result should be \"\"\n  For s = \"abcdef\", k = -75 the result should be \"\"\n  For s = \"abcdef\", k = -76 the result should be \"\"\n  For s = \"abcdef\", k = -77 the result should be \"\"\n  For s = \"abcdef\", k = -78 the result should be \"\"\n  For s = \"abcdef\", k = -79 the result should be \"\"\n  For s = \"abcdef\", k = -80 the result should be \"\"\n  For s = \"abcdef\", k = -81 the result should be \"\"\n  For s = \"abcdef\", k = -82 the result should be \"\"\n  For s = \"abcdef\", k = -83 the result should be \"\"\n  For s = \"abcdef\", k = -84 the result should be \"\"\n  For s = \"abcdef\", k = -85 the result should be \"\"\n  For s = \"abcdef\", k = -86 the result should be \"\"\n  For s = \"abcdef\", k = -87 the result should be \"\"\n  For s = \"abcdef\", k = -88 the result should be \"\"\n  For s = \"abcdef\", k = -89 the result should be \"\"\n  For s = \"abcdef\", k = -90 the result should be \"\"\n  For s = \"abcdef\", k = -91 the result should be \"\"\n  For s = \"abcdef\", k = -92 the result should be \"\"\n  For s = \"abcdef\", k = -93 the result should be \"\"\n  For s = \"abcdef\", k = -94 the result should be \"\"\n  For s = \"abcdef\", k = -95 the result should be \"\"\n  For s = \"abcdef\", k = -96 the result should be \"\"\n  For s = \"abcdef\", k = -97 the result should be \"\"\n  For s = \"abcdef\", k = -98 the result should be \"\"\n  For s = \"abcdef\", k = -99 the result should be \"\"\n  For s = \"abcdef\", k = -100 the result should be \"\"\n  For s = \"abcdef\", k = -101 the result should be \"\"\n  For s = \"abcdef\", k = -102 the result should be \"\"\n  For s = \"abcdef\", k = -103 the result should be \"\"\n  For s = \"abcdef\", k = -104 the result should be \"\"\n  For s = \"abcdef\", k = -105 the result should be \"\"\n  For s = \"abcdef\", k = -106 the result should be \"\"\n  For s = \"abcdef\", k = -107 the result should be \"\"\n  For s = \"abcdef\", k = -108 the result should be \"\"\n  For s = \"abcdef\", k = -109 the result should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        count++;\n      }\n    }\n    oddCountArr.push(count);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even numbers in nums.\n  Example\n  evenSum([2, 3, 4, 1, 2, 4]) == 6\n  evenSum([-1, -2, -3]) == -3\n  */\nconst evenSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd numbers in nums.\n  Example\n  oddSum([2, 3, 4, 1, 2, 4]) == 3\n  oddSum([-1, -2, -3]) == -1\n  */\nconst oddSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 3.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSum([-1, -2, -3]) == -3\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 5.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 10\n  divisibleSum([-1, -2, -3]) == -5\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 7.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 14\n  divisibleSum([-1, -2, -3]) == -7\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 11.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 21\n  divisibleSum([-1, -2, -3]) == -11\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 15.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 28\n  divisibleSum([-1, -2, -3]) == -15\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 15 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 17.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 34\n  divisibleSum([-1, -2, -3]) == -17\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 17 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 21.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 41\n  divisibleSum([-1, -2, -3]) == -21\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 21 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 25.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 50\n  divisibleSum([-1, -2, -3]) == -25\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 25 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 29.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 59\n  divisibleSum([-1, -2, -3]) == -29\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 29 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 31.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 69\n  divisibleSum([-1, -2, -3]) == -31\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 31 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 35.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 79\n  divisibleSum([-1, -2, -3]) == -35\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 35 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 41.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 89\n  divisibleSum([-1, -2, -3]) == -39\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 41 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 45.\n  Example\n  divisibleSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j]] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] === 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconst maxFill15 = (grid, capacity) => {\n  const n = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return 1;\n    if (a === 0 && b === 1) return -1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 1 && b === 1) return 0;\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0 && b === 0) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return decimal;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      arr.push(s.substr(0, i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsCountIndex = 0;\n  let vowelsCountMinusOne = vowelsCount - 1;\n  let vowelsCountMinusTwo = vowelsCount - 2;\n  let vowelsCountMinusThree = vowelsCount - 3;\n  let vowelsCountMinusFour = vowelsCount - 4;\n  let vowelsCountMinusFive = vowelsCount - 5;\n  let vowelsCountMinusSix = vowelsCount - 6;\n  let vowelsCountMinusSeven = vowelsCount - 7;\n  let vowelsCountMinusEight = vowelsCount - 8;\n  let vowelsCountMinusNine = vowelsCount - 9;\n  let vowelsCountMinusTen = vowelsCount - 10;\n  let vowelsCountMinusEleven = vowelsCount - 11;\n  let vowelsCountMinusTwelve = vowelsCount - 12;\n  let vowelsCountMinusThirteen = vowelsCount - 13;\n  let vowelsCountMinusFourteen = vowelsCount - 14;\n  let vowelsCountMinusFifteen = vowelsCount - 15;\n  let vowelsCountMinusSixteen = vowelsCount - 16;\n  let vowelsCountMinusSeventeen = vowelsCount - 17;\n  let vowelsCountMinusEighteen = vowelsCount - 18;\n  let vowelsCountMinusNineteen = vowelsCount - 19;\n  let vowelsCountMinusTwenty = vowelsCount - 20;\n  let vowelsCountMinusTwentyOne = vowelsCount - 21;\n  let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n  let vowelsCountMinusTwentyThree = vowelsCount - 23;\n  let vowelsCountMinusTwentyFour = vowelsCount - 24;\n  let vowelsCountMinusTwentyFive = vowelsCount - 25;\n  let vowelsCountMinusTwentySix = vowelsCount - 26;\n  let vowelsCountMinusTwentySeven = vowelsCount - 27;\n  let vowelsCountMinusTwentyEight = vowelsCount - 28;\n  let vowelsCountMinusTwentyNine = vowelsCount - 29;\n  let vowelsCountMinusThirty = vowelsCount - 30;\n  let vowelsCountMinusThirtyOne = vowelsCount - 31;\n  let vowelsCountMinusThirtyTwo = vowelsCount - 32;\n  let vowelsCountMinusThirtyThree = vowelsCount - 33;\n  let vowelsCountMinusThirtyFour = vowelsCount - 34;\n  let vowelsCountMinusThirtyFive = vowelsCount - 35;\n  let vowelsCountMinusThirtySix = vowelsCount - 36;\n  let vowelsCountMinusThirtySeven = vowelsCount - 37;\n  let vowelsCountMinusThirtyEight = vowelsCount - 38;\n  let vowelsCountMinusThirtyNine = vowelsCount - 39;\n  let vowelsCountMinusFourty = vowelsCount - 40;\n  let vowelsCountMinusFourtyOne = vowelsCount - 41;\n  let vowelsCountMinusFourtyTwo = vowelsCount - 42;\n  let vowelsCountMinusFourtyThree = vowelsCount - 43;\n  let vowelsCountMinusFourtyFour = vowelsCount - 44;\n  let vowelsCountMinusFourtyFive = vowelsCount - 45;\n  let vowelsCountMinusFourtySix = vowelsCount - 46;\n  let vowelsCountMinusFourtySeven = vowelsCount - 47;\n  let vowelsCountMinusFourtyEight = vowelsCount - 48;\n  let vowelsCountMinusFourtyNine = vowelsCount - 49;\n  let vowelsCountMinusFifty = vowelsCount - 50;\n  let vowelsCountMinusFiftyOne = vowelsCount - 51;\n  let vowelsCountMinusFiftyTwo = vowelsCount - 52;\n  let vowelsCountMinusFiftyThree = vowelsCount - 53;\n  let vowelsCountMinusFiftyFour = vowelsCount - 54;\n  let vowelsCountMinusFiftyFive = vowelsCount - 55;\n  let vowelsCountMinusFiftySix = vowelsCount - 56;\n  let vowelsCountMinusFiftySeven = vowelsCount - 57;\n  let vowelsCountMinusFiftyEight = vowelsCount - 58;\n  let vowelsCountMinusFiftyNine = vowelsCount - 59;\n  let vowelsCountMinusSixty = vowelsCount - 60;\n  let vowelsCountMinusSixtyOne = vowelsCount - 61;\n  let vowelsCountMinusSixtyTwo = vowelsCount - 62;\n  let vowelsCountMinusSixtyThree = vowelsCount - 63;\n  let vowelsCountMinusSixtyFour = vowelsCount - 64;\n  let vowelsCountMinusSixtyFive = vowelsCount - 65;\n  let vowelsCountMinusSixtySix = vowelsCount - 66;\n  let vowelsCountMinusSixtySeven = vowelsCount - 67;\n  let vowelsCountMinusSixtyEight = vowelsCount - 68;\n  let vowelsCountMinusSixtyNine = vowelsCount - 69;\n  let vowelsCountMinusSeventy = vowelsCount - 70;\n  let vowelsCountMinusSeventyOne = vowelsCount - 71;\n  let vowelsCountMinusSeventyTwo = vowelsCount - 72;\n  let vowelsCountMinusSeventyThree = vowelsCount - 73;\n  let vowelsCountMinusSeventyFour = vowelsCount - 74;\n  let vowelsCountMinusSeventyFive = vowelsCount - 75;\n  let vowelsCountMinusSeventySix = vowelsCount - 76;\n  let vowelsCountMinusSeventySeven = vowelsCount - 77;\n  let vowelsCountMinusSeventyEight = vowelsCount - 78;\n  let vowelsCountMinusSeventyNine = vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of strings. Your job is to find out if you can make\n  a list containing all the strings in the list without duplication.\n  Examples:\n  duplicates(['ab', 'ac', 'ad']) == 'Yes'\n  duplicates(['ab', 'ac', 'ad', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab']) == 'No'\n  duplicates(['ab', 'ab']) == 'No'\n  duplicates(['ab']) == 'No'\n  duplicates([]) == 'No'\n  duplicates(['']) == 'No'\n  duplicates(['ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'Yes'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab']) == 'No'\n  duplicates(['ab', 'ac', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', 'ab', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longestLength = 0\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length\n\n    if (length > longestLength) {\n      longestLength = length\n      longestString = strings[i]\n    }\n  }\n\n  return longestString\n}\n\n/**\n * Return the shortest string in the given list of strings.\n * Return null if there are no strings.\n * >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let shortestLength = 0\n  let shortestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length\n\n    if (length < shortestLength) {\n      shortestLength = length\n      shortestString = strings[i]\n    }\n  }\n\n  return shortestString\n}\n\n/**\n * Return the longest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> longestCommonSubstring(['a', 'b', 'c'])\n  'c'\n  >>> longestCommonSubstring(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return longest(commonSubstrings)\n}\n\n/**\n * Return the shortest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> shortestCommonSubstring(['a', 'b', 'c'])\n  'a'\n  >>> shortestCommonSubstring(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return shortest(commonSubstrings)\n}\n\n/**\n * Return the longest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> longestCommonSubstring(['a', 'b', 'c'])\n  'c'\n  >>> longestCommonSubstring(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst longestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return longest(commonSubstrings)\n}\n\n/**\n * Return the shortest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> shortestCommonSubstring(['a', 'b', 'c'])\n  'a'\n  >>> shortestCommonSubstring(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return shortest(commonSubstrings)\n}\n\n/**\n * Return the longest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> longestCommonSubstring(['a', 'b', 'c'])\n  'c'\n  >>> longestCommonSubstring(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst longestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return longest(commonSubstrings)\n}\n\n/**\n * Return the shortest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> shortestCommonSubstring(['a', 'b', 'c'])\n  'a'\n  >>> shortestCommonSubstring(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return shortest(commonSubstrings)\n}\n\n/**\n * Return the longest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> longestCommonSubstring(['a', 'b', 'c'])\n  'c'\n  >>> longestCommonSubstring(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst longestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSubstrings[commonSubstrings.length - 1] === substring) {\n      commonSubstrings[commonSubstrings.length - 1] += strings[i].substr(strings[i].length - 1)\n    } else {\n      commonSubstrings.push(substring)\n    }\n  }\n\n  return longest(commonSubstrings)\n}\n\n/**\n * Return the shortest common substring between all the given strings.\n * Return null if there are no strings.\n * >>> shortestCommonSubstring(['a', 'b', 'c'])\n  'a'\n  >>> shortestCommonSubstring(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestCommonSubstring = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const commonSubstrings = []\n\n  for (let i = 0; i < strings.length; i++) {\n    const substring = strings[i].substr(0, strings[i].length - 1)\n\n    if (commonSubstrings.length === 0) {\n      commonSubstrings.push(substring)\n    } else if (commonSub", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { maxmium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimium = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { minimium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst max = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  return result.sort((a, b) => b - a);\n};\n\nexport { max };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst min = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  return result.sort((a, b) => a - b);\n};\n\nexport { min };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst median = (arr, k) => {\n  const result = [];\n  let middle = Math.floor(arr.length / 2);\n  for (let i = 0; i < k; i++) {\n    result.push(arr[middle]);\n    middle++;\n  }\n  return result.sort((a, b) => b - a);\n};\n\nexport { median };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minmax = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n    max = Math.max(max, arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      result.push(arr[i]);\n    }\n    if (arr[i] < min) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { minmax };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minmin = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(min, arr[i]);\n    minIndex = i;\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\nexport { minmin };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the even elements from the original list.\n  \n\n  Examples\n  even([5, 8, 7, 1]) ==> [5, 1]\n  even([3, 3, 3, 3, 3]) ==> [3, 3]\n  even([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst even = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    }\n  }\n  return even;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the odd elements from the original list.\n  \n\n  Examples\n  odd([5, 8, 7, 1]) ==> [8, 7]\n  odd([3, 3, 3, 3, 3]) ==> [3, 3]\n  odd([30, 13, 24, 321]) ==> [24, 321]\n  */\nconst odd = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    }\n  }\n  return odd;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur more than once in the original list.\n  \n\n  Examples\n  multi([5, 8, 7, 1]) ==> [5, 1]\n  multi([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  multi([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst multi = (lst) => {\n  let multi = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (multi.indexOf(lst[i]) === -1) {\n      multi.push(lst[i]);\n    }\n  }\n  return multi;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur exactly once in the original list.\n  \n\n  Examples\n  single([5, 8, 7, 1]) ==> [8]\n  single([3, 3, 3, 3, 3]) ==> [3]\n  single([30, 13, 24, 321]) ==> [24]\n  */\nconst single = (lst) => {\n  let single = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i]) === i) {\n      single.push(lst[i]);\n    }\n  }\n  return single;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than or equal to two times in the original list.\n  \n\n  Examples\n  multipe([5, 8, 7, 1]) ==> [5, 1]\n  multipe([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  multipe([30, 13, 24, 321]) ==> [24]\n  */\nconst multipe = (lst) => {\n  let multipe = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1) {\n      multipe.push(lst[i]);\n    }\n  }\n  return multipe;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur exactly three times in the original list.\n  \n\n  Examples\n  triple([5, 8, 7, 1]) ==> [5, 1]\n  triple([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple([30, 13, 24, 321]) ==> [24]\n  */\nconst triple = (lst) => {\n  let triple = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2) {\n      triple.push(lst[i]);\n    }\n  }\n  return triple;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than three times in the original list.\n  \n\n  Examples\n  triple_2([5, 8, 7, 1]) ==> [5, 1]\n  triple_2([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple_2([30, 13, 24, 321]) ==> [24]\n  */\nconst triple_2 = (lst) => {\n  let triple_2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3) {\n      triple_2.push(lst[i]);\n    }\n  }\n  return triple_2;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than five times in the original list.\n  \n\n  Examples\n  triple_3([5, 8, 7, 1]) ==> [5, 1]\n  triple_3([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple_3([30, 13, 24, 321]) ==> [24]\n  */\nconst triple_3 = (lst) => {\n  let triple_3 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4) {\n      triple_3.push(lst[i]);\n    }\n  }\n  return triple_3;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than or equal to five times in the original list.\n  \n\n  Examples\n  triple_4([5, 8, 7, 1]) ==> [5, 1]\n  triple_4([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple_4([30, 13, 24, 321]) ==> [24]\n  */\nconst triple_4 = (lst) => {\n  let triple_4 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4 && lst.indexOf(lst[i])!== i + 5) {\n      triple_4.push(lst[i]);\n    }\n  }\n  return triple_4;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than ten times in the original list.\n  \n\n  Examples\n  triple_5([5, 8, 7, 1]) ==> [5, 1]\n  triple_5([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple_5([30, 13, 24, 321]) ==> [24]\n  */\nconst triple_5 = (lst) => {\n  let triple_5 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4 && lst.indexOf(lst[i])!== i + 5 && lst.indexOf(lst[i])!== i + 6) {\n      triple_5.push(lst[i]);\n    }\n  }\n  return triple_5;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur less than or equal to ten times in the original list.\n  \n\n  Examples\n  triple_6([5, 8, 7, 1]) ==> [5, 1]\n  triple_6([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  triple_6([30, 13, 24, 321]) ==> [24]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [];\n  let collatz = [];\n  let temp = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      odd.push(n);\n      n = n / 2;\n    } else {\n      temp.push(n);\n      n = n * 3 + 1;\n    }\n  }\n  while (temp.length > 0) {\n    collatz.push(temp.pop());\n  }\n  return odd.concat(collatz);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let even = [];\n  let collatz = [];\n  let temp = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even.push(n);\n      n = n / 2;\n    } else {\n      temp.push(n);\n      n = n * 3 + 1;\n    }\n  }\n  while (temp.length > 0) {\n    collatz.push(temp.pop());\n  }\n  return even.concat(collatz);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getReverseCollatz = (n) => {\n  let reverse = [];\n  let collatz = [];\n  let temp = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reverse.push(n);\n      n = n / 2;\n    } else {\n      temp.push(n);\n      n = n * 3 + 1;\n    }\n  }\n  while (temp.length > 0) {\n    collatz.push(temp.pop());\n  }\n  return reverse.concat(collatz);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in reverse order and \n  the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenReverseCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getEvenReverseCollatz = (n) => {\n  let reverse = [];\n  let collatz = [];\n  let temp = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reverse.push(n);\n      n = n / 2;\n    } else {\n      temp.push(n);\n      n = n * 3 + 1;\n    }\n  }\n  while (temp.length > 0) {\n    collatz.push(temp.pop());\n  }\n  return reverse.concat(collatz);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in reverse order and \n  the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddReverseCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddReverseCollatz = (n) => {\n  let reverse = [];\n  let collatz = [];\n  let temp = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reverse.push(n);\n      n = n / 2;\n    } else {\n      temp.push(n);\n      n = n * 3 + 1;\n    }\n  }\n  while (temp.length > 0) {\n    collatz.push(temp.pop());\n  }\n  return reverse.concat(collatz);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in reverse order and \n  the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenReverseCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenReverseCollatz = (n) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  if (lst.length < 2) return true\n  if (lst.length === 2) return lst[0] === lst[1]\n  let i = 0\n  let j = 1\n  while (i < lst.length - 1 && j < lst.length - 1) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return false;\n  if (start2 > end1) return false;\n  if (start2 >= start1 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start2 <= start1 && start2 >= end1) return false;\n  if (start2 <= start1 && start2 <= end1) return false;\n  if (start1 >= start2 && start1 <= end2) return false;\n  if (start1 <= start2 && start1 >= end2) return false;\n  if (start1 <= start2 && start2 <= end1) return false;\n  if (start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => []);\n  queue.forEach((row, i) => {\n    row.forEach((value, j) => {\n      if (!visited[i] &&!visited[j]) {\n        queue.push([i, j]);\n      }\n    });\n  });\n  while (queue.length > 0) {\n    const [x, y] = queue.shift();\n    visited[y] = true;\n    result.push(grid[x][y]);\n    queue.forEach((row, i) => {\n      if (!visited[i]) {\n        row.forEach((value, j) => {\n          if (grid[i][j] === grid[x][y] && visited[j]) {\n            queue.push([j, i]);\n          }\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the total number of water cells.\n\n  Example:\n\n  Input:\n  grid = [\n   [1,1,1],\n   [1,0,1],\n   [1,1,1]\n  ],\n  startRow = 1, startCol = 1\n\n  Output: 4\n\n  Explanation: \n  From the top left cell (1,1) there are 4 cells with value '1'.\n  From the top middle cell (1,2) there are 2 cells with value '1'.\n  From the bottom right cell (3,1) there are 2 cells with value '1'.\n  From the bottom middle cell (2,2) there are 1 cell with value '1'.\n*/\nconst countWaters = (grid, startRow, startCol) => {\n  const N = grid.length;\n  const result = 0;\n  for (let row = 0; row < N; row++) {\n    for (let col = 0; col < N; col++) {\n      if (grid[row][col] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the total number of land cells.\n\n  Example:\n\n  Input:\n  grid = [\n   [1,1,1],\n   [1,0,1],\n   [1,1,1]\n  ],\n  startRow = 1, startCol = 1\n\n  Output: 3\n\n  Explanation: \n  From the top left cell (1,1) there are 3 cells with value '1'.\n  From the top middle cell (1,2) there are 2 cells with value '1'.\n  From the bottom right cell (3,1) there are 1 cell with value '1'.\n  From the bottom middle cell (2,2) there are 0 cells with value '1'.\n*/\nconst countLands = (grid, startRow, startCol) => {\n  const N = grid.length;\n  const result = 0;\n  for (let row = 0; row < N; row++) {\n    for (let col = 0; col < N; col++) {\n      if (grid[row][col] === 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the total number of land cells.\n\n  Example:\n\n  Input:\n  grid = [\n   [1,1,1],\n   [1,0,1],\n   [1,1,1]\n  ],\n  startRow = 1, startCol = 1\n\n  Output: 3\n\n  Explanation: \n  From the top left cell (1,1) there are 3 cells with value '1'.\n  From the top middle cell (1,2) there are 2 cells with value '1'.\n  From the bottom right cell (3,1) there are 1 cell with value '1'.\n  From the bottom middle cell (2,2) there are 0 cells with value '1'.\n*/\nconst countLanes2 = (grid, startRow, startCol) => {\n  const N = grid.length;\n  const result = 0;\n  for (let row = 0; row < N; row++) {\n    for (let col = 0; col < N; col++) {\n      if (grid[row][col] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the total number of land cells.\n\n  Example:\n\n  Input:\n  grid = [\n   [1,1,1],\n   [1,0,1],\n   [1,1,1]\n  ],\n  startRow = 1, startCol = 1\n\n  Output: 3\n\n  Explanation: \n  From the top left cell (1,1) there are 3 cells with value '1'.\n  From the top middle cell (1,2) there are 2 cells with value '1'.\n  From the bottom right cell (3,1) there are 1 cell with value '1'.\n  From the bottom middle cell (2,2) there are 0 cells with value '1'.\n*/\nconst countLanes3 = (grid, startRow, startCol) => {\n  const N = grid.length;\n  const result = 0;\n  for (let row = 0; row < N; row++) {\n    for (let col = 0; col < N; col++) {\n      if (grid[row][col] === 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the total number of land cells.\n\n  Example:\n\n  Input:\n  grid = [\n   [1,1,1],\n   [1,0,1],\n   [1,1,1]\n  ],\n  startRow = 1, startCol = 1\n\n  Output: 3\n\n  Explanation: \n  From the top left cell (1,1) there are 3 cells with value '1'.\n  From the top middle cell (1,2) there are 2 cells with value '1'.\n  From the bottom right ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b\n  }\n  if (b === 0) {\n    return a\n  }\n  return rgeatestCommonDivisor(b, a % b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rgeatestCommonDivisor(a, b)\n}\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return 0\n  }\n  if (b === 0) {\n    return a\n  }\n  return a * b / rge", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n % 2 === 0) {\n    return [tir(n - 1) + tir(n - 2), tir(n - 1) + tir(n - 2) + tir(n + 1)];\n  }\n  return [tir(n - 1) + tir(n - 2), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1), tir(n - 1) + tir(n - 2) + tir(n + 1)];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all the\n  numbers of the Fibonacci sequence up to and including n.\n  Examples:\n  fib(3) = [1, 1, 2, 3]\n  fib(5) = [1, 1, 2, 3, 5, 8]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(30) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(40) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177564, 26752796094053, 4334944377744, 7014087334877, 11349031703695, 18363119032409, 29712150732408, 48075269763239, 77787420493239, 125862690253239, 203650110743239, 329512800993239, 53316291173239, 86267571272439, 13958386244592, 225851433717244, 365435296162439, 59128672987942, 956722026041199, 154800875592098, 250473078196198, 405273953788198, 655747031984198, 1061020985772398, 1716768017756398, 2675279609405498, 433494437774498, 701408733487759, 1134903170369598, 1836311903240979, 2971215073240978, 4807526976324979, 7778742049324979, 12586269025324979, 20365011074324979, 32951280099324979, 5331629117324979, 8626757127244979, 1395838624459198, 2258514337172498, 3654352961624979, 5912867298794998, 9567220260411979, 1548008755920979, 2504730781961979, 4052739537881979, 6557470319841979, 10610209857723979, 17167680177563979, 26752796094054979, 4334944377744999, 70140873348775979, 11349031703695979, 18363119032409797, 29712150732409797, 48075269763249797, 77787420493249797, 125862690253249797, 203650110743249797, 329512800993249797, 53316291173249797, 86267571272449797, 13958386244591979, 22585143371724979, 36543529616249797, 5912867298794999, 95672202604119797, 15480087559209797, 25047307819619797, 40527395378819797, 65574703198419797, 106102098577239797, 171676801775639797, 267527960940549797, 43349443777449997, 701408733487759797, 113490317036959797, 183631190324097976, 297121507324097976, 480752697632497976, 777874204932497976, 1258626902532497976, 2036501107432497976, 3295128009932497976, 533162911732497976, 862675712724497976, 139583862445919796, 225851433717249796, 365435296162497976, 59128672987949996, 95672202604119796, 15480087559209", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply2 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply3 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply4 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply5 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply6 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply7 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply8 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply9 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply10 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply11 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply12 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 14\n  */\nconst digitSumAndMultiply13 = (n) => {\n  let sum = 0;\n  let times = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      times++;\n    }\n  }\n  return sum * times;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times they appear.\n  For example:\n  digits(1)  == 1\n  digits(4)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested2('[[]]') ➞ true\n  isNested2('[]]]]]]][[[[[]') ➞ false\n  isNested2('[][]') ➞ false\n  isNested2('[]') ➞ false\n  isNested2('[[][]]') ➞ true\n  isNested2('[[]][[') ➞ true\n  */\nconst isNested2 = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested3('[[]]') ➞ true\n  isNested3('[]]]]]]][[[[[]') ➞ false\n  isNested3('[][]') ➞ false\n  isNested3('[]') ➞ false\n  isNested3('[[][]]') ➞ true\n  isNested3('[[]][[') ➞ true\n  */\nconst isNested3 = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested4('[[]]') ➞ true\n  isNested4('[]]]]]]][[[[[]') ➞ false\n  isNested4('[][]') ➞ false\n  isNested4('[]') ➞ false\n  isNested4('[[][]]') ➞ true\n  isNested4('[[]][[') ➞ true\n  */\nconst isNested4 = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested5('[[]]') ➞ true\n  isNested5('[]]]]]]][[[[[]') ➞ false\n  isNested5('[][]') ➞ false\n  isNested5('[]') ➞ false\n  isNested5('[[][]]') ➞ true\n  isNested5('[[]][[') ➞ true\n  */\nconst isNested5 = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested6('[[]]') ➞ true\n  isNested6('[]]]]]]][[[[[]') ➞ false\n  isNested6('[][]') ➞ false\n  isNested6('[]') ➞ false\n  isNested6('[[][]]') ➞ true\n  isNested6('[[]][[') ➞ true\n  */\nconst isNested6 = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  const closingBracketsCount = closingBrackets.reduce(\n    (acc, curr) => acc + (string.includes(curr)? 1 : 0),\n    0,\n  );\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested7('[[]]') ➞ true\n  isNested7('[]]]]]]][[[[[]') ➞ false\n  isNested7('[][]') ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of all numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 19\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquare = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 0.5);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot2 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot3 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 3);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot4 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 4);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot5 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 5);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot6 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 6);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquareRoot7 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 7);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f' || lastChar === '\\a';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsDigit = lastChar === '0' || lastChar === '1' || lastChar === '2' || lastChar === '3' || lastChar === '4' || lastChar === '5' || lastChar === '6' || lastChar === '7' || lastChar === '8' || lastChar === '9';\n  return lastCharIsDigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark, and false otherwise.\n  Examples:\n  checkIfLastCharIsPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsPunctuation = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsPunctuation = lastChar === '!' || lastChar === '?' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '\\''\n    || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '-' || lastChar === '/' || lastChar === '0';\n  return lastCharIsPunctuation;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  checkIfLastCharIsSymbol(\"apple pie\") ➞ false\n  checkIfLastCharIsSymbol(\"apple pi e\") ➞ true\n  checkIfLastCharIsSymbol(\"apple pi e \") ➞ false\n  checkIfLastCharIsSymbol(\"\") ➞ false\n  */\nconst checkIfLastCharIsSymbol = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsSymbol = lastChar === '@' || lastChar === '!' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '\\''\n    || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '-' || lastChar === '/' || lastChar === '0';\n  return lastCharIsSymbol;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Examples:\n  checkIfLastCharIsSpace(\"apple pie\") ➞ false\n  checkIfLastCharIsSpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsSpace = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f' || lastChar === '\\a';\n  return lastCharIsSpace;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsLetter(\"apple pie\") ➞ false\n  checkIfLastCharIsLetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsLetter = lastChar === 'a' || lastChar === 'b' || lastChar === 'c' || lastChar === 'd' || lastChar === 'e' || lastChar === 'f' || lastChar === 'g' || lastChar === 'h' || lastChar === 'i' || lastChar === 'j' || lastChar === 'k' || lastChar === 'l' || lastChar ==='m' || lastChar === 'n' || lastChar === 'o' || lastChar === 'p' || lastChar === 'q' || lastChar === 'r' || lastChar ==='s' || lastChar === 't' || lastChar === 'u' || lastChar === 'v' || lastChar === 'w' || lastChar === 'x' || lastChar === 'y' || lastChar === 'z';\n  return lastCharIsLetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsDigit = lastChar === '0' || lastChar === '1' || lastChar === '2' || lastChar === '3' || lastChar === '4' || lastChar === '5' || lastChar === '6' || lastChar === '7' || lastChar === '8' || lastChar === '9';\n  return lastCharIsDigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark, and false otherwise.\n  Examples:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Create a function which returns true if two arrays are equal and false if they\n  are not. The given arrays will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestNegative, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers2 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestNegative];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers3 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers4 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers5 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers6 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers7 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers8 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers9 = (lst) => {\n  const smallestNegative = lst.find((x) => x < 0);\n  const smallestPositive = lst.find((x) => x > 0);\n  return smallestNegative === smallestPositive? [smallestPositive, null] : [null, smallestPositive];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"1\" && b === \"1\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \".\") return null\n  if (a === \"0\" && b === \",\") return null\n  if (a === \"0\" && b === \"-\") return null\n  if (a === \"0\" && b === \"+\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  if (n <= 0) return false;\n  if (n === 4) return true;\n  if (n === 6) return true;\n  if (n === 8) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 6 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial2 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial3 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial4 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial5 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial6 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial7 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial8 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial9 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial10 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial11 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial12 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial13 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial14 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial15 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial16 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial17 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial18 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial19 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial20 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial21 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial22 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial23 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial24 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial25 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial26 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial27 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial28 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial29 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial30 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial31 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial32 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial33 = (n) => {\n  return math.factorial(n);\n};\n\n/*\n  A function that returns the factorial of a given number\n  using the factorial method from mathjs\n*/\nconst factorial34 = (n) => {\n  return math.factorial(n);\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(\n      0,\n      currentSuffix.length - 1\n    );\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n    );\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(\n      0,\n      currentSubstring.length - 1\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  return text.replace(/ /g, \"_\").replace(/  +/g, \"-\")\n}\n\n/*\n  Given a string text, remove all punctuation marks\n  \n  fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example1\"\n  fixPunctuation(\"Example!\") == \"Example!\"\n  fixPunctuation(\"Example?\") == \"Example?\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"Example;\"\n  fixPunctuation(\"Example :\") == \"Example:\"\n  fixPunctuation(\"Example ;\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^0-9a-z\\.]/g, '');\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n  const file_name = file_name.substring(0,1);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 3 === 0) {\n      sum += item * item;\n    } else if (index % 4 === 0) {\n      sum += item * item * item;\n    } else {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -5\n  */\nconst sumAdd = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum += item;\n    } else if (item <= 5) {\n      sum -= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumSub = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum += item;\n    } else if (item <= 5) {\n      sum -= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumMul = (lst) => {\n  let sum = 1;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum *= item;\n    } else if (item <= 5) {\n      sum *= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumDiv = (lst) => {\n  let sum = 1;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum *= item;\n    } else if (item <= 5) {\n      sum *= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumPow = (lst) => {\n  let sum = 1;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum *= item;\n    } else if (item <= 5) {\n      sum *= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumMod = (lst) => {\n  let sum = 1;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum *= item;\n    } else if (item <= 5) {\n      sum *= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumDivMod = (lst) => {\n  let sum = 1;\n  lst.forEach((item, index) => {\n    if (item >= 5) {\n      sum *= item;\n    } else if (item <= 5) {\n      sum *= item;\n    }\n  });\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry to itself if the \n  integer entry is greater than or equal to 5 and will subtract the integer entry from itself if the integer entry is less than \n  or equal to 5. The function will not change the entries in the list whose entries are greater than or equal to 5 or less than \n  or equal to 5. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec,\n  wrodsInSentenec2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec3,\n  wrodsInSentenec4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec5 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec5,\n  wrodsInSentenec6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec7 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec7,\n  wrodsInSentenec8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec9 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec9,\n  wrodsInSentenec10 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec11 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec11,\n  wrodsInSentenec12 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec13 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0 && result.indexOf(word) === -1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wrodsInSentenec13,\n  wrodsInSentenec14 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "<|endoftext|>/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  // Your code here\n}\n\n// Test Cases\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for simplifying fractions.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for simplifying fractions.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a tags=javascript |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a tags=javascript |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction simplifyFraction(fraction) {\n  let [numerator, denominator] = fraction.split('/');\n  \n  if (numerator === denominator) {\n    return fraction;\n  }\n  \n  if (numerator === 0) {\n    return `${numerator}/${denominator}`;\n  }\n  \n  if (denominator === 0) {\n    return `${numerator}`;\n  }\n  \n  return `${numerator}/${denominator}`;\n}\n\nconsole.log(simplifyFraction('1/5'));\nconsole.log(simplifyFraction('1/6'));\nconsole.log(simplifyFraction('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question clearly. My question was how to simplify the expression. For example, simplify \"1/5\" to \"1/2\".\n<|/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(a) - sumOfDigits(b));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => sumOfDigits(b) - sumOfDigits(a));\n  return numsSorted;\n};\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array.\n  For example:\n  specialSum([15, -73, 14, -15]) => -55\n  specialSum([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst specialSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the elements in the array.\n  For example:\n  specialProd([15, -73, 14, -15]) => -70\n  specialProd([33, -2, -3, 45, 21, 109]) => -2730\n  */\nconst specialProd = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  specialMax([15, -73, 14, -15]) => -15\n  specialMax([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst specialMax = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  specialMin([15, -73, 14, -15]) => -15\n  specialMin([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMin = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the even numbers in the array.\n  For example:\n  evenSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -55\n  */\nconst evenSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the odd numbers in the array.\n  For example:\n  oddSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst oddSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 3.\n  For example:\n  divisibleSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 5.\n  For example:\n  divisibleSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 7.\n  For example:\n  divisibleSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 11.\n  For example:\n  divisibleSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 15.\n  For example:\n  divisibleSum([15, -73, 14, -15, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -16, -17, -19, -20, -21, -22, -23, -24, -25, -26, -27, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTrpiles(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThis solution does not work for all cases. For example, `getMaxTrpiles(3)` returns `0`, but `getMaxTrpiles(4)` returns `1`.\n<|/ c |>\n<| c |>\nYeah, I noticed that and fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(planet => planet === planet1);\n  const planet2 = planets.findIndex(planet => planet === planet2);\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1);\n  const orbit2 = orbit(planet2);\n  const orbit1Distance = distance(orbit1, orbit2);\n  const orbit2Distance = distance(orbit2, orbit1);\n  const planetsBetween = planets.filter(\n    planet => orbit1Distance <= distance(orbit(planet), orbit2) && orbit2Distance <= distance(orbit(planet), orbit1)\n  );\n  return planetsBetween.sort((a, b) => orbit1Distance - orbit2Distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(planet => planet === planet1);\n  const planet2 = planets.findIndex(planet => planet === planet2);\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1);\n  const orbit2 = orbit(planet2);\n  const orbit1Distance = distance(orbit1, orbit2);\n  const orbit2Distance = distance(orbit2, orbit1);\n  const planetsBetween = planets.filter(\n    planet => orbit1Distance <= distance(orbit(planet), orbit2) && orbit2Distance <= distance(orbit(planet), orbit1)\n  );\n  return planetsBetween.sort((a, b) => orbit1Distance - orbit2Distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(planet => planet === planet1);\n  const planet2 = planets.findIndex(planet => planet === planet2);\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1);\n  const orbit2 = orbit(planet2);\n  const orbit1Distance = distance(orbit1, orbit2);\n  const orbit2Distance = distance(orbit2, orbit1);\n  const planetsBetween = planets.filter(\n    planet => orbit1Distance <= distance(orbit(planet), orbit2) && orbit2Distance <= distance(orbit(planet), orbit1)\n  );\n  return planetsBetween.sort((a, b) => orbit1Distance - orbit2Distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const plan", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => word.length)\n   .filter((word) => word % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((word) => word)\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  let s = '';\n  for (let i = start; i <= end; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n  return evenSum + doublehTeDifference(lst.slice(1));\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => {\n    return acc + (curr % 2? 1 : 0);\n  }, 0);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| c |>\nNo problem, glad I could help.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  game.forEach((score, index) => {\n    const guessedCorrectly = guess.includes(index);\n    const difference = Math.abs(guess - score);\n    if (guessedCorrectly) {\n      result.push(0);\n    } else {\n      result.push(difference);\n    }\n  });\n  return result;\n}\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const extension_strength = class_name_length - extension_length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, 'abba' has two 'a's so\n  the function should return 2.\n  Write a function that takes a string and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  if (a.length === 0 || b.length === 0) return false;\n  if (a.length === 1 && b.length === 1) return a[0] === b[0];\n  if (a.length === 2 && b.length === 2) return a[0] === b[0] && a[1] === b[1];\n  if (a.length === 3 && b.length === 3) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  if (a.length === 4 && b.length === 4) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  if (a.length === 5 && b.length === 5) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4];\n  if (a.length === 6 && b.length === 6) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n  if (a.length === 7 && b.length === 7) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6];\n  if (a.length === 8 && b.length === 8) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n  if (a.length === 9 && b.length === 9) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n  if (a.length === 10 && b.length === 10) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9];\n  if (a.length === 11 && b.length === 11) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10];\n  if (a.length === 12 && b.length === 12) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11];\n  if (a.length === 13 && b.length === 13) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12];\n  if (a.length === 14 && b.length === 14) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13];\n  if (a.length === 15 && b.length === 15) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14];\n  if (a.length === 16 && b.length === 16) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternCheck(\"abcd\",\"abd\") => true\n  ccypatternCheck(\"hello\",\"ell\") => true\n  ccypatternCheck(\"whassup\",\"psus\") => true\n  ccypatternCheck(\"abab\",\"baa\") => true\n  ccypatternCheck(\"efef\",\"eeff\") => true\n  ccypatternCheck(\"himenss\",\"simen\") => true\n  */\nconst ccypatternCheck = (a, b) => {\n  if (a.length === 0 || b.length === 0) return false;\n  if (a.length === 1 && b.length === 1) return a[0] === b[0];\n  if (a.length === 2 && b.length === 2) return a[0] === b[0] && a[1] === b[1];\n  if (a.length === 3 && b.length === 3) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  if (a.length === 4 && b.length === 4) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  if (a.length === 5 && b.length === 5) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4];\n  if (a.length === 6 && b.length === 6) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n  if (a.length === 7 && b.length === 7) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6];\n  if (a.length === 8 && b.length === 8) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n  if (a.length === 9 && b.length === 9) return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const roman = romanize(number);\n  return roman.charAt(0).toLowerCase() + roman.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxRioman(19) == 'XIX'\n  >>> intToMaxRioman(152) == 'CLII'\n  >>> intToMaxRioman(426) == 'CDXXVI'\n  */\nconst intToMaxRioman = (number) => {\n  const roman = romanize(number);\n  return roman.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinDecimal(19) == '19'\n  >>> intToMinDecimal(152) == '152'\n  >>> intToMinDecimal(426) == '426'\n  */\nconst intToMinDecimal = (number) => {\n  const decimal = decimalize(number);\n  return decimal.charAt(0).toLowerCase() + decimal.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxDecimal(19) == '19'\n  >>> intToMaxDecimal(152) == '152'\n  >>> intToMaxDecimal(426) == '426'\n  */\nconst intToMaxDecimal = (number) => {\n  const decimal = decimalize(number);\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinBinary(19) == '11'\n  >>> intToMinBinary(152) == '111'\n  >>> intToMinBinary(426) == '1111'\n  */\nconst intToMinBinary = (number) => {\n  const binary = binaryize(number);\n  return binary.charAt(0).toLowerCase() + binary.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxBinary(19) == '11'\n  >>> intToMaxBinary(152) == '111'\n  >>> intToMaxBinary(426) == '1111'\n  */\nconst intToMaxBinary = (number) => {\n  const binary = binaryize(number);\n  return binary.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinHex(19) == '19'\n  >>> intToMinHex(152) == '152'\n  >>> intToMinHex(426) == '426'\n  */\nconst intToMinHex = (number) => {\n  const hex = hexadecimalize(number);\n  return hex.charAt(0).toLowerCase() + hex.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxHex(19) == '19'\n  >>> intToMaxHex(152) == '152'\n  >>> intToMaxHex(426) == '426'\n  */\nconst intToMaxHex = (number) => {\n  const hex = hexadecimalize(number);\n  return hex.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinOctal(19) == '19'\n  >>> intToMinOctal(152) == '152'\n  >>> intToMinOctal(426) == '426'\n  */\nconst intToMinOctal = (number) => {\n  const octal = octalize(number);\n  return octal.charAt(0).toLowerCase() + octal.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxOctal(19) == '19'\n  >>> intToMaxOctal(152) == '152'\n  >>> intToMaxOctal(426) == '426'\n  */\nconst intToMaxOctal = (number) => {\n  const octal = octalize(number);\n  return octal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinHex(19) == '19'\n  >>> intToMinHex(152) == '152'\n  >>> intToMinHex(426) == '426'\n  */\nconst intToMinDecimal = (number) => {\n  const decimal = decimalize(number);\n  return decimal.charAt(0).toLowerCase() + decimal.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxHex(19) == '19'\n  >>> intToMaxHex(152) == '152'\n  >>> intToMaxHex(426) == '426'\n  */\nconst intToMaxDecimal = (number) => {\n  const decimal = decimalize(number);\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinBinary(19) == '11'\n  >>> intToMinBinary(152) == '111'\n  >>> intToMinBinary(426) == '1111'\n  */\nconst intToMinBinary = (number) => {\n  const binary = binaryize(number);\n  return binary.charAt(0).toLowerCase() + binary.slice(1);\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxBinary(19) == '11'\n  >>> intToMaxBinary(152) == '111'\n  >>> intToMaxBinary(426) == '1111'\n  */\nconst intToMaxBinary = (number) => {\n  const binary = binaryize(number);\n  return binary.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinHex(19) == '19'\n  >>> intToMinHex(152) == '152'\n  >>> intToMinHex(426) == '426'\n  */\nconst intToMinHex = (number) => {\n  const hex = hexadecimalize(number);\n  return hex.charAt(0).toLowerCase() + hex.slice(1);\n};\n\n/*\n  Given a positive integer, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) <= Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 270 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 270 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 270 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) === Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMin = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findAvg([\"name\", \"of\", \"string\"]) === \"string\"\n  findAvg([\"name\", \"enam\", \"game\"]) === \"name\"\n  findAvg([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findAvg = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMaxUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMaxUnique = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMinUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMinUnique = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findAvgUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findAvgUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findAvgUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findAvgUnique = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    sum += count;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMaxUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMaxUnique = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findMinUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMinUnique = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count < min) {\n      min = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with average number\n  of unique characters. If multiple strings have average number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findAvgUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  findAvgUnique([\"name\", \"enam\", \"game\"]) === \"name\"\n  findAvgUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findAvgUnique = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // Your code here\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let carrots_left = 0;\n  let carrots_left2 = 0;\n  let carrots_left3 = 0;\n  let carrots_left4 = 0;\n  let carrots_left5 = 0;\n  let carrots_left6 = 0;\n  let carrots_left7 = 0;\n  let carrots_left8 = 0;\n  let carrots_left9 = 0;\n  let carrots_left10 = 0;\n  let carrots_left11 = 0;\n  let carrots_left12 = 0;\n  let carrots_left13 = 0;\n  let carrots_left14 = 0;\n  let carrots_left15 = 0;\n  let carrots_left16 = 0;\n  let carrots_left17 = 0;\n  let carrots_left18 = 0;\n  let carrots_left19 = 0;\n  let carrots_left20 = 0;\n  let carrots_left21 = 0;\n  let carrots_left22 = 0;\n  let carrots_left23 = 0;\n  let carrots_left24 = 0;\n  let carrots_left25 = 0;\n  let carrots_left26 = 0;\n  let carrots_left27 = 0;\n  let carrots_left28 = 0;\n  let carrots_left29 = 0;\n  let carrots_left30 = 0;\n  let carrots_left31 = 0;\n  let carrots_left32 = 0;\n  let carrots_left33 = 0;\n  let carrots_left34 = 0;\n  let carrots_left35 = 0;\n  let carrots_left36 = 0;\n  let carrots_left37 = 0;\n  let carrots_left38 = 0;\n  let carrots_left39 = 0;\n  let carrots_left40 = 0;\n  let carrots_left41 = 0;\n  let carrots_left42 = 0;\n  let carrots_left43 = 0;\n  let carrots_left44 = 0;\n  let carrots_left45 = 0;\n  let carrots_left46 = 0;\n  let carrots_left47 = 0;\n  let carrots_left48 = 0;\n  let carrots_left49 = 0;\n  let carrots_left50 = 0;\n  let carrots_left51 = 0;\n  let carrots_left52 = 0;\n  let carrots_left53 = 0;\n  let carrots_left54 = 0;\n  let carrots_left55 = 0;\n  let carrots_left56 = 0;\n  let carrots_left57 = 0;\n  let carrots_left58 = 0;\n  let carrots_left59 = 0;\n  let carrots_left60 = 0;\n  let carrots_left61 = 0;\n  let carrots_left62 = 0;\n  let carrots_left63 = 0;\n  let carrots_left64 = 0;\n  let carrots_left65 = 0;\n  let carrots_left66 = 0;\n  let carrots_left67 = 0;\n  let carrots_left68 = 0;\n  let carrots_left69 = 0;\n  let carrots_left70 = 0;\n  let carrots_left71 = 0;\n  let carrots_left72 = 0;\n  let carrots_left73 = 0;\n  let carrots_left74 = 0;\n  let carrots_left75 = 0;\n  let carrots_left76 = 0;\n  let carrots_left77 = 0;\n  let carrots_left78 = 0;\n  let carrots_left79 = 0;\n  let carrots_left80 = 0;\n  let carrots_left81 = 0;\n  let carrots_left82 = 0;\n  let carrots_left83 = 0;\n  let carrots_left84 = 0;\n  let carrots_left85 = 0;\n  let carrots_left86 = 0;\n  let carrots_left87 = 0;\n  let carrots_left88 = 0;\n  let carrots_left89 = 0;\n  let carrots_left90 = 0;\n  let carrots_left91 = 0;\n  let carrots_left92 = 0;\n  let carrots_left93 = 0;\n  let carrots_left94 = 0;\n  let carrots_left95 = 0;\n  let carrots_left96 = 0;\n  let carrots_left97 = 0;\n  let carrots_left98 = 0;\n  let carrots_left99 = 0;\n  let carrots_left100 = 0;\n  let carrots_left101 = 0;\n  let carrots_left102 = 0;\n  let carrots_left103 = 0;\n  let carrots_left104 = 0;\n  let carrots_left105 = 0;\n  let carrots_left106 = 0;\n  let carrots_left107 = 0;\n  let carrots_left108 = 0;\n  let carrots_left109 = 0;\n  let carrots_left110 = 0;\n  let carrots_left111 = 0;\n  let carrots_left112 = 0;\n  let carrots_left113 = 0;\n  let carrots_left114 = 0;\n  let carrots_left115 = 0;\n  let carrots_left116 = 0;\n  let carrots_left117 = 0;\n  let carrots_left118 = 0;\n  let carrots_left119 = 0;\n  let carrots_left120 = 0;\n  let carrots_left121 = 0;\n  let carrots_left122 = 0;\n  let carrots_left123 = 0;\n  let carrots_left124 = 0;\n  let carrots_left125 = 0;\n  let carrots_left126 = 0;\n  let carrots_left127 = 0;\n  let carrots_left128 = 0;\n  let carrots_left129 = 0;\n  let carrots_left130 = 0;\n  let carrots_left131 = 0;\n  let carrots_left132 = 0;\n  let carrots_left133 = 0;\n  let carrots_left134 = 0;\n  let carrots_left135 = 0;\n  let carrots_left136 = 0;\n  let carrots_left137 = 0;\n  let carrots_left138 = 0;\n  let carrots_left139 = 0;\n  let carrots_left140 = 0;\n  let carrots_left141 = 0;\n  let carrots_left142 = 0;\n  let carrots_left143 = 0;\n  let carrots_left144 = 0;\n  let carrots_left145 = 0;\n  let carrots_left146 = 0;\n  let carrots_left147 = 0;\n  let carrots_left148 = 0;\n  let carrots_left149 = 0;\n  let carrots_left150 = 0;\n  let carrots_left151 = 0;\n  let carrots_left152 = 0;\n  let carrots_left153 = 0;\n  let carrots_left154 = 0;\n  let carrots_left155 = 0;\n  let carrots_left156 = 0;\n  let carrots_left157 = 0;\n  let carrots_left158 = 0;\n  let carrots_left159 = 0;\n  let carrots_left160 = 0;\n  let car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength] * operatorList[operatorLength];\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s has been \n  replaced by the number of times it appears in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count(\"hi-bye\") --> \"3hi1by2\"\n  count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = new Sha1()\n  sha1.update(text)\n  return sha1.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = new Sha256()\n  sha256.update(text)\n  return sha256.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = new Sha512()\n  sha512.update(text)\n  return sha512.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = new Sha1()\n  sha1.update(text)\n  return sha1.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = new Sha256()\n  sha256.update(text)\n  return sha256.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = new Sha512()\n  sha512.update(text)\n  return sha512.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = new Sha1()\n  sha1.update(text)\n  return sha1.digest()\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = new Sha256()\n  sha256.update(text)\n  return sha256.digest()\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = new Sha512()\n  sha512.update(text)\n  return sha512.digest()\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = new Md5()\n  md5.update(text)\n  return md5.digest()\n}\n\n/*\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits, in ascending order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 14\n  sumOfDigits(100) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n  sumOfDigits(101) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n  sumOfDigits(999) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 66\n  sumOfDigits(1000) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 78\n  sumOfDigits(1001) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 91\n  sumOfDigits(1002) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 94\n  sumOfDigits(1003) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 97\n  sumOfDigits(1004) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 99\n  sumOfDigits(1005) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 = 109\n  sumOfDigits(1006) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 112\n  sumOfDigits(1007) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 = 115\n  sumOfDigits(1008) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 = 117\n  sumOfDigits(1009) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 = 119\n  sumOfDigits(1010) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 = 121\n  sumOfDigits(1011) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 = 123\n  sumOfDigits(1012) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 = 126\n  sumOfDigits(1013) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 = 128\n  sumOfDigits(1014) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 = 130\n  sumOfDigits(1015) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 = 131\n  sumOfDigits(1016) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 = 134\n  sumOfDigits(1017) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 = 137\n  sumOfDigits(1018) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 = 139\n  sumOfDigits(1019) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 = 141\n  sumOfDigits(1020) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 = 143\n  sumOfDigits(1021) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 = 146\n  sumOfDigits(1022) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 = 148\n  sumOfDigits(1023) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 = 150\n  sumOfDigits(1024) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic2 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic3 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic4 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic5 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic6 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic7 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic8 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic9 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic10 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic11 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n      current_beat = 1;\n    } else {\n      throw new Error('Invalid note'+ note);\n    }\n  }\n  return beats;\n};\n\nconst parseMusic12 = music_string => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (note === '.|') {\n      beats.push(current_beat);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(' ');\n  numberArray.sort((a, b) => {\n    return a - b;\n  });\n  return numberArray.join(' ');\n};\n\n/* Given a string, return a string with each word capitalized.\n  >>> capitalizeWords('one two three')\n  'One Two Three'\n  */\nconst capitalizeWords = (words) => {\n  return words.split(' ').map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n  */\nconst removeNonAlpha = (words) => {\n  return words.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, return a string with all non-alphanumeric characters removed.\n  >>> removeNonAlpha('one two three')\n  'one two three'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseFloat(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number with leading zeros.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerIntWithLeadingZeros = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return padLeft(parseInt(integerPart), integerPart.length, '0');\n};\n\n/**\n * Given a positive ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPair = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPair;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPair = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPair = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPair;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairs = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex2 = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex3 = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex4 = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex5 = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPairs = sortedNumbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      return [curr, curr];\n    }\n    const prev = sortedNumbers[i - 1];\n    const next = sortedNumbers[i];\n    const diff = Math.abs(curr - prev);\n    const diff2 = Math.abs(curr - next);\n    if (diff < diff2) {\n      return [curr, prev];\n    }\n    return [prev, curr];\n  });\n  return closestPairs;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that add up to a specific number\n * e.g. [2, 3, 5] -> [3, 5]\n * @param {number[]} numbers - array of numbers to find pairs for\n * @param {number} target - number to find pairs for\n * @returns {number[]} array of two numbers that add up to target\n */\nconst findClosestPairsIndex6 = (numbers, target) => {\n  const sortedNumbers = numbers.sort((a, b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegersFloat = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value) || Number.isFloat(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  ['abc', {}, []]\n  */\nconst filetrItnegersString = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [true, false]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filetrItnegersBoolean = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filetrItnegers(['a', 3.14, 5])\n  [null]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filetrItnegersNone = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (value === null) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filetrItnegersDict = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersList = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.is", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break\n    }\n    length++\n  }\n  return length\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  2\n  >>> strrindex('abc', 'd')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  let index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring[0]) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'a')\n  3\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxDividend = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDividend = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minDividend = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]++;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  numbers.forEach((n) => {\n    if (hash[n]) {\n      hash[n]--;\n    } else {\n      hash[n] = 1;\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with the first letter capitalized.\n  >>> capitalize('hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeWords('hello world')\n  'Hello World'\n  */\nconst capitalizeWords = (string) => {\n  return string.split(' ').map(capitalize).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeWords('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map((word) => capitalize(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWords = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetter(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWords('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirstLetterWordsCaseInsensitive('hello world')\n  'Hello World'\n  */\nconst capitalizeFirstLetterWordsCaseInsensitive = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterCaseInsensitive(word[0])).join(' ');\n};\n\n/**\n * Given a string, return ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([1,2,3])\n  ['1', '2', '3']\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber(['1', '2', '3'])\n  [1, 2, 3]\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.map((str) => parseInt(str, 10));\n};\n\n/* Convert an array of numbers into an array of strings\n  >>> numbersToString([])\n  []\n  */\nconst numbersToString = (numbers) => {\n  return numbers.map((num) => num.toString());\n};\n\n/* Convert an array of strings into an array of numbers\n  >>> stringsToNumber([])\n  []\n  */\nconst stringsToNumber = (strings) => {\n  return strings.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix([], 'a')\n  []\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstring([], 'a')\n  []\n  >>> iflterByrSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNotSubstring([], 'a')\n  []\n  >>> iflterByrNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNotSuffix([], 'a')\n  []\n  >>> iflterByrNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNotSubstring([], 'a')\n  []\n  >>> iflterByrNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNotSuffix([], 'a')\n  []\n  >>> iflterByrNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNotSubstring([], 'a')\n  []\n  >>> iflterByrNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNotSuffix([], 'a')\n  []\n  >>> iflterByrNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNotSubstring([], 'a')\n  []\n  >>> iflterByrNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNotSuffix([], 'a')\n  []\n  >>> iflterByrNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNotSubstring([], 'a')\n  []\n  >>> iflterByrNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return strings.filter(s =>!s.start", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeorpassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter(n =>!isNaN(n));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getStrings = (l) => {\n  return l.filter(n => typeof n === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false, true])\n  [true, false, true]\n  >>> getBooleans([false, false, true])\n  [false, false, true]\n  */\nconst getBooleans = (l) => {\n  return l.filter(n => typeof n === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter(n => typeof n === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], {}])\n  [[], [], [], {}]\n  */\nconst getArrays = (l) => {\n  return l.filter(n => Array.isArray(n));\n};\n\n/*Return only nulls in the list.\n  >>> getNulls([null, null, null])\n  [null, null, null]\n  >>> getNulls([null, null, null, {}])\n  [null, null, null, {}]\n  */\nconst getNulls = (l) => {\n  return l.filter(n => n === null);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(n => n.length === 0);\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyArrays([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(n => n.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects({})\n  {}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\"})\n  {\"a\": \"b\", \"c\": \"d\"}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"})\n  {\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter(n => Object.keys(n).length === 0);\n};\n\n/*Return only empty strings and arrays in the list.\n  >>> getEmptyStringsAndArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndArrays([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndArrays([])\n  []\n  >>> getEmptyStringsAndArrays([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndArrays = (l) => {\n  return l.filter(n => n.length === 0 || n.length === 0);\n};\n\n/*Return only empty strings and objects in the list.\n  >>> getEmptyStringsAndObjects([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndObjects([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndObjects([])\n  []\n  >>> getEmptyStringsAndObjects([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndObjects = (l) => {\n  return l.filter(n => n.length === 0 || Object.keys(n).length === 0);\n};\n\n/*Return only empty strings and nulls in the list.\n  >>> getEmptyStringsAndNulls([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndNulls([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndNulls([])\n  []\n  >>> getEmptyStringsAndNulls([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndNulls = (l) => {\n  return l.filter(n => n.length === 0 || n === null);\n};\n\n/*Return only empty strings and booleans in the list.\n  >>> getEmptyStringsAndBooleans([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndBooleans([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndBooleans([])\n  []\n  >>> getEmptyStringsAndBooleans([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndBooleans = (l) => {\n  return l.filter(n => n.length === 0 || n === false);\n};\n\n/*Return only empty strings and numbers in the list.\n  >>> getEmptyStringsAndNumbers([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndNumbers([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndNumbers([])\n  []\n  >>> getEmptyStringsAndNumbers([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndNumbers = (l) => {\n  return l.filter(n => n.length === 0 || isNaN(n));\n};\n\n/*Return only empty strings and strings in the list.\n  >>> getEmptyStringsAndStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStringsAndStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getEmptyStringsAndStrings([])\n  []\n  >>> getEmptyStringsAndStrings([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  */\nconst getEmptyStringsAndStrings = (l) => {\n  return l.filter(n => n.length === 0 || typeof n === \"string\");\n};\n\n/*Return only empty strings and booleans in the list.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxNonZeroCoefficient = 0;\n  for (let index = 0; index < xs.length; index++) {\n    if (xs[index]!== 0) {\n      maxNonZeroCoefficient = index;\n    }\n  }\n  for (let index = 0; index < xs.length; index++) {\n    if (xs[index] === 0) {\n      zeroPoint = index;\n    }\n  }\n  return zeroPoint + (maxNonZeroCoefficient * maxNonZeroCoefficient);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let index = 0; index < xs.length; index++) {\n    if (xs[index] > maxCoefficient) {\n      maxCoefficient = xs[index];\n      maxPoint = index;\n    }\n  }\n  return maxPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let index = 0; index < xs.length; index++) {\n    if (xs[index] < minCoefficient) {\n      minCoefficient = xs[index];\n      minPoint = index;\n    }\n  }\n  return minPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMin = (xs) => {\n  let maxPoint = findMax(xs);\n  let minPoint = findMin(xs);\n  return maxPoint < minPoint? maxPoint : minPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMinAll = (xs) => {\n  let maxPoint = findMax(xs);\n  let minPoint = findMin(xs);\n  return maxPoint < minPoint? maxPoint : minPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMinAllEven = (xs) => {\n  let maxPoint = findMax(xs);\n  let minPoint = findMin(xs);\n  return maxPoint < minPoint? maxPoint : minPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourty, while its values at the indicies that are divisible by fourty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFourty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 40 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fifty, while its values at the indicies that are divisible by fifty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 50 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by sixty, while its values at the indicies that are divisible by sixty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSixty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSixty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 60 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seventy, while its values at the indicies that are divisible by seventy are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventy([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventy([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort().map(Number)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  >>> [5, 3, 9, 0, 123]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [5, 3, 9, 0, 123, 5]\n  >>> [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of elements in the list that are less than the given number.\n  >>> productLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst productLessThan = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of elements in the list that are less than or equal to the given number.\n  >>> productLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst productLessThanOrEqual = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of elements in the list that are greater than the given number.\n  >>> productGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst productGreaterThan = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of elements in the list that are greater than or equal to the given number.\n  >>> productGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst productGreaterThanOrEqual = (l, num) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumEqualOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumEqualOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumEqualOrLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumEqualOrLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumEqualOrGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumEqualOrGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -55\n  */\nconst sumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumEqualOrEqual(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sotrEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddEvenOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddOddOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddEvenOddOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character and one character.\n  */\nconst encodeCyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and one character.\n  */\nconst encodeCyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and two characters.\n  */\nconst encodeCyclic3c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters and two characters.\n  */\nconst encodeCyclic4c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 79) {\n    return 79;\n  }\n  if (n === 83) {\n    return 83;\n  }\n  if (n === 89) {\n    return 89;\n  }\n  if (n === 97) {\n    return 97;\n  }\n  if (n === 101) {\n    return 101;\n  }\n  if (n === 103){\n    return 103;\n  }\n  if (n === 105){\n    return 105;\n  }\n  if (n === 107){\n    return 107;\n  }\n  if (n === 109){\n    return 109;\n  }\n  if (n === 113){\n    return 113;\n  }\n  if (n === 121){\n    return 121;\n  }\n  if (n === 123){\n    return 123;\n  }\n  if (n === 125){\n    return 125;\n  }\n  if (n === 129){\n    return 129;\n  }\n  if (n === 131){\n    return 131;\n  }\n  if (n === 133){\n    return 133;\n  }\n  if (n === 135){\n    return 135;\n  }\n  if (n === 137){\n    return 137;\n  }\n  if (n === 139){\n    return 139;\n  }\n  if (n === 141){\n    return 141;\n  }\n  if (n === 143){\n    return 143;\n  }\n  if (n === 145){\n    return 145;\n  }\n  if (n === 147){\n    return 147;\n  }\n  if (n === 149){\n    return 149;\n  }\n  if (n === 151){\n    return 151;\n  }\n  if (n === 153){\n    return 153;\n  }\n  if (n === 155){\n    return 155;\n  }\n  if (n === 157){\n    return 157;\n  }\n  if (n === 159){\n    return 159;\n  }\n  if (n === 161){\n    return 161;\n  }\n  if (n === 163){\n    return 163;\n  }\n  if (n === 165){\n    return 165;\n  }\n  if (n === 167){\n    return 167;\n  }\n  if (n === 169){\n    return 169;\n  }\n  if (n === 171){\n    return 171;\n  }\n  if (n === 173){\n    return 173;\n  }\n  if (n === 175){\n    return 175;\n  }\n  if (n === 177){\n    return 177;\n  }\n  if (n === 179){\n    return 179;\n  }\n  if (n === 181){\n    return 181;\n  }\n  if (n === 183){\n    return 183;\n  }\n  if (n === 185){\n    return 185;\n  }\n  if (n === 187){\n    return 187;\n  }\n  if (n === 189){\n    return 189;\n  }\n  if (n === 191){\n    return 191;\n  }\n  if (n === 193){\n    return 193;\n  }\n  if (n === 195){\n    return 195;\n  }\n  if (n === 197){\n    return 197;\n  }\n  if (n === 199){\n    return 199;\n  }\n  if (n === 201){\n    return 201;\n  }\n  if (n === 203){\n    return 203;\n  }\n  if (n === 205){\n    return 205;\n  }\n  if (n === 207){\n    return 207;\n  }\n  if (n === 209){\n    return 209;\n  }\n  if (n === 211){\n    return 211;\n  }\n  if (n === 213){\n    return 213;\n  }\n  if (n === 215){\n    return 215;\n  }\n  if (n === 217){\n    return 217;\n  }\n  if (n === 219){\n    return 219;\n  }\n  if (n === 221){\n    return 221;\n  }\n  if (n === 223){\n    return 223;\n  }\n  if (n === 225){\n    return 225;\n  }\n  if (n === 227){\n    return 227;\n  }\n  if (n === 229){\n    return 229;\n  }\n  if (n === 231){\n    return 231;\n  }\n  if (n === 233){\n    return 233;\n  }\n  if (n === 235){\n    return 235;\n  }\n  if (n === 237){\n    return 237;\n  }\n  if (n === 239){\n    return 239;\n  }\n  if (n === 241){\n    return 241;\n  }\n  if (n === 243){\n    return 243;\n  }\n  if (n === 245){\n    return 245;\n  }\n  if (n === 247){\n    return 247;\n  }\n  if (n === 249){\n    return 249;\n  }\n  if (n === 251){\n    return 251;\n  }\n  if (n === 253){\n    return 253;\n  }\n  if (n === 255){\n    return 255;\n  }\n};\n\n/*\n  primeSieve returns n-th number that is a prime number and it's also prime (mod n).\n  >>> primeSieve(1)\n  2\n  >>> primeSieve(2)\n  3\n  >>> primeSieve(3)\n  5\n  >>> primeSieve(4)\n  7\n  >>> primeSieve(5)\n  11\n  >>> primeSieve(6)\n  13\n  >>> primeSieve(7)\n  17\n  >>> primeSieve(8)\n  19\n  >>> primeSieve(9)\n  23\n  >>> primeSieve(10)\n  29\n  >>> primeSieve(11)\n  31\n  >>> primeSieve(12)\n  37\n  >>> primeSieve(13)\n  41\n  >>> primeSieve(14)\n  43\n  >>> primeSieve(15)\n  47\n  >>> primeSieve(16)\n  53\n  >>> primeSieve(17)\n  59\n  >>> primeSieve(18)\n  61\n  >>> primeSieve(19)\n  67\n  >>> primeSieve(20)\n  71\n  >>> primeSieve(21)\n  73\n  >>> primeSieve(22)\n  79\n  >>> primeSieve(23)\n  83\n  >>> primeSieve(24)\n  89\n  >>> primeSieve(25)\n  97\n  >>> primeSieve(26)\n  101\n  >>> primeS", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((x) => Math.abs(x - meanValue)).sum() / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((x) => Math.pow((x - meanValue), 2)).sum() / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSD = average | x - x_mean |^2\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return Math.sqrt(meanSquaredDeviation(numbers));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  STD = average | x - x_mean |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/* For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the average squared difference between each element and a\n  centerpoint (mean in this case):\n  VAR = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((x) => Math.pow((x - meanValue), 2)).sum() / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Standard Error\n  around the mean of this dataset.\n  Standard Error is the standard deviation divided by the square root of\n  the variance:\n  SE = standard deviation / sqrt(variance)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const meanValue = mean(numbers);\n  return Math.sqrt(variance(numbers) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Kurtosis\n  around the mean of this dataset.\n  Kurtosis is the third central moment divided by the square root of the\n  variance:\n  Kurtosis = 3rd central moment / sqrt(variance)\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst kurtosis = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((x) => Math.pow((x - meanValue), 3))\n   .sum() / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Skewness\n  around the mean of this dataset.\n  Skewness is the third central moment divided by the square root of the\n  variance:\n  Skewness = 3rd central moment / sqrt(variance)\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((x) => Math.pow((x - meanValue), 3))\n   .sum() / numbers.length - 3;\n};\n\n/* For a given list of input numbers, calculate Median\n  around the mean of this dataset.\n  Median is the middle value of this dataset:\n  MEDIAN = average | x | / 2\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/* For a given list of input numbers, calculate Percentile\n  around the mean of this dataset.\n  Percentile is the value of this dataset that falls into the given percent\n  of its range:\n  PERCENTILE = average | x | / 100\n  >>> percentile([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  */\nconst percentile = (numbers, percentile) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  const percentileIndex = middleIndex * percentile;\n  return sortedNumbers[percentileIndex];\n};\n\n/* For a given list of input numbers, calculate Quartile\n  around the mean of this dataset.\n  Quartile is the value of this dataset that falls into the given percent\n  of its range:\n  QUARTILE = average | x | / 100\n  >>> quartile([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  */\nconst quartile = (numbers, percentile) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  const percentileIndex = middleIndex * percentile;\n  return sortedNumbers[percentileIndex];\n};\n\n/* For a given list of input numbers, calculate Quintile\n  around the mean of this dataset.\n  Quintile is the value of this dataset that falls into the given percent\n  of its range:\n  QUINTILE = average | x | / 100\n  >>> quintile([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  */\nconst quintile = (numbers, percentile) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  const percentileIndex = middleIndex * percentile;\n  return sortedNumbers[percentileIndex];\n};\n\n/* For a given list of input numbers, calculate Trimmed Mean\n  around the mean of this dataset.\n  Trimmed Mean is the value of this dataset that falls into the given percent\n  of its range:\n  TRIMMED MEAN = average | x | / 100\n  >>> trimmedMean([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  */\nconst trimmedMean = (numbers, percentile) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  const percentileIndex = middleIndex * percentile;\n  return sortedNumbers[percentileIndex];\n};\n\n/* For a given list of input numbers, calculate Trimmed Variance\n  around the mean of this dataset.\n  Trimmed Variance is the value of this dataset that falls into the given\n  percent of its range:\n  TRIMMED VARIANCE = average | x - x_mean | / 100\n  >>> trimmedVariance([1.0, 2.0, 3.0, 4.0], 0.5)\n  2.0\n  */\nconst trimmedVariance = (numbers, percentile) => {\n  const sortedNumbers = numbers.sort((a, b) => a - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y &&\n          carsArray[i].speed > carsArray[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y &&\n          carsArray[i].speed < carsArray[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y &&\n          carsArray[i].speed === carsArray[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y &&\n          carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].speed > carsArray[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].x === carsArray[j].x &&\n          carsArray[i].y === carsArray[j].y &&\n          carsArray[i].speed === carsArray[j].speed &&\n          carsArray[i].speed < carsArray[j].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 1, 0]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 1.\n  >>> incrListWithStep([1, 2, 3], 1)\n  [2, 3, 4]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep = (l, step) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * step);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 1.\n  >>> decrListWithStep([1, 2, 3], 1)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep = (l, step) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * step);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 1.\n  >>> incrListWithStep([1, 2, 3], 2)\n  [3, 4, 5]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep2 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * 2);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 1.\n  >>> decrListWithStep([1, 2, 3], 2)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep2 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * 2);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 2.\n  >>> incrListWithStep([1, 2, 3], 2)\n  [3, 4, 5]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep3 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * 3);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 2.\n  >>> decrListWithStep([1, 2, 3], 2)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep3 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * 3);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 3.\n  >>> incrListWithStep([1, 2, 3], 3)\n  [4, 5, 6]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep4 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * 4);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 3.\n  >>> decrListWithStep([1, 2, 3], 3)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep4 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * 4);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 4.\n  >>> incrListWithStep([1, 2, 3], 4)\n  [4, 5, 6]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep5 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * 5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 4.\n  >>> decrListWithStep([1, 2, 3], 4)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep5 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * 5);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 5.\n  >>> incrListWithStep([1, 2, 3], 5)\n  [5, 6, 7]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep6 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i * 6);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step 5.\n  >>> decrListWithStep([1, 2, 3], 5)\n  [2, 1, 0]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 6, 4, 3, 4, 10, 1, 123]\n  */\nconst decrListWithStep6 = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i * 6);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step 6.\n  >>> incrListWithStep([1, 2, 3], 6)\n  [5, 6, 7]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep7 = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "<|endoftext|>/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> apirSsumoTOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOne([1])\n  false\n  */\nconst apirSsumoTOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTAll takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to all integers in the list, and false otherwise.\n  >>> apirSsumoTAll([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAll([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAll([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAll([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAll([1])\n  false\n  */\nconst apirSsumoTAll = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === l.length;\n};\n\n/*\n  apirSsumoTAnyOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to any integers in the list, and false otherwise.\n  >>> apirSsumoTAnyOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyOne([1])\n  false\n  */\nconst apirSsumoTAnyOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTAnyAll takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to all integers in the list, and false otherwise.\n  >>> apirSsumoTAnyAll([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyAll([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyAll([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyAll([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyAll([1])\n  false\n  */\nconst apirSsumoTAnyAll = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === l.length;\n};\n\n/*\n  apirSsumoTAnyZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to any integers in the list, and false otherwise.\n  >>> apirSsumoTAnyZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyZero([1])\n  false\n  */\nconst apirSsumoTAnyZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTAnyOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to any integers in the list, and false otherwise.\n  >>> apirSsumoTAnyOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyOne([1])\n  false\n  */\nconst apirSsumoTAnyOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTAnyAll takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to all integers in the list, and false otherwise.\n  >>> apirSsumoTAnyAll([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyAll([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyAll([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyAll([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyAll([1])\n  false\n  */\nconst apirSsumoTAnyAll = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === l.length;\n};\n\n/*\n  apirSsumoTAnyZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to any integers in the list, and false otherwise.\n  >>> apirSsumoTAnyZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTAnyZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTAnyZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTAnyZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTAnyZero([1])\n  false\n  */\nconst apirSsumoTAnyZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirS", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  let res = '';\n  while (str.length >= base) {\n    res = str.substring(0, base) + res;\n    str = str.substring(base);\n  }\n  return res + str;\n};\n\n/*\n  >>> changeBase('1001', 2)\n  '111'\n  >>> changeBase('1001', 3)\n  '1001'\n  >>> changeBase('1001', 4)\n  '100100'\n  >>> changeBase('1001', 5)\n  '10010000'\n  >>> changeBase('1001', 6)\n  '100100000'\n  >>> changeBase('1001', 7)\n  '1001000000'\n  >>> changeBase('1001', 8)\n  '100100000000'\n  >>> changeBase('1001', 9)\n  '1001000000000'\n  >>> changeBase('1001', 10)\n  '10010000000000'\n  >>> changeBase('1001', 11)\n  '100100000000000'\n  >>> changeBase('1001', 12)\n  '1001000000000000'\n  >>> changeBase('1001', 13)\n  '10010000000000000'\n  >>> changeBase('1001', 14)\n  '100100000000000000'\n  >>> changeBase('1001', 15)\n  '10010000000000000000'\n  >>> changeBase('1001', 16)\n  '1001000000000000000000'\n  >>> changeBase('1001', 17)\n  '10010000000000000000000'\n  >>> changeBase('1001', 18)\n  '100100000000000000000000'\n  >>> changeBase('1001', 19)\n  '1001000000000000000000000'\n  >>> changeBase('1001', 20)\n  '10010000000000000000000000'\n  >>> changeBase('1001', 21)\n  '1001000000000000000000000000'\n  >>> changeBase('1001', 22)\n  '100100000000000000000000000000'\n  >>> changeBase('1001', 23)\n  '1001000000000000000000000000000'\n  >>> changeBase('1001', 24)\n  '10010000000000000000000000000000'\n  >>> changeBase('1001', 25)\n  '100100000000000000000000000000000'\n  >>> changeBase('1001', 26)\n  '1001000000000000000000000000000000'\n  >>> changeBase('1001', 27)\n  '100100000000000000000000000000000000'\n  >>> changeBase('1001', 28)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 29)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 30)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 31)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 32)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 33)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 34)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 35)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 36)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 37)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 38)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 39)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 40)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 41)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 42)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 43)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 44)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 45)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 46)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 47)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 48)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 49)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 50)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 51)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 52)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 53)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 54)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 55)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 56)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 57)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 58)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 59)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 60)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 61)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 62)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 63)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 64)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 65)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 66)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 67)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 68)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 69)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 70)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 71)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 72)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 73)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 74)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 75)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 76)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 77)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 78)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 79)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 80)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 81)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 82)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 83)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 84)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea2 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea2([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea3 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea3([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea4 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]) + triangleArea(a[15], b[15]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea4([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea5 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]) + triangleArea(a[15], b[15]) + triangleArea(a[16], b[16]) + triangleArea(a[17], b[17]) + triangleArea(a[18], b[18]) + triangleArea(a[19], b[19]) + triangleArea(a[20], b[20]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea5([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea6 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]) + triangleArea(a[15], b[15]) + triangleArea(a[16], b[16]) + triangleArea(a[17], b[17]) + triangleArea(a[18], b[18]) + triangleArea(a[19], b[19]) + triangleArea(a[20], b[20]) + triangleArea(a[21], b[21]) + triangleArea(a[22], b[22]) + triangleArea(a[23], b[23]) + triangleArea(a[24], b[24]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea6([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea7 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]) + triangleArea(a[15], b[15]) + triangleArea(a[16], b[16]) + triangleArea(a[17], b[17]) + triangleArea(a[18], b[18]) + triangleArea(a[19], b[19]) + triangleArea(a[20], b[20]) + triangleArea(a[21], b[21]) + triangleArea(a[22], b[22]) + triangleArea(a[23], b[23]) + triangleArea(a[24], b[24]) + triangleArea(a[25], b[25]) + triangleArea(a[26], b[26]) + triangleArea(a[27], b[27]) + triangleArea(a[28], b[28]) + triangleArea(a[29], b[29]);\n};\n\n/*Given a triangle, return its area.\n  >>> triangleArea7([[1,3,4],[2,4,5],[1,3,5]])\n  15\n  */\nconst triangleArea8 = (a, b, c) => {\n  return triangleArea(a[0], b[0]) + triangleArea(a[1], b[1]) + triangleArea(a[2], b[2]) + triangleArea(a[3], b[3]) + triangleArea(a[4], b[4]) + triangleArea(a[5], b[5]) + triangleArea(a[6], b[6]) + triangleArea(a[7], b[7]) + triangleArea(a[8], b[8]) + triangleArea(a[9], b[9]) + triangleArea(a[10], b[10]) + triangleArea(a[11], b[11]) + triangleArea(a[12], b[12]) + triangleArea(a[13], b[13]) + triangleArea(a[14], b[14]) + triangleArea(a[15], b[15]) + triangleArea(a[16], b[16]) + triangleArea(a[17], b[17", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 2) {\n    return 0\n  }\n  if (n <= 3) {\n    return 0\n  }\n  if (n <= 4) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*\n  Problem 7\n  ---------\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  36\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  55\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  66\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  78\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  104\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  117\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  137\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  142\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  153\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  162\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  173\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  193\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  202\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  212\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  223\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  232\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  243\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  252\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  263\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  273\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  282\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  293\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  302\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  313\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  323\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  332\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  333\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n  342\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  352\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])\n  363\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])\n  373\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])\n  382\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])\n  393\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])\n  402\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])\n  413\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])\n  423\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid + 1]) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!= 0) return 0;\n  const q = p / n;\n  const r = n % q;\n  return q * n + (r!= 0? r : 0);\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 15)\n  8\n  >>> modpow(2, 31, 5)\n  8\n  >>> modpow(2, 31, 15)\n  8\n  >>> modpow(2, 32, 5)\n  16\n  >>> modpow(2, 32, 15)\n  16\n  >>> modpow(2, 33, 5)\n  16\n  >>> modpow(2, 33, 15)\n  16\n  >>> modpow(2, 34, 5)\n  32\n  >>> modpow(2, 34, 15)\n  32\n  >>> modpow(2, 35, 5)\n  32\n  >>> modpow(2, 35, 15)\n  32\n  >>> modpow(2, 36, 5)\n  64\n  >>> modpow(2, 36, 15)\n  64\n  >>> modpow(2, 37, 5)\n  64\n  >>> modpow(2, 37, 15)\n  64\n  >>> modpow(2, 38, 5)\n  128\n  >>> modpow(2, 38, 15)\n  128\n  >>> modpow(2, 39, 5)\n  128\n  >>> modpow(2, 39, 15)\n  128\n  >>> modpow(2, 40, 5)\n  256\n  >>> modpow(2, 40, 15)\n  256\n  >>> modpow(2, 41, 5)\n  256\n  >>> modpow(2, 41, 15)\n  256\n  >>> modpow(2, 42, 5)\n  512\n  >>> modpow(2, 42, 15)\n  512\n  >>> modpow(2, 43, 5)\n  512\n  >>> modpow(2, 43, 15)\n  512\n  >>> modpow(2, 44, 5)\n  1024\n  >>> modpow(2, 44, 15)\n  1024\n  >>> modpow(2, 45, 5)\n  1024\n  >>> modpow(2, 45, 15)\n  1024\n  >>> modpow(2, 46, 5)\n  2048\n  >>> modpow(2, 46, 15)\n  2048\n  >>> modpow(2, 47, 5)\n  2048\n  >>> modpow(2, 47, 15)\n  2048\n  >>> modpow(2, 48, 5)\n  4096\n  >>> modpow(2, 48, 15)\n  4096\n  >>> modpow(2, 49, 5)\n  4096\n  >>> modpow(2, 49, 15)\n  4096\n  >>> modpow(2, 50, 5)\n  8192\n  >>> modpow(2, 50, 15)\n  8192\n  >>> modpow(2, 51, 5)\n  8192\n  >>> modpow(2, 51, 15)\n  8192\n  >>> modpow(2, 52, 5)\n  16384\n  >>> modpow(2, 52, 15)\n  16384\n  >>> modpow(2, 53, 5)\n  16384\n  >>> modpow(2, 53, 15)\n  16384\n  >>> modpow(2, 54, 5)\n  32768\n  >>> modpow(2, 54, 15)\n  32768\n  >>> modpow(2, 55, 5)\n  32768\n  >>> modpow(2, 55, 15)\n  32768\n  >>> modpow(2, 56, 5)\n  65536\n  >>> modpow(2, 56, 15)\n  65536\n  >>> modpow(2, 57, 5)\n  65536\n  >>> modpow(2, 57, 15)\n  65536\n  >>> modpow(2, 58, 5)\n  131072\n  >>> modpow(2, 58, 15)\n  131072\n  >>> modpow(2, 59, 5)\n  131072\n  >>> modpow(2, 59, 15)\n  131072\n  >>> modpow(2, 60, 5)\n  262144\n  >>> modpow(2, 60, 15)\n  262144\n  >>> modpow(2, 61, 5)\n  262144\n  >>> modpow(2, 61, 15)\n  262144\n  >>> modpow(2, 62, 5)\n  524288\n  >>> modpow(2, 62, 15)\n  524288\n  >>> modpow(2, 63, 5)\n  524288\n  >>> modpow(2, 63, 15)\n  524288\n  >>> modpow(2, 64, 5)\n  1048576\n  >>> modpow(2, 64, 15)\n  1048576\n  >>> modpow(2, 65, 5)\n  1048576\n  >>> modpow(2, 65, 15)\n  1048576\n  >>> modpow(2, 66, 5)\n  2097152\n  >>> modpow(2, 66, 15)\n  2097152\n  >>> modpow(2, 67, 5)\n  2097152\n  >>> modpow(2, 67, 15)\n  2097152\n  >>> modpow(2, 68, 5)\n  4194304\n  >>> modpow(2, 68, 15)\n  4194304\n  >>> modpow(2, 69, 5)\n  4194304\n  >>> modpow(2, 69, 15)\n  4194304\n  >>> modpow(2, 70, 5)\n  8388608\n  >>> modpow(2, 70, 15)\n  8388608\n  >>> modpow(2, 71, 5)\n  8388608\n  >>> modpow(2, 71, 15)\n  8388608\n  >>> modpow(2, 72, 5)\n  16777216\n  >>> modpow(2, 72, 15)\n  16777216\n  >>> modpow(2, 73, 5)\n  16777216\n  >>> modpow(2, 73, 15)\n  16777216\n  >>> modpow(2, 74, 5)\n  33554432\n  >>> modpow(2, 74, 15)\n  33554432\n  >>> modpow(2, 75, 5)\n  33554432\n  >>> modpow(2, 75, 15)\n  33554432\n  >>> modpow(2, 76, 5)\n  67108864\n  >>> modpow(2, 76, 15)\n  67108864\n  >>> modpow(2, 77, 5)\n  67108864\n  >>> modpow(2, 77, 15)\n  67108864\n  >>> modpow(2, 78, 5)\n  134217728\n  >>> modpow(2, 78, 15)\n  134217728\n  >>> modpow(2, 79, 5)\n  134217728\n  >>> modpow(2, 79, 15)\n  134217728\n  >>> modpow(2, 80, 5)\n  268435456\n  >>> modpow(2, 80, 15)\n  268435456\n  >>> modpow(2, 81, 5)\n  268435456\n  >>> modpow(2, 81, 15)\n  268435456\n  >>> modpow(2, 82, 5)\n  536870912\n  >>> modpow(2, 82, 15)\n  536870912\n  >>> modpow(2, 83, 5)\n  536870912\n  >>> modpow(2, 83, 15)\n  536870912\n  >>> modpow(2, 84, 5)\n  1073741824\n  >>> modpow(2, 84, 15)\n  1073741824\n  >>> modpow(2, 85, 5)\n  1073741824\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "<|endoftext|>/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeAccents is a function that takes string and returns string without accents.\n  >>> removeAccents('')\n  ''\n  >>> removeAccents(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAccents('abcdef')\n  'abcdef'\n  >>> removeAccents('aaaaa')\n  ''\n  >>> removeAccents('aaBAA')\n  'BAA'\n  >>> removeAccents('zbcd')\n  'zbcd'\n  */\nconst removeAccents = (text) => {\n  return text.replace(/[àáâãäå]/g, 'a');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuations is a function that takes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'BAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[\\.,;:!?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> remove", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greaterThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> lessThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 40)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the positive value of number x\n  >>> positive(-3)\n  3\n  >>> positive(3)\n  3\n  */\nconst positive = x => {\n  return x > 0? x : -x;\n};\n\n/*Get the negative value of number x\n  >>> negative(-3)\n  -3\n  >>> negative(3)\n  3\n  */\nconst negative = x => {\n  return x < 0? x : -x;\n};\n\n/*Get the floor value of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling value of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = len - 1; i >= 0; i--) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if a string starts with a given prefix.\n  >>> startsWith('abcd', 'ab')\n  true\n  >>> startsWith('abcd', 'bc')\n  false\n  >>> startsWith('abcd', 'd')\n  false\n  >>> startsWith('abcd', 'abz')\n  false\n  >>> startsWith('abcd', 'abz', 2)\n  false\n  >>> startsWith('abcd', 'abz', 3)\n  true\n  >>> startsWith('abcd', 'abz', 4)\n  false\n  >>> startsWith('abcd', 'abz', 5)\n  false\n  */\nconst startsWith = (str, prefix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = 0;\n  }\n  return str.substr(0, fromIndex) === prefix;\n};\n\n/*\n  Check if a string ends with a given suffix.\n  >>> endsWith('ab', 'abcd')\n  true\n  >>> endsWith('ab', 'bc')\n  false\n  >>> endsWith('ab', 'd')\n  false\n  >>> endsWith('ab', 'abz')\n  false\n  >>> endsWith('ab', 'abz', 2)\n  false\n  >>> endsWith('ab', 'abz', 3)\n  true\n  >>> endsWith('ab', 'abz', 4)\n  false\n  >>> endsWith('ab', 'abz', 5)\n  false\n  */\nconst endsWith = (str, suffix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = str.length - suffix.length;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === suffix;\n};\n\n/*\n  Check if a string starts with a given prefix.\n  >>> startsWith('abcd', 'ab')\n  true\n  >>> startsWith('abcd', 'bc')\n  false\n  >>> startsWith('abcd', 'd')\n  false\n  >>> startsWith('abcd', 'abz')\n  false\n  >>> startsWith('abcd', 'abz', 2)\n  false\n  >>> startsWith('abcd', 'abz', 3)\n  true\n  >>> startsWith('abcd', 'abz', 4)\n  false\n  >>> startsWith('abcd', 'abz', 5)\n  false\n  */\nconst startsWithRev = (str, prefix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = 0;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === prefix;\n};\n\n/*\n  Check if a string ends with a given suffix.\n  >>> endsWith('ab', 'abcd')\n  true\n  >>> endsWith('ab', 'bc')\n  false\n  >>> endsWith('ab', 'd')\n  false\n  >>> endsWith('ab', 'abz')\n  false\n  >>> endsWith('ab', 'abz', 2)\n  false\n  >>> endsWith('ab', 'abz', 3)\n  true\n  >>> endsWith('ab', 'abz', 4)\n  false\n  >>> endsWith('ab', 'abz', 5)\n  false\n  */\nconst endsWithRev = (str, suffix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = str.length - suffix.length;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === suffix;\n};\n\n/*\n  Check if a string starts with a given prefix.\n  >>> startsWith('abcd', 'ab')\n  true\n  >>> startsWith('abcd', 'bc')\n  false\n  >>> startsWith('abcd', 'd')\n  false\n  >>> startsWith('abcd', 'abz')\n  false\n  >>> startsWith('abcd', 'abz', 2)\n  false\n  >>> startsWith('abcd', 'abz', 3)\n  true\n  >>> startsWith('abcd', 'abz', 4)\n  false\n  >>> startsWith('abcd', 'abz', 5)\n  false\n  */\nconst startsWithRevRev = (str, prefix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = str.length - prefix.length;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === prefix;\n};\n\n/*\n  Check if a string ends with a given suffix.\n  >>> endsWith('ab', 'abcd')\n  true\n  >>> endsWith('ab', 'bc')\n  false\n  >>> endsWith('ab', 'd')\n  false\n  >>> endsWith('ab', 'abz')\n  false\n  >>> endsWith('ab', 'abz', 2)\n  false\n  >>> endsWith('ab', 'abz', 3)\n  true\n  >>> endsWith('ab', 'abz', 4)\n  false\n  >>> endsWith('ab', 'abz', 5)\n  false\n  */\nconst endsWithRevRev = (str, suffix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = str.length - suffix.length;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === suffix;\n};\n\n/*\n  Check if a string starts with a given prefix.\n  >>> startsWith('abcd', 'ab')\n  true\n  >>> startsWith('abcd', 'bc')\n  false\n  >>> startsWith('abcd', 'd')\n  false\n  >>> startsWith('abcd', 'abz')\n  false\n  >>> startsWith('abcd', 'abz', 2)\n  false\n  >>> startsWith('abcd', 'abz', 3)\n  true\n  >>> startsWith('abcd', 'abz', 4)\n  false\n  >>> startsWith('abcd', 'abz', 5)\n  false\n  */\nconst startsWithRevRevRev = (str, prefix, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = str.length - prefix.length;\n  }\n  return str.substr(fromIndex, str.length - fromIndex) === prefix;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n\n  return openingBrackets.length === closingBrackets.length && openingBrackets.every((openingBracket, index) => {\n    return closingBrackets[index] === openingBracket;\n  });\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinations = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinations(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinationsWithRepetitions = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinationsWithRepetitions(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinationsWithRepetitionsOfLengthOne = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinationsWithRepetitionsOfLengthOne(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinationsWithRepetitionsOfLengthTwo = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinationsWithRepetitionsOfLengthTwo(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinationsWithRepetitionsOfLengthThree = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinationsWithRepetitionsOfLengthThree(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of its characters.\n * \n * Example:\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"],\n *   [\"a\", \"c\"],\n *   [\"b\", \"c\"],\n *   [\"c\"]\n * ]\n * \n * Given \"ab\", returns [\n *   [\"a\", \"b\"],\n *   [\"b\"]\n * ]\n * \n * Given \"abc\", returns [\n *   [\"a\", \"b\", \"c\"]\n * ]\n * \n * Given \"a\", returns [\n *   [\"a\"]\n * ]\n * \n * Given \"\", returns []\n * \n * @param {String} str\n * @return {Array}\n */\nconst allPossibleCombinationsWithRepetitionsOfLengthFour = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  const combinations = [];\n  const possibleCombinations = allPossibleCombinationsWithRepetitionsOfLengthFour(str.substr(1));\n\n  for (let i = 0; i < possibleCombinations.length; i++) {\n    combinations.push(possibleCombinations[i]);\n    combinations.push(possibleCombinations[i].concat(str.substr(0, i)));\n  }\n\n  return combinations;\n};\n\n/**\n * Given a string, returns an array of all possible combination", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "<|endoftext|>/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let n = l.length\n  let m = n\n  let i = 0\n  let j = n - 1\n  let k = 0\n  let lMax = 0\n  let lMin = 0\n  let lSum = 0\n  let lSum2 = 0\n  let lDiff = 0\n  let lDiff2 = 0\n  let lDiff3 = 0\n  let lDiff4 = 0\n  let lDiff5 = 0\n  let lDiff6 = 0\n  let lDiff7 = 0\n  let lDiff8 = 0\n  let lDiff9 = 0\n  let lDiff10 = 0\n  let lDiff11 = 0\n  let lDiff12 = 0\n  let lDiff13 = 0\n  let lDiff14 = 0\n  let lDiff15 = 0\n  let lDiff16 = 0\n  let lDiff17 = 0\n  let lDiff18 = 0\n  let lDiff19 = 0\n  let lDiff20 = 0\n  let lDiff21 = 0\n  let lDiff22 = 0\n  let lDiff23 = 0\n  let lDiff24 = 0\n  let lDiff25 = 0\n  let lDiff26 = 0\n  let lDiff27 = 0\n  let lDiff28 = 0\n  let lDiff29 = 0\n  let lDiff30 = 0\n  let lDiff31 = 0\n  let lDiff32 = 0\n  let lDiff33 = 0\n  let lDiff34 = 0\n  let lDiff35 = 0\n  let lDiff36 = 0\n  let lDiff37 = 0\n  let lDiff38 = 0\n  let lDiff39 = 0\n  let lDiff40 = 0\n  let lDiff41 = 0\n  let lDiff42 = 0\n  let lDiff43 = 0\n  let lDiff44 = 0\n  let lDiff45 = 0\n  let lDiff46 = 0\n  let lDiff47 = 0\n  let lDiff48 = 0\n  let lDiff49 = 0\n  let lDiff50 = 0\n  let lDiff51 = 0\n  let lDiff52 = 0\n  let lDiff53 = 0\n  let lDiff54 = 0\n  let lDiff55 = 0\n  let lDiff56 = 0\n  let lDiff57 = 0\n  let lDiff58 = 0\n  let lDiff59 = 0\n  let lDiff60 = 0\n  let lDiff61 = 0\n  let lDiff62 = 0\n  let lDiff63 = 0\n  let lDiff64 = 0\n  let lDiff65 = 0\n  let lDiff66 = 0\n  let lDiff67 = 0\n  let lDiff68 = 0\n  let lDiff69 = 0\n  let lDiff70 = 0\n  let lDiff71 = 0\n  let lDiff72 = 0\n  let lDiff73 = 0\n  let lDiff74 = 0\n  let lDiff75 = 0\n  let lDiff76 = 0\n  let lDiff77 = 0\n  let lDiff78 = 0\n  let lDiff79 = 0\n  let lDiff80 = 0\n  let lDiff81 = 0\n  let lDiff82 = 0\n  let lDiff83 = 0\n  let lDiff84 = 0\n  let lDiff85 = 0\n  let lDiff86 = 0\n  let lDiff87 = 0\n  let lDiff88 = 0\n  let lDiff89 = 0\n  let lDiff90 = 0\n  let lDiff91 = 0\n  let lDiff92 = 0\n  let lDiff93 = 0\n  let lDiff94 = 0\n  let lDiff95 = 0\n  let lDiff96 = 0\n  let lDiff97 = 0\n  let lDiff98 = 0\n  let lDiff99 = 0\n  let lDiff100 = 0\n  let lDiff101 = 0\n  let lDiff102 = 0\n  let lDiff103 = 0\n  let lDiff104 = 0\n  let lDiff105 = 0\n  let lDiff106 = 0\n  let lDiff107 = 0\n  let lDiff108 = 0\n  let lDiff109 = 0\n  let lDiff110 = 0\n  let lDiff111 = 0\n  let lDiff112 = 0\n  let lDiff113 = 0\n  let lDiff114 = 0\n  let lDiff115 = 0\n  let lDiff116 = 0\n  let lDiff117 = 0\n  let lDiff118 = 0\n  let lDiff119 = 0\n  let lDiff120 = 0\n  let lDiff121 = 0\n  let lDiff122 = 0\n  let lDiff123 = 0\n  let lDiff124 = 0\n  let lDiff125 = 0\n  let lDiff126 = 0\n  let lDiff127 = 0\n  let lDiff128 = 0\n  let lDiff129 = 0\n  let lDiff130 = 0\n  let lDiff131 = 0\n  let lDiff132 = 0\n  let lDiff133 = 0\n  let lDiff134 = 0\n  let lDiff135 = 0\n  let lDiff136 = 0\n  let lDiff137 = 0\n  let lDiff138 = 0\n  let lDiff139 = 0\n  let lDiff140 = 0\n  let lDiff141 = 0\n  let lDiff142 = 0\n  let lDiff143 = 0\n  let lDiff144 = 0\n  let lDiff145 = 0\n  let lDiff146 = 0\n  let lDiff147 = 0\n  let lDiff148 = 0\n  let lDiff149 = 0\n  let lDiff150 = 0\n  let lDiff151 = 0\n  let lDiff152 = 0\n  let lDiff153 = 0\n  let lDiff154 = 0\n  let lDiff155 = 0\n  let lDiff156 = 0\n  let lDiff157 = 0\n  let lDiff158 = 0\n  let lDiff159 = 0\n  let lDiff160 = 0\n  let lDiff161 = 0\n  let lDiff162 = 0\n  let lDiff163 = 0\n  let lDiff164 = 0\n  let lDiff165 = 0\n  let lDiff166 = 0\n  let lDiff167 = 0\n  let lDiff168 = 0\n  let lDiff169 = 0\n  let lDiff170 = 0\n  let lDiff171 = 0\n  let lDiff172 = 0\n  let lDiff173 = 0\n  let lDiff174 = 0\n  let lDiff175 = 0\n  let lDiff176 = 0\n  let lDiff177 = 0\n  let lDiff178 = 0\n  let lDiff179 = 0\n  let lDiff180 = 0\n  let lDiff181 = 0\n  let lDiff182 = 0\n  let lDiff183 = 0\n  let lDiff184 = 0\n  let lDiff185 = 0\n  let lDiff186 = 0\n  let lDiff187 = 0\n  let lDiff188 = 0\n  let lDiff189 = 0\n  let lDiff190 = 0\n  let lDiff191 = 0\n  let lDiff192 = 0\n  let lDiff193 = 0\n  let lDiff194 = 0\n  let lDiff195 = 0\n  let lDiff196 = 0\n  let lDiff197 = 0\n  let lDiff198 = 0\n  let lDiff199 = 0\n  let lDiff200 = 0\n  let lDiff201 = 0\n  let lDiff202 = 0\n  let lDiff203 = 0\n  let lDiff204 = 0\n  let lDiff205 = 0\n  let lDiff206 = 0\n  let lDiff207 = 0\n  let lDiff208 = 0\n  let lDiff209 = 0\n  let lDiff210 = 0\n  let lDiff211 = 0\n  let lDiff212 = 0\n  let lDiff213 = 0\n  let lDiff214 = 0\n  let lDiff215 = 0\n  let lDiff216 = 0\n  let lDiff217 = 0\n  let lDiff218 = 0\n  let lDiff219 = 0\n  let lDiff220 = 0\n  let lDiff221 = 0\n  let lDiff222 = 0\n  let lDiff223 = 0\n  let lDiff224 = 0\n  let lDiff225 = 0\n  let lDiff226 = 0\n  let lDiff227 = 0\n  let lDiff228 = 0\n  let lDiff229 = 0\n  let lDiff230 = 0\n  let lDiff231 = 0\n  let lDiff232 = 0\n  let lDiff233 = 0\n  let lDiff234 = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (i1 < l1.length && i2 < l2.length) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (i1 < l1.length && i2 < l2.length) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];\n\n    if (found) {\n      hash2[item] = true;\n      result.push(item);\n      i1++;\n      i2++;\n      continue;\n    }\n\n    found = false;\n\n    while (hash2[item]) {\n      hash1[item] = true;\n      result.push(item);\n      i1++;\n    }\n\n    hash1[item] = true;\n    hash2[item] = true;\n    i2++;\n  }\n\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  let found;\n\n  while (l1.length > 0 && l2.length > 0) {\n    item = l1[i1];\n    found = hash1[item];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  13\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(8, 2)\n  1\n  >>> numberOfDivisors(8, 3)\n  2\n  >>> numberOfDivisors(8, 4)\n  1\n  >>> numberOfDivisors(8, 5)\n  1\n  >>> numberOfDivisors(8, 6)\n  1\n  >>> numberOfDivisors(8, 7)\n  1\n  >>> numberOfDivisors(8, 8)\n  1\n  >>> numberOfDivisors(8, 9)\n  1\n  >>> numberOfDivisors(8, 10)\n  1\n  >>> numberOfDivisors(8, 11)\n  1\n  >>> numberOfDivisors(8, 12)\n  1\n  >>> numberOfDivisors(8, 13)\n  1\n  >>> numberOfDivisors(8, 14)\n  1\n  >>> numberOfDivisors(8, 15)\n  1\n  >>> numberOfDivisors(8, 16)\n  1\n  >>> numberOfDivisors(8, 17)\n  1\n  >>> numberOfDivisors(8, 18)\n  1\n  >>> numberOfDivisors(8, 19)\n  1\n  >>> numberOfDivisors(8, 20)\n  1\n  >>> numberOfDivisors(8, 21)\n  1\n  >>> numberOfDivisors(8, 22)\n  1\n  >>> numberOfDivisors(8, 23)\n  1\n  >>> numberOfDivisors(8, 24)\n  1\n  >>> numberOfDivisors(8, 25)\n  1\n  >>> numberOfDivisors(8, 26)\n  1\n  >>> numberOfDivisors(8, 27)\n  1\n  >>> numberOfDivisors(8, 28)\n  1\n  >>> numberOfDivisors(8, 29)\n  1\n  >>> numberOfDivisors(8, 30)\n  1\n  >>> numberOfDivisors(8, 31)\n  1\n  >>> numberOfDivisors(8, 32)\n  1\n  >>> numberOfDivisors(8, 33)\n  1\n  >>> numberOfDivisors(8, 34)\n  1\n  >>> numberOfDivisors(8, 35)\n  1\n  >>> numberOfDivisors(8, 36)\n  1\n  >>> numberOfDivisors(8, 37)\n  1\n  >>> numberOfDivisors(8, 38)\n  1\n  >>> numberOfDivisors(8, 39)\n  1\n  >>> numberOfDivisors(8, 40)\n  1\n  >>> numberOfDivisors(8, 41)\n  1\n  >>> numberOfDivisors(8, 42)\n  1\n  >>> numberOfDivisors(8, 43)\n  1\n  >>> numberOfDivisors(8, 44)\n  1\n  >>> numberOfDivisors(8, 45)\n  1\n  >>> numberOfDivisors(8, 46)\n  1\n  >>> numberOfDivisors(8, 47)\n  1\n  >>> numberOfDivisors(8, 48)\n  1\n  >>> numberOfDivisors(8, 49)\n  1\n  >>> numberOfDivisors(8, 50)\n  1\n  >>> numberOfDivisors(8, 51)\n  1\n  >>> numberOfDivisors(8, 52)\n  1\n  >>> numberOfDivisors(8, 53)\n  1\n  >>> numberOfDivisors(8, 54)\n  1\n  >>> numberOfDivisors(8, 55)\n  1\n  >>> numberOfDivisors(8, 56)\n  1\n  >>> numberOfDivisors(8, 57)\n  1\n  >>> numberOfDivisors(8, 58)\n  1\n  >>> numberOfDivisors(8, 59)\n  1\n  >>> numberOfDivisors(8, 60)\n  1\n  >>> numberOfDivisors(8, 61)\n  1\n  >>> numberOfDivisors(8, 62)\n  1\n  >>> numberOfDivisors(8, 63)\n  1\n  >>> numberOfDivisors(8, 64)\n  1\n  >>> numberOfDivisors(8, 65)\n  1\n  >>> numberOfDivisors(8, 66)\n  1\n  >>> numberOfDivisors(8, 67)\n  1\n  >>> numberOfDivisors(8, 68)\n  1\n  >>> numberOfDivisors(8, 69)\n  1\n  >>> numberOfDivisors(8, 70)\n  1\n  >>> numberOfDivisors(8, 71)\n  1\n  >>> numberOfDivisors(8, 72)\n  1\n  >>> numberOfDivisors(8, 73)\n  1\n  >>> numberOfDivisors(8, 74)\n  1\n  >>> numberOfDivisors(8, 75)\n  1\n  >>> numberOfDivisors(8, 76)\n  1\n  >>> numberOfDivisors(8, 77)\n  1\n  >>> numberOfDivisors(8, 78)\n  1\n  >>> numberOfDivisors(8, 79)\n  1\n  >>> numberOfDivisors(8, 80)\n  1\n  >>> numberOfDivisors(8, 81)\n  1\n  >>> numberOfDivisors(8, 82)\n  1\n  >>> numberOfDivisors(8, 83)\n  1\n  >>> numberOfDivisors(8, 84)\n  1\n  >>> numberOfDivisors(8, 85)\n  1\n  >>> numberOfDivisors(8, 86)\n  1\n  >>> numberOfDivisors(8, 87)\n  1\n  >>> numberOfDivisors(8, 88)\n  1\n  >>> numberOfDivisors(8, 89)\n  1\n  >>> numberOfDivisors(8, 90)\n  1\n  >>> numberOfDivisors(8, 91)\n  1\n  >>> numberOfDivisors(8, 92)\n  1\n  >>> numberOfDivisors(8, 93)\n  1\n  >>> numberOfDivisors(8, 94)\n  1\n  >>> numberOfDivisors(8, 95)\n  1\n  >>> numberOfDivisors(8, 96)\n  1\n  >>> numberOfDivisors(8, 97)\n  1\n  >>> numberOfDivisors(8, 98)\n  1\n  >>> numberOfDivisors(8, 99)\n  1\n  >>> numberOfDivisors(8, 100)\n  1\n  >>> numberOfDivisors(8, 101)\n  1\n  >>> numberOfDivisors(8, 102)\n  1\n  >>> numberOfDivisors(8, 103)\n  1\n  >>> numberOfDivisors(8, 104)\n  1\n  >>> numberOfDivisors(8, 105)\n  1\n  >>> numberOfDivisors(8, 106)\n  1\n  >>> numberOfDivisors(8, 107)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax2 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax2('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax3 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax3('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax4 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax4('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax5 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax5('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax6 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n\n  return paren_level;\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParensMax6('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNetsedParensMax7 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN is a function that sums numbers from 1 to n.\nconst sumToN = (n) => {\n  let sum = 0;\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string, return a new string with each character replaced with a new random character.\n * \n * Note: this does not guarantee that each character is unique.\n * \n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kjh'\n * >>> makeRandomString()\n * 'kj", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let deriv = [];\n  for (let i = 0; i < xs.length; i++) {\n    deriv.push(xs[i + 1] - xs[i]);\n  }\n  return deriv;\n};\n\n/* Return sum of all elements in an array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Return product of all elements in an array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.6\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum / xs.length;\n};\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (xs) => {\n  let xSorted = xs.slice().sort((a, b) => a - b);\n  if (xSorted.length % 2 === 0) {\n    return xSorted[Math.floor(xSorted.length / 2)];\n  } else {\n    return xSorted[Math.ceil(xSorted.length / 2)];\n  }\n};\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  2\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === maxCount) {\n      modes.push(xs[i]);\n    } else {\n      maxCount = xs[i];\n    }\n  }\n  return modes;\n};\n\n/* Return standard deviation of all elements in an array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  let meanVal = mean(xs);\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - meanVal, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in an array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  let meanVal = mean(xs);\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - meanVal, 2);\n  }\n  return variance / xs.length;\n};\n\n/* Return minimum of all elements in an array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  let min = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n};\n\n/* Return maximum of all elements in an array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  let max = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n};\n\n/* Return sum of squares of elements in an array.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  25\n  */\nconst sumOfSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum;\n};\n\n/* Return mean of squares of elements in an array.\n  >>> meanOfSquares([1, 2, 3, 4, 5])\n  25.0\n  */\nconst meanOfSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum / xs.length;\n};\n\n/* Return median of squares of elements in an array.\n  >>> medianOfSquares([1, 2, 3, 4, 5])\n  5.5\n  */\nconst medianOfSquares = (xs) => {\n  let xSorted = xs.slice().sort((a, b) => a - b);\n  if (xSorted.length % 2 === 0) {\n    return xSorted[Math.floor(xSorted.length / 2)];\n  } else {\n    return xSorted[Math.ceil(xSorted.length / 2)];\n  }\n};\n\n/* Return mode of squares of elements in an array.\n  >>> modeOfSquares([1, 2, 3, 4, 5])\n  5\n  */\nconst modeOfSquares = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === maxCount) {\n      modes.push(xs[i]);\n    } else {\n      maxCount = xs[i];\n    }\n  }\n  return modes;\n};\n\n/* Return standard deviation of squares of elements in an array.\n  >>> stdOfSquares([1, 2, 3, 4, 5])\n  2.23606797749979\n  */\nconst stdOfSquares = (xs) => {\n  let meanVal = meanOfSquares(xs);\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - meanVal, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* Return variance of squares of elements in an array.\n  >>> varianceOfSquares([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst varianceOfSquares = (xs) => {\n  let meanVal = meanOfSquares(xs);\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - meanVal, 2);\n  }\n  return variance / xs.length;\n};\n\n/* Return minimum of squares of elements in an array.\n  >>> minOfSquares([1, 2, 3, 4, 5])\n  1\n  */\nconst minOfSquares = (xs) => {\n  let min = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n};\n\n/* Return maximum of squares of elements in an array.\n  >>> maxOfSquares([1, 2, 3, 4, 5])\n  25\n  */\nconst maxOfSquares = (xs) => {\n  let max = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n};\n\n/* Return sum of cubes of elements in an array.\n  >>> sumOfCubes([1, 2, 3, 4, 5])\n  125\n  */\nconst sumOfCubes = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 3);\n  }\n  return sum;\n};\n\n/* Return mean of cubes of elements in an array.\n  >>> meanOfCubes([1, 2, 3, 4, 5])\n  125.0\n  */\nconst meanOfCubes = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 3);\n  }\n  return sum / xs.length;\n};\n\n/* Return median of cubes of elements in an array.\n  >>> medianOfCubes([1, 2, 3, 4, 5])\n  3\n  */\nconst medianOfCubes = (xs) => {\n  let xSorted = xs.slice().sort((a, b) => a - b);\n  if (xSorted.length % 2 === 0) {\n    return xSorted[Math.floor(xSorted.length / 2)];\n  } else {\n    return xSorted[Math.ceil(xSorted.length / 2)];\n  }\n};\n\n/* Return mode of cubes of elements in an array.\n  >>> modeOfCubes([1, 2, 3, 4, 5])\n  5\n  */\nconst modeOfCubes = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,4,9])\n  25\n  >>> squareSum([1,4,9,16])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25,36])\n  490\n  >>> squareSum([1,4,9,16,25,36,49])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,250,273,306,339,362,396,429,463])\n  490\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "<|endoftext|>/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let digits = '';\n  while (x > 0) {\n    digits += String.fromCharCode(x % 10);\n    x = Math.floor(x / 10);\n  }\n  return digits.split('').reverse().join('') + digits.split('').reverse().slice(0, shift).join('');\n};\n\n/*\n  Convert a number to a string in base b. Base b can be a number or a string\n  representing a base 10 number. Base 10 numbers are strings of digits. Base 2\n  numbers are strings of digits in base 2. Base 16 numbers are strings of digits\n  in base 16. Base 256 numbers are strings of digits in base 256.\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(123, 2)\n  \"103\"\n  >>> toBase10(123, 8)\n  \"100011\"\n  >>> toBase10(123, 16)\n  \"10\"\n  >>> toBase10(123, 256)\n  \"10\"\n  >>> toBase10(123, 2)\n  \"103\"\n  >>> toBase10(123, 8)\n  \"100011\"\n  >>> toBase10(123, 16)\n  \"10\"\n  >>> toBase10(123, 256)\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> toBase10(123, \"8\")\n  \"100011\"\n  >>> toBase10(123, \"16\")\n  \"10\"\n  >>> toBase10(123, \"256\")\n  \"10\"\n  >>> toBase10(123, \"2\")\n  \"103\"\n  >>> to", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = s.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples += 1;\n    } else if (fruit === \"oranges\") {\n      oranges += 1;\n    } else if (fruit === \"mango\") {\n      mangos += 1;\n    }\n    total += 1;\n  });\n  return total - mangos - oranges - apples - n - fruits.reduce((a, b) => a + b);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(str, n) {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  let fruits = str.split(\" \");\n  fruit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport { pluckOddsIndex3 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq > max? -1 : max;\n};\n\n/*\n  You are given a list of integers and a number k. Find out whether there is a subset of the list where\n  the sum of the elements is exactly k.\n  Examples:\n      subsetSum([2, 7, 11, 15], 7) == true\n      subsetSum([2, 7, 11, 15], 8) == false\n      subsetSum([2, 7, 11, 15], 10) == true\n      subsetSum([2, 7, 11, 15], 15) == false\n      subsetSum([2, 7, 11, 15], 0) == true\n      subsetSum([2, 7, 11, 15], -1) == false\n*/\nconst subsetSum = (lst, k) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum === k) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the vowels have been replaced with 'y's\n  Examples:\n      vowelReplacement(\"hello\") == \"yellyy\"\n      vowelReplacement(\"hi\") == \"yyhiy\"\n      vowelReplacement(\"bye\") == \"yybyey\"\n      vowelReplacement(\"hiya\") == \"yyhiyy\"\n*/\nconst vowelReplacement = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else {\n      newStr += \"y\";\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the consonants have been replaced with 'z's\n  Examples:\n      consonantReplacement(\"hello\") == \"zellzz\"\n      consonantReplacement(\"hi\") == \"zhizz\"\n      consonantReplacement(\"bye\") == \"zbyezz\"\n      consonantReplacement(\"hiya\") == \"zhiyzz\"\n*/\nconst consonantReplacement = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"b\" || str[i] === \"c\" || str[i] === \"d\" || str[i] === \"e\" || str[i] === \"f\" || str[i] === \"g\" || str[i] === \"h\" || str[i] === \"i\" || str[i] === \"j\" || str[i] === \"k\" || str[i] === \"l\" || str[i] === \"m\" || str[i] === \"n\" || str[i] === \"o\" || str[i] === \"p\" || str[i] === \"q\" || str[i] === \"r\" || str[i] === \"s\" || str[i] === \"t\" || str[i] === \"u\" || str[i] === \"v\" || str[i] === \"w\" || str[i] === \"x\" || str[i] === \"y\" || str[i] === \"z\") {\n      newStr += str[i];\n    } else {\n      newStr += \"z\";\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the consonants and vowels have been replaced with 'z's\n  Examples:\n      consonantVowelReplacement(\"hello\") == \"zellzz\"\n      consonantVowelReplacement(\"hi\") == \"zhizz\"\n      consonantVowelReplacement(\"bye\") == \"zbyezz\"\n      consonantVowelReplacement(\"hiya\") == \"zhiyzz\"\n*/\nconst consonantVowelReplacement = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else {\n      newStr += \"z\";\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the consonants and vowels have been replaced with 'z's\n  Examples:\n      consonantVowelReplacement(\"hello\") == \"zellzz\"\n      consonantVowelReplacement(\"hi\") == \"zhizz\"\n      consonantVowelReplacement(\"bye\") == \"zbyezz\"\n      consonantVowelReplacement(\"hiya\") == \"zhiyzz\"\n*/\nconst consonantVowelReplacement = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else {\n      newStr += \"z\";\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the consonants and vowels have been replaced with 'z's\n  Examples:\n      consonantVowelReplacement(\"hello\") == \"zellzz\"\n      consonantVowelReplacement(\"hi\") == \"zhizz\"\n      consonantVowelReplacement(\"bye\") == \"zbyezz\"\n      consonantVowelReplacement(\"hiya\") == \"zhiyzz\"\n*/\nconst consonantVowelReplacement = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      newStr += str[i];\n    } else {\n      newStr += \"z\";\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a new string where all\n  the consonants and vowels have been replaced with 'z's\n  Examples:\n      consonantVowelReplacement(\"hello\") == \"zellzz\"\n      consonantVowelReplacement(\"hi\") == \"zhizz\"\n      consonantVowelReplacement(\"bye\") == \"zbyezz\"\n      consonantVowelReplacement", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNotSubstring([], 'a')\n  []\n  >>> filteBryNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filteBryNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtList(leftList).concat([middleValue], stranegoSrtList(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtReverse([1, 2, 3, 4]) == [4, 3, 2, 1]\n  stranegoSrtReverse([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtReverse([]) == []\n  */\nconst stranegoSrtReverse = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue = lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList = lst.slice(middleIndex + 1);\n  return stranegoSrtReverse(leftList).concat([middleValue], stranegoSrtReverse(rightList));\n};\n\n/*\n  Given a sorted array of integers, return its reverse in strange order.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const sides = [a, b, c, d];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const sides = [a, b, c, d, e];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  const sides = [a, b, c, d, e, f];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  const sides = [a, b, c, d, e, f, g];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  return sum > c? sum : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly2 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly3 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly4 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly5 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly6 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly7 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly8 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly9 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly10 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly11 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly12 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly13 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly14 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly15 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly16 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly17 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly18 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly19 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly20 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly21 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly22 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly23 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly24 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly25 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly26 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly27 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly28 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly29 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly30 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst willItFly31 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum <= maxWeight;\n};\n\nconst will", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 6\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  msallestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 6\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  msallestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let max = arr.", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1;\n  return lst1.filter(x => lst2.indexOf(x) < 0);\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ottalRev('admin') ➞ 'admin'\n  ottalRev('hi admin') ➞ 'admin ih'\n  ottalRev('hi admin project') ➞ 'admin ihp roy'\n  */\nconst ottalRev = str => {\n  return str\n   .split('')\n   .reverse()\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  ottalRev('hi') ➞ 'ih'\n  ot", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = false;\n  for (let i = 2; i <= 100; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = true;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyP", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  if (n % 2 === 1) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split('');\n  let hexNumArrLength = hexNumArr.length;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) >= '0' && decimalString.charAt(i) <= '9') {\n      binary += decimalString.charAt(i);\n    } else {\n      binary += '0';\n    }\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal.\n  You will be given a binary number as a string and your task is to convert it to decimal form.\n  The function should return a string, with each character representing a decimal number. Each\n  character in the string will be a number between '0' and '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"1111db\")   # returns \"15\"\n  binaryToDecimal(\"100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) >= '0' && binaryString.charAt(i) <= '1') {\n      decimal += binaryString.charAt(i);\n    } else {\n      decimal += '0';\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that converts a binary number to hexadecimal.\n  You will be given a binary number as a string and your task is to convert it to hexadecimal form.\n  The function should return a string, with each character representing a hexadecimal number. Each\n  character in the string will be a number between '0' and '9'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToHexadecimal(\"1111db\")   # returns \"15\"\n  binaryToHexadecimal(\"100000db\")   # returns \"32\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let binaryString = binary.toString();\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) >= '0' && binaryString.charAt(i) <= '9') {\n      hexadecimal += binaryString.charAt(i);\n    } else {\n      hexadecimal += '0';\n    }\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal.\n  You will be given a decimal number as a string and your task is to convert it to hexadecimal form.\n  The function should return a string, with each character representing a hexadecimal number. Each\n  character in the string will be a number between '0' and '9'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"15\"\n  decimalToHexadecimal(\"32\")   # returns \"32\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) >= '0' && decimalString.charAt(i) <= '9') {\n      hexadecimal += decimalString.charAt(i);\n    } else {\n      hexadecimal += '0';\n    }\n  }\n\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal.\n  You will be given a decimal number as a string and your task is to convert it to octal form.\n  The function should return a string, with each character representing an octal number. Each\n  character in the string will be a number between '0' and '7'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToOctal(\"15\")   # returns \"15\"\n  decimalToOctal(\"32\")   # returns \"30\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) >= '0' && decimalString.charAt(i) <= '7') {\n      octal += decimalString.charAt(i);\n    } else {\n      octal += '0';\n    }\n  }\n\n  return octal;\n};\n\n/*\n  Write a function that converts a decimal number to binary.\n  You will be given a decimal number as a string and your task is to convert it to binary form.\n  The function should return a string, with each character representing a binary number. Each\n  character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(\"15\")   # returns \"1111db\"\n  decimalToBinary(\"32\")   # returns \"100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) >= '0' && decimalString.charAt(i) <= '9') {\n      binary += decimalString.charAt(i);\n    } else {\n      binary += '0';\n    }\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal.\n  You will be given a binary number as a string and your task is to convert it to decimal form.\n  The function should return a string, with each character representing a decimal number. Each\n  character in the string will be a number between '0' and '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"1111db\")   # returns \"15\"\n  binaryToDecimal(\"100000db\")   # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) >= '0' && binaryString.charAt(i) <= '1') {\n      decimal += binaryString.charAt(i);\n    } else {\n      decimal += '0';\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that converts a binary number to hexadecimal.\n  You will be given a binary number as a string and your task is to convert it to hexadecimal form.\n  The function should return a string, with each character representing a hexadecimal number. Each\n  character in the string will be a number between '0' and '9'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToHexadecimal(\"1111db\")   # returns \"15\"\n  binaryToHexadecimal(\"100000db\")   # returns \"32\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let binaryString = binary.toString();\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) >= '0' && binaryString.charAt(i) <= '9') {\n      hexadecimal += binaryString.charAt(i);\n    } else {\n      hexadecimal ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* Given a string, return a new string where all occurences of every character in 'chars' have been replaced by 'char'.\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbbb'\n  >>> replaceAll('hello', 'a', 'b')\n  'hbb", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isStraight(a) => false\n  isStraight(aa) => false\n  isStraight(abcd) => false\n  isStraight(aabb) => true\n  isStraight(adb) => true\n  isStraight(xyy) => true\n  */\nconst isStraight = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isTriplets(a) => false\n  isTriplets(aa) => false\n  isTriplets(abcd) => true\n  isTriplets(aabb) => false\n  isTriplets(adb) => true\n  isTriplets(xyy) => true\n  */\nconst isTriplets = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalendrome(a) => false\n  isPalendrome(aa) => false\n  isPalendrome(abcd) => false\n  isPalendrome(aabb) => false\n  isPalendrome(adb) => true\n  isPalendrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalendrome = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade < gradesAverage) {\n      return (grade < gradesAverage? 'A-' : 'B')\n    } else if (grade === gradesAverage) {\n      return (grade === gradesAverage? 'D' : 'E')\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade < gradesAverage) {\n      return (grade < gradesAverage? 'A-' : 'B')\n    } else if (grade === gradesAverage) {\n      return (grade === gradesAverage? 'D' : 'E')\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade < gradesAverage) {\n      return (grade < gradesAverage? 'A-' : 'B')\n    } else if (grade === gradesAverage) {\n      return (grade === gradesAverage? 'D' : 'E')\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade < gradesAverage) {\n      return (grade < gradesAverage? 'A-' : 'B')\n    } else if (grade === gradesAverage) {\n      return (grade === gradesAverage? 'D' : 'E')\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade < gradesAverage) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '.') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters (a-z) or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEvenEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenOddOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEvenEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsOddEvenEven = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsEvenEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solveDeci = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  while (sum > 0) {\n    result += sum % 10;\n    sum = Math.floor(sum / 10);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solveOct = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  while (sum > 0) {\n    result += sum % 8;\n    sum = Math.floor(sum / 8);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solveHex = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  while (sum > 0) {\n    result += sum % 16;\n    sum = Math.floor(sum / 16);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveBin = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solveDec = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  while (sum > 0) {\n    result += sum % 10;\n    sum = Math.floor(sum / 10);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solveOct = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  while (sum > 0) {\n    result += sum % 8;\n    sum = Math.floor(sum / 8);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solveHex = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  while (sum > 0) {\n    result += sum % 16;\n    sum = Math.floor(sum / 16);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveBin = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4, 7]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sort([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sort = (lst) => {\n  return lst.sort((a, b) => a - b)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvert = (lst) => {\n  return lst.sort((a, b) => a - b)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvert = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvertInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvert = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvertInvertInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvert = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertInvert = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvertInvert([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertInvertInvert = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from smallest to largest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvertInvertInvertReverse([4, 2, 6, 7]) ==> [7, 4, 2, 6]\n  */\nconst sortInvertInvertInvertInvertInvertInvertInvertReverse = (lst) => {\n  return lst.sort((a, b) => b - a)\n}\n\n/*Given a non-empty list of integers lst. sort the elements of the list from largest to smallest.\n\n\n  Examples:\n      sortInvertInvertInvertInvertInvertInvertInvertInver", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffleAsc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antSihuffleDescAsc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffleAscAsc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antSihuffleDescDesc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffleAscDesc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antSihuffleDescAsc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedArr.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffleAscDescAsc = (s) => {\n  let wordArr = s.split(' ');\n  let sortedArr = wordArr.sort((a, b) => {\n    return b.charCodeAt() - a.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return -1;\n    if (even(a, b)) return 1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return 1;\n    if (even(a, b)) return -1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  if the sum( first index value, last index value) is odd, or sort it in ascending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return -1;\n    if (even(a, b)) return 1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return 1;\n    if (even(a, b)) return -1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  if the sum( first index value, last index value) is odd, or sort it in ascending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return -1;\n    if (even(a, b)) return 1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return 1;\n    if (even(a, b)) return -1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  if the sum( first index value, last index value) is odd, or sort it in ascending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const result = [...array];\n  const sum = (first, last) => {\n    if (first > last) return first - last;\n    return last - first;\n  };\n  const odd = (a, b) => sum(a, b) % 2 === 1;\n  const even = (a, b) => sum(a, b) % 2 === 0;\n  result.sort((a, b) => {\n    if (odd(a, b)) return -1;\n    if (even(a, b)) return 1;\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = alphabet.split('');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n  newAlphabet.push('z');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] < currentMin) {\n      currentMin = numbers[i];\n    }\n  }\n  result.push(currentMin);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum / numbers.length);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum / numbers.length);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(Math.sqrt(currentSum / numbers.length));\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum / numbers.length);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 6, 6, 6]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n  }\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n    }\n  }\n  result.push(currentSum / numbers.length);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all even numbers in the list.\n  \n  sumEvens([2, 7, 11, 15]) == 23\n  sumEvens([1, 3, 5]) == 6\n  sumEvens([2, 4, 6]) == 10\n  sumEvens([]) == 0\n  sumEvens([1, 1]) == 0\n  sumEvens([1, 2, 3, 4, 5]) == 10\n  sumEvens([5, 1, 4, 3, 2]) == 10\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, 9, 4, 1, 7, 5, 3, 1]) == 40\n  sumEvens([1, 5, 7, 3, 6, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  anyFloat(5, 2, 7) ➞ true\n  anyFloat(3, 2, 2) ➞ false\n  anyFloat(3, -2, 1) ➞ true\n  anyFloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyFloat = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strings.\n  Returns false in any other cases.\n  Examples\n  anyString(\"5\", \"2\", \"7\") ➞ true\n  anyString(\"3\", \"2\", \"2\") ➞ false\n  anyString(\"3\", \"-2\", \"1\") ➞ true\n  anyString(\"3.6\", \"-2.2\", \"2\") ➞ false\n  */\nconst anyString = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are booleans.\n  Returns false in any other cases.\n  Examples\n  anyBoolean(5, 2, 7) ➞ true\n  anyBoolean(3, 2, 2) ➞ false\n  anyBoolean(3, -2, 1) ➞ true\n  anyBoolean(3.6, -2.2, 2) ➞ false\n  */\nconst anyBoolean = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are arrays.\n  Returns false in any other cases.\n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are objects.\n  Returns false in any other cases.\n  Examples\n  anyObject(5, 2, 7) ➞ true\n  anyObject(3, 2, 2) ➞ false\n  anyObject(3, -2, 1) ➞ true\n  anyObject(3.6, -2.2, 2) ➞ false\n  */\nconst anyObject = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are null.\n  Returns false in any other cases.\n  Examples\n  anyNull(5, 2, 7) ➞ true\n  anyNull(3, 2, 2) ➞ false\n  anyNull(3, -2, 1) ➞ true\n  anyNull(3.6, -2.2, 2) ➞ false\n  */\nconst anyNull = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are undefined.\n  Returns false in any other cases.\n  Examples\n  anyUndefined(5, 2, 7) ➞ true\n  anyUndefined(3, 2, 2) ➞ false\n  anyUndefined(3, -2, 1) ➞ true\n  anyUndefined(3.6, -2.2, 2) ➞ false\n  */\nconst anyUndefined = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are NaNs.\n  Returns false in any other cases.\n  Examples\n  anyNaN(5, 2, 7) ➞ true\n  anyNaN(3, 2, 2) ➞ false\n  anyNaN(3, -2, 1) ➞ true\n  anyNaN(3.6, -2.2, 2) ➞ false\n  */\nconst anyNaN = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are numbers.\n  Returns false in any other cases.\n  Examples\n  anyNumber(5, 2, 7) ➞ true\n  anyNumber(3, 2, 2) ➞ false\n  anyNumber(3, -2, 1) ➞ true\n  anyNumber(3.6, -2.2, 2) ➞ false\n  */\nconst anyNumber = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are symbols.\n  Returns false in any other cases.\n  Examples\n  anySymbol(5, 2, 7) ➞ true\n  anySymbol(3, 2, 2) ➞ false\n  anySymbol(3, -2, 1) ➞ true\n  anySymbol(3.6, -2.2, 2) ➞ false\n  */\nconst anySymbol = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are dates or moments.\n  Returns false in any other cases.\n  Examples\n  anyDate(5, 2, 7) ➞ true\n  anyDate(3, 2, 2) ➞ false\n  anyDate(3, -2, 1) ➞ true\n  anyDate(3.6, -2.2, 2) ➞ false\n  */\nconst anyDate = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are arrays.\n  Returns false in any other cases.\n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are objects.\n  Returns false in any other cases.\n  Examples\n  anyObject(5, 2, 7) ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 1);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 2);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 3);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 4);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 5);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 6);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 7);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 8);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 9);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 10);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 11);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 12);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 13);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 14);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 15);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 16);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 17);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 18);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 19);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 20);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 21);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const nextLetter = newMessage.charAt(i + 22);\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of the factors.\n\n  Examples:\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,3,5,7,11,13] the output should be [3,7]\n  For lst = [2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      if (dict[keys[i]].toLowerCase() === dict[keys[i]])\n        return true;\n      if (dict[keys[i]].toUpperCase() === dict[keys[i]])\n        return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers that are divisible by all of the integers in the array.\n  for example:\n  multiples([2,3,5,7,11]) => [2,3,5,7,11]\n  multiples([2,3,5,7,11,13]) => [2,3,5,7,11,13]\n  multiples([2,3,5,7,11,13,17]) => [2,3,5,7,11,13]\n  multiples([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13]\n  multiples([2,3,5,7,11,13,17,19,23]) => [2,3,5,7,11,13]\n  multiples([]) => []\n  multiples([1]) => []\n  multiples([0]) => []\n  multiples([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,25,-26,27,-28,29,-30,31,-32,33,-34,35,-36,37,-38,-39,-40])\n  multiples([1,3,5,7,11,13,17,19]) => []\n  multiples([2,3,5,7,11,13,17,19,23]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,127]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,127,131]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,127,131,137]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,127,131,137,141]) => []\n  multiples([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,59,61,67", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a unit digit of 0.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyAndZero = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. A vowel is\n  a character that appears even number of times in s.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. A consonant\n  is a character that appears even number of times in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. A consonant\n  is a character that appears odd number of times in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i)!== s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. A vowel is\n  a character that appears odd number of times in s.\n  \n  For example:\n  countVowelsOdd('aBCdEf') returns 2\n  countVowelsOdd('abcdefg') returns 0\n  countVowelsOdd('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. A consonant\n  is a character that appears odd number of times in s.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i)!== s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. A vowel is\n  a character that appears even number of times in s.\n  \n  For example:\n  countVowelsEven('aBCdEf') returns 2\n  countVowelsEven('abcdefg') returns 0\n  countVowelsEven('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. A consonant\n  is a character that appears even number of times in s.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. A consonant\n  is a character that appears odd number of times in s.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i)!== s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. A vowel is\n  a character that appears odd number of times in s.\n  \n  For example:\n  countVowelsOddEven('aBCdEf') returns 2\n  countVowelsOddEven('abcdefg') returns 0\n  countVowelsOddEven('dBBE') returns 0\n  */\nconst countVowelsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. A consonant\n  is a character that appears odd number of times in s.\n  \n  For example:\n  countConsonantsOddEven('aBCdEf') returns 3\n  countConsonantsOddEven('abcdefg') returns 0\n  countConsonantsOddEven('dBBE') returns 0\n  */\nconst countConsonantsO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger2 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger3 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger4 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger5 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger6 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger7 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger8 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger9 = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.round(int1 - (int2 - int1) / 2);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
