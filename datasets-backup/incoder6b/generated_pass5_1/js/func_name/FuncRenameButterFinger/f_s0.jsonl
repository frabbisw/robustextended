{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/**\n * Returns true if given array has at least one element that is strictly greater\n * than given threshold.\n * If given array has only one element - return false.\n * If given array is empty - return true.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.\n * If given array has more than one element - return false.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_string = '';\n  let closed_brace_string = '';\n  let current_group = '';\n  let current_group_length = 0;\n  let current_group_open_brace_count = 0;\n  let current_group_closed_brace_count = 0;\n  let current_group_open_brace_string = '';\n  let current_group_closed_brace_string = '';\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const reversedPrefixString = longestPalindrome.slice(0, longestPalindrome.length - 1);\n  const reversedSuffixString = longestPalindrome.slice(longestPalindrome.length - 1);\n  return reversedPrefixString + reversedSuffixString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelper('')\n  ''\n  >>> findLongestPalindromeHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelperHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelperHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelperHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelperHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelperHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelperHelperHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelperHelperHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelperHelperHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelperHelperHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelperHelperHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelperHelperHelperHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelperHelperHelperHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelperHelperHelperHelperHelper = (string) => {\n  const longestPalindrome = findLongestPalindromeHelperHelperHelperHelperHelperHelperHelper(string);\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelperHelper('')\n  ''\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelper('cat')\n  'cat'\n  >>> findLongestPalindromeHelperHelperHelperHelperHelperHelper('cata')\n  'cat'\n  */\nconst findLongestPalindromeHelperHelperHelperHelperHelperHelper = (string) => {\n  const longest", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let stones = n;\n  let nextLevel = n;\n  let nextLevelStones = n;\n  let nextLevelStonesEven = n;\n  let nextLevelStonesOdd = n;\n  let nextLevelStonesEvenOdd = n;\n  let nextLevelStonesEvenEven = n;\n  let nextLevelStonesOddOdd = n;\n  let nextLevelStonesEvenOddOdd = n;\n  let nextLevelStonesEvenEvenOdd = n;\n  let nextLevelStonesOddEvenOdd = n;\n  let nextLevelStonesEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenEvenOdd = n;\n  let nextLevelStonesOddOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddEvenOdd = n;\n  let nextLevelStonesOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddEvenOdd = n;\n  let nextLevelStonesOddOddOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddEvenOdd = n;\n  let nextLevelStonesOddEvenOddOddOddEvenOdd = n;\n  let nextLevelStonesEvenOddEvenOddOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddEvenOddOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenEvenOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesOddOddOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n  let nextLevelStonesEvenOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a\n  given letter. \n  \n  For example:\n  worfsStartsWith(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  worfsStartsWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst worfsStartsWith = (s, letter) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.startsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a\n  given letter. \n  \n  For example:\n  worfsEndsWith(\"Hi, my name is John\", \"n\") == [\"John\"]\n  worfsEndsWith(\"One, two, three, four, five, six\", \"o\") == [\"six\"]\n  */\nconst worfsEndsWith = (s, letter) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.endsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the \n  given letter. \n  \n  For example:\n  worfsContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\"]\n  worfsContains(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\", \"six\"]\n  */\nconst worfsContains = (s, letter) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain \n  the given letter. \n  \n  For example:\n  worfsDoesNotContain(\"Hi, my name is John\", \"n\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsDoesNotContain(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsDoesNotContain = (s, letter) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) =>!word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a\n  given letter followed by a given number of characters. \n  \n  For example:\n  worfsStartsWithAndLength(\"Hi, my name is John\", \"n\", 3) == [\"my\", \"name\", \"is\"]\n  worfsStartsWithAndLength(\"One, two, three, four, five, six\", \"o\", 3) == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst worfsStartsWithAndLength = (s, letter, length) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.startsWith(letter) && word.length >= length);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a\n  given letter followed by a given number of characters. \n  \n  For example:\n  worfsEndsWithAndLength(\"Hi, my name is John\", \"n\", 3) == [\"John\"]\n  worfsEndsWithAndLength(\"One, two, three, four, five, six\", \"o\", 3) == [\"six\"]\n  */\nconst worfsEndsWithAndLength = (s, letter, length) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.endsWith(letter) && word.length >= length);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the \n  given letter followed by a given number of characters. \n  \n  For example:\n  worfsContainsAndLength(\"Hi, my name is John\", \"n\", 3) == [\"my\", \"name\", \"is\"]\n  worfsContainsAndLength(\"One, two, three, four, five, six\", \"o\", 3) == [\"four\", \"five\", \"six\"]\n  */\nconst worfsContainsAndLength = (s, letter, length) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.includes(letter) && word.length >= length);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain \n  the given letter followed by a given number of characters. \n  \n  For example:\n  worfsDoesNotContainAndLength(\"Hi, my name is John\", \"n\", 3) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsDoesNotContainAndLength(\"One, two, three, four, five, six\", \"o\", 3) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsDoesNotContainAndLength = (s, letter, length) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) =>!word.includes(letter) && word.length >= length);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a\n  given letter followed by a given number of characters and end with a given \n  number of characters. \n  \n  For example:\n  worfsStartsWithAndEndsWith(\"Hi, my name is John\", \"n\", 3, 6) == [\"my\", \"name\", \"is\"]\n  worfsStartsWithAndEndsWith(\"One, two, three, four, five, six\", \"o\", 3, 6) == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst worfsStartsWithAndEndsWith = (s, letter, length, end) => {\n  const words = s.split(/,|\\s/);\n  return words.filter((word) => word.startsWith(letter) && word.length >= length && word.length <= end);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a\n  given letter followed by a given number of characters and end with a given \n  number of characters. \n  \n  For example:\n  worfsEndsWithAndEndsWith(\"Hi, my name is John\", \"n\", 3, 6) == [\"John\"]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 13\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumOdd(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumOdd(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRange = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRange(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRange(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeOdd(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeOdd(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRange = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRange(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeInRange(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeOdd(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeInRangeOdd(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRange = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRange(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeInRangeInRange(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeOdd(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeOdd(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeInRange = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRange(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRange(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeInRangeOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRangeOdd(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return cholseNum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const res = [];\n  for (let i = n; i <= m; i++) {\n    res.push(`${i}`);\n  }\n  return res.reduce((acc, cur) => acc + cur, 0) / res.length;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujded", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenOddDigits = (x) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrWithOne = reversedArr.map((num) => {\n    if (num === 1) {\n      return \"One\";\n    }\n    if (num === 2) {\n      return \"Two\";\n    }\n    if (num === 3) {\n      return \"Three\";\n    }\n    if (num === 4) {\n      return \"Four\";\n    }\n    if (num === 5) {\n      return \"Five\";\n    }\n    if (num === 6) {\n      return \"Six\";\n    }\n    if (num === 7) {\n      return \"Seven\";\n    }\n    if (num === 8) {\n      return \"Eight\";\n    }\n    if (num === 9) {\n      return \"Nine\";\n    }\n  });\n  return reversedArrWithOne;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth2 = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrWithOne = reversedArr.map((num) => {\n    if (num === 1) {\n      return \"One\";\n    }\n    if (num === 2) {\n      return \"Two\";\n    }\n    if (num === 3) {\n      return \"Three\";\n    }\n    if (num === 4) {\n      return \"Four\";\n    }\n    if (num === 5) {\n      return \"Five\";\n    }\n    if (num === 6) {\n      return \"Six\";\n    }\n    if (num === 7) {\n      return \"Seven\";\n    }\n    if (num === 8) {\n      return \"Eight\";\n    }\n    if (num === 9) {\n      return \"Nine\";\n    }\n  });\n  return reversedArrWithOne;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth3 = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrWithOne = reversedArr.map((num) => {\n    if (num === 1) {\n      return \"One\";\n    }\n    if (num === 2) {\n      return \"Two\";\n    }\n    if (num === 3) {\n      return \"Three\";\n    }\n    if (num === 4) {\n      return \"Four\";\n    }\n    if (num === 5) {\n      return \"Five\";\n    }\n    if (num === 6) {\n      return \"Six\";\n    }\n    if (num === 7) {\n      return \"Seven\";\n    }\n    if (num === 8) {\n      return \"Eight\";\n    }\n    if (num === 9) {\n      return \"Nine\";\n    }\n  });\n  return reversedArrWithOne;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth4 = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrWithOne = reversedArr.map((num) => {\n    if (num === 1) {\n      return \"One\";\n    }\n    if (num === 2) {\n      return \"Two\";\n    }\n    if (num === 3) {\n      return \"Three\";\n    }\n    if (num === 4) {\n      return \"Four\";\n    }\n    if (num === 5) {\n      return \"Five\";\n    }\n    if (num === 6) {\n      return \"Six\";\n    }\n    if (num === 7) {\n      return \"Seven\";\n    }\n    if (num === 8) {\n      return \"Eight\";\n    }\n    if (num === 9) {\n      return \"Nine\";\n    }\n  });\n  return reversedArrWithOne;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"E", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(factorials[i - 1] + 1);\n    }\n  }\n  return factorials;\n};\n\n// TESTS\nconst tests = [\n  [2, [1, 2, 3, 4, 5]],\n  [3, [1, 2, 6, 24, 15]],\n  [4, [1, 2, 6, 24, 120]],\n  [5, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800]],\n  [6, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600]],\n  [7, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200]],\n  [8, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200]],\n  [9, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200]],\n  [10, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680]],\n  [11, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480]],\n  [12, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240]],\n  [13, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000]],\n  [14, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000]],\n  [15, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000]],\n  [16, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200]],\n  [17, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200]],\n  [18, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200, 128000000000]],\n  [19, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200, 128000000000, 1342177280]],\n  [20, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200, 128000000000, 1342177280, 1484376480, 15660839040, 16381408000, 17179869184]],\n  [21, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200, 128000000000, 1342177280, 1484376480, 15660839040, 16381408000, 17179869184, 18874395680, 19544790400, 204010080000, 2097152000]],\n  [22, [1, 2, 6, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 560871200, 632459200, 7339171200, 8053063680, 9014390480, 94032914240, 979824000, 104018784000, 108851840000, 11597763200, 12164583200, 128000000000, 1342177280, 1484376480, 15660839040, 16381408000, 17179869184, 18874395680, 19544790400, 204010080000, 2097152000, 21523075600, 22250716800, 22899361600, 23640232800, 24321467200, 24961408000, 256056000000, 26232664000, 26843545600, 27496286400, 28147491200, 28823037600, 29373408000, 29916080000, 30584", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejEvenPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (!isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (!isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejEvenPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (!isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (!isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejEvenPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = i.toString() === i.toString().split(\"\").reverse().join(\"\");\n    if (!isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "<|endoftext|>/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums2 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums2([]) == 0\n  >>> coujtNums2([-1, 11, -11]) == 1\n  >>> coujtNums2([1, 1, 2]) == 3\n  */\nconst coujtNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums3 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums3([]) == 0\n  >>> coujtNums3([-1, 11, -11]) == 1\n  >>> coujtNums3([1, 1, 2]) == 3\n  */\nconst coujtNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums4 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums4([]) == 0\n  >>> coujtNums4([-1, 11, -11]) == 1\n  >>> coujtNums4([1, 1, 2]) == 3\n  */\nconst coujtNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums5 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums5([]) == 0\n  >>> coujtNums5([-1, 11, -11]) == 1\n  >>> coujtNums5([1, 1, 2]) == 3\n  */\nconst coujtNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums6 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums6([]) == 0\n  >>> coujtNums6([-1, 11, -11]) == 1\n  >>> coujtNums6([1, 1, 2]) == 3\n  */\nconst coujtNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums7 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums7([]) == 0\n  >>> coujtNums7([-1, 11, -11]) == 1\n  >>> coujtNums7([1, 1, 2]) == 3\n  */\nconst coujtNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums8 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums8([]) == 0\n  >>> coujtNums8([-1, 11, -11]) == 1\n  >>> coujtNums8([1, 1, 2]) == 3\n  */\nconst coujtNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums9 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums9([]) == 0\n  >>> coujtNums9([-1, 11, -11]) == 1\n  >>> coujtNums9([1, 1, 2]) == 3\n  */\nconst coujtNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums10 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums10([]) == 0\n  >>> coujtNums10([-1, 11, -11]) == 1\n  >>> coujtNums10([1, 1, 2]) == 3\n  */\nconst coujtNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums11 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums11([]) == 0\n  >>> coujtNums11([-1, 11, -11]) == 1\n  >>> coujtNums11([1, 1, 2]) == 3\n  */\nconst coujtNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums12 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couj", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in arr and return its index. If there is no such element then return\n  -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  maxElement([3, 4, 5, 1, 2])==>3\n  Explanation: Maximum element in the given array is 3.\n  maxElement([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxElement = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  element in arr and return its index. If there is no such element then return\n  -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  minElement([3, 4, 5, 1, 2])==>1\n  Explanation: Minimum element in the given array is 1.\n  minElement([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minElement = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the average\n  of the numbers in the array and return the average value.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  average([3, 4, 5, 1, 2])==>3\n  Explanation: Average of the given array is 3.\n  average([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst average = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and return the index of that element. If there\n  is no such element then return -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  maxIndex([3, 4, 5, 1, 2])==>3\n  Explanation: Maximum element in the given array is 3.\n  maxIndex([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxIndex = (arr) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  element in the given array and return the index of that element. If there\n  is no such element then return -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  minIndex([3, 4, 5, 1, 2])==>1\n  Explanation: Minimum element in the given array is 1.\n  minIndex([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minIndex = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and return the value of that element. If there\n  is no such element then return -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  maxValue([3, 4, 5, 1, 2])==>3\n  Explanation: Maximum element in the given array is 3.\n  maxValue([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  element in the given array and return the value of that element. If there\n  is no such element then return -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  minValue([3, 4, 5, 1, 2])==>1\n  Explanation: Minimum element in the given array is 1.\n  minValue([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and return the number of occurrences of that\n  element. If there is no such element then return -1.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  countOccurrences([3, 4, 5, 1, 2])==>3\n  Explanation: Maximum element in the given array is 3.\n  countOccurrences([3, 5, 4, 1, 2])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst countOccurrences = (arr) => {\n  let max = arr[0];\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      count = 1;\n    }\n    if (arr[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and return the number of occurrences of that\n  element. If there is no such ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('001', '101')\n  '010'\n  */\nconst strlngXor01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x ^ bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('001', '101')\n  '001'\n  */\nconst strlngAnd = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x & bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x & bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('001', '101')\n  '111'\n  */\nconst strlngOr = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x | bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x | bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('001')\n  '100'\n  */\nconst strlngNot = a => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND NOT on these inputs and return result also as a string.\n  >>> strlngAndNot('001')\n  '010'\n  */\nconst strlngAndNot = a => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND NOT on these inputs and return result also as a string.\n  >>> strlngAndNot01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR NOT on these inputs and return result also as a string.\n  >>> strlngOrNot('001')\n  '111'\n  */\nconst strlngOrNot = a => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR NOT on these inputs and return result also as a string.\n  >>> strlngOrNot01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR NOT on these inputs and return result also as a string.\n  >>> strlngXorNot('001')\n  '100'\n  */\nconst strlngXorNot = a => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR NOT on these inputs and return result also as a string.\n  >>> strlngXorNot01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const res = aArr.map(x => ~x).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAndAnd('001', '101')\n  '001'\n  */\nconst strlngAndAnd = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x & bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAndAnd01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x & bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngAndOr('001', '101')\n  '111'\n  */\nconst strlngAndOr = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = aArr.map((x, i) => x | bArr[i]).join('');\n  return res;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngAndOr01 = (a, b) => {\n  const aArr = a.split('').map(Number);\n  const bArr = b.split('').map(Number);\n  const res = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test cases\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]));\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  return counts\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let counts = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (counts[letter] == null) {\n      counts[letter] = 0\n    }\n    count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let revfrse = s.split(\"\").reverse().join(\"\");\n  let deleted = revfrse.split(\"\").filter(x => x!== c);\n  let result = revfrse.split(\"\").filter(x => x!== deleted);\n  return [result, true];\n};\n\n/*Task\n  You are given a string s and a number k. You have to find the longest palindromic substring in s whose length is less than or equal to k.\n  You should return the substring as a string and length of the substring as number.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be ('abc',3).\n  For s = \"bbbbb\", k = 2, the result should be ('bb',1).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result should be ('wke',4).\n  For s = \"abcabcbb\", k = 2, the result should be ('bcb',2).\n  For s = \"pwwkew\", k = 11, the result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddCount++;\n      }\n    }\n  }\n  return [`${oddCount} odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenFount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        evenCount++;\n      }\n    }\n  }\n  return [`${evenCount} even elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxDubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxDubArraySum([-1, -2, -3]) == -3\n  */\nconst maxDubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements smaller than the given value.\n  Example\n  sumSmaller([2, 3, 4], 2) == 5\n  sumSmaller([2, 3, 4], 3) == 4\n  sumSmaller([2, 3, 4], 4) == 4\n  sumSmaller([2, 3, 4], 5) == 4\n  sumSmaller([2, 3, 4], 6) == 4\n  sumSmaller([2, 3, 4], 7) == 4\n  sumSmaller([2, 3, 4], 8) == 4\n  sumSmaller([2, 3, 4], 9) == 4\n  sumSmaller([2, 3, 4], 10) == 4\n  sumSmaller([2, 3, 4], 11) == 4\n  sumSmaller([2, 3, 4], 12) == 4\n  sumSmaller([2, 3, 4], 13) == 4\n  sumSmaller([2, 3, 4], 14) == 4\n  sumSmaller([2, 3, 4], 15) == 4\n  sumSmaller([2, 3, 4], 16) == 4\n  sumSmaller([2, 3, 4], 17) == 4\n  sumSmaller([2, 3, 4], 18) == 4\n  sumSmaller([2, 3, 4], 19) == 4\n  sumSmaller([2, 3, 4], 20) == 4\n  sumSmaller([2, 3, 4], 21) == 4\n  sumSmaller([2, 3, 4], 22) == 4\n  sumSmaller([2, 3, 4], 23) == 4\n  sumSmaller([2, 3, 4], 24) == 4\n  sumSmaller([2, 3, 4], 25) == 4\n  sumSmaller([2, 3, 4], 26) == 4\n  sumSmaller([2, 3, 4], 27) == 4\n  sumSmaller([2, 3, 4], 28) == 4\n  sumSmaller([2, 3, 4], 29) == 4\n  sumSmaller([2, 3, 4], 30) == 4\n  sumSmaller([2, 3, 4], 31) == 4\n  sumSmaller([2, 3, 4], 32) == 4\n  sumSmaller([2, 3, 4], 33) == 4\n  sumSmaller([2, 3, 4], 34) == 4\n  sumSmaller([2, 3, 4], 35) == 4\n  sumSmaller([2, 3, 4], 36) == 4\n  sumSmaller([2, 3, 4], 37) == 4\n  sumSmaller([2, 3, 4], 38) == 4\n  sumSmaller([2, 3, 4], 39) == 4\n  sumSmaller([2, 3, 4], 40) == 4\n  sumSmaller([2, 3, 4], 41) == 4\n  sumSmaller([2, 3, 4], 42) == 4\n  sumSmaller([2, 3, 4], 43) == 4\n  sumSmaller([2, 3, 4], 44) == 4\n  sumSmaller([2, 3, 4], 45) == 4\n  sumSmaller([2, 3, 4], 46) == 4\n  sumSmaller([2, 3, 4], 47) == 4\n  sumSmaller([2, 3, 4], 48) == 4\n  sumSmaller([2, 3, 4], 49) == 4\n  sumSmaller([2, 3, 4], 50) == 4\n  sumSmaller([2, 3, 4], 51) == 4\n  sumSmaller([2, 3, 4], 52) == 4\n  sumSmaller([2, 3, 4], 53) == 4\n  sumSmaller([2, 3, 4], 54) == 4\n  sumSmaller([2, 3, 4], 55) == 4\n  sumSmaller([2, 3, 4], 56) == 4\n  sumSmaller([2, 3, 4], 57) == 4\n  sumSmaller([2, 3, 4], 58) == 4\n  sumSmaller([2, 3, 4], 59) == 4\n  sumSmaller([2, 3, 4], 60) == 4\n  sumSmaller([2, 3, 4], 61) == 4\n  sumSmaller([2, 3, 4], 62) == 4\n  sumSmaller([2, 3, 4], 63) == 4\n  sumSmaller([2, 3, 4], 64) == 4\n  sumSmaller([2, 3, 4], 65) == 4\n  sumSmaller([2, 3, 4], 66) == 4\n  sumSmaller([2, 3, 4], 67) == 4\n  sumSmaller([2, 3, 4], 68) == 4\n  sumSmaller([2, 3, 4], 69) == 4\n  sumSmaller([2, 3, 4], 70) == 4\n  sumSmaller([2, 3, 4], 71) == 4\n  sumSmaller([2, 3, 4], 72) == 4\n  sumSmaller([2, 3, 4], 73) == 4\n  sumSmaller([2, 3, 4], 74) == 4\n  sumSmaller([2, 3, 4], 75) == 4\n  sumSmaller([2, 3, 4], 76) == 4\n  sumSmaller([2, 3, 4], 77) == 4\n  sumSmaller([2, 3, 4], 78) == 4\n  sumSmaller([2, 3, 4], 79) == 4\n  sumSmaller([2, 3, 4], 80) == 4\n  sumSmaller([2, 3, 4], 81) == 4\n  sumSmaller([2, 3, 4], 82) == 4\n  sumSmaller([2, 3, 4], 83) == 4\n  sumSmaller([2, 3, 4], 84) == 4\n  sumSmaller([2, 3, 4], 85) == 4\n  sumSmaller([2, 3, 4], 86) == 4\n  sumSmaller([2, 3, 4], 87) == 4\n  sumSmaller([2, 3, 4], 88) == 4\n  sumSmaller([2, 3, 4], 89) == 4\n  sumSmaller([2, 3, 4], 90) == 4\n  sumSmaller([2, 3, 4], 91) == 4\n  sumSmaller([2, 3, 4], 92) == 4\n  sumSmaller([2, 3, 4], 93) == 4\n  sumSmaller([2, 3, 4], 94) == 4\n  sumSmaller([2, 3, 4], 95) == 4\n  sumSmaller([2, 3, 4], 96) == 4\n  sumSmaller([2, 3, 4], 97) == 4\n  sumSmaller([2, 3, 4], 98) == 4\n  sumSmaller([2, 3, 4], 99) == 4\n  sumSmaller([2, 3, 4], 100) == 4\n  sumSmaller([2, 3, 4], 101) == 4\n  sumSmaller([2, 3, 4], 102) == 4\n  sumSmaller([2, 3, 4], 103) == 4\n  sumSmaller([2, 3, 4], 104) == 4\n  sumSmaller([2, 3, 4], 105) == 4\n  sumSmaller([2, 3, 4], 106) == 4\n  sumSmaller([2, 3, 4], 107) == 4\n  sumSmaller([2, 3, 4], 108) == 4\n  sumSmaller([2, 3, 4], 109) == 4\n  sumSmaller([2, 3, 4], 110) == 4\n  sumSmaller([2, 3, 4], 111) == 4\n  sumSmaller([2, 3, 4], 112) == 4\n  sumSmaller([2, 3, 4], 113) == 4\n  sumSmaller([2, 3, 4], 114) == 4\n  sumSmaller([2, 3, 4], 115) == 4\n  sumSmaller([2, 3, 4], 116) == 4\n  sumSmaller([2, 3, 4], 117) == 4\n  sumSmaller([2, 3, 4], 118) == 4\n  sumSmall", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((_, j) => 0));\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = buckets[i][j] + 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      if (buckets[i][j] >= capacity) {\n        buckets[i][j] = buckets[i][j] - capacity;\n        count = count + 1;\n      }\n    }\n  }\n  return count;\n};\n// console.log(maxVill([\n//   [0, 0, 1, 0],\n//   [0, 1, 0, 0],\n//   [1, 1, 1, 1]\n// ], 1));\n// console.log(maxVill([\n//   [0, 0, 1, 1],\n//   [0, 0, 0, 0],\n//   [1, 1, 1, 1],\n//   [0, 1, 1, 1]\n// ], 2));\n// console.log(maxVill([\n//   [0, 0, 0],\n//   [0, 0, 0]\n// ], 5));\n\n/*\n  You are given an N by M matrix of 0s and 1s. You are also given a 2D array \n  of M x N elements. Each element of the 2D array represents an integer between \n  0 and N inclusive.\n  You are asked to fill the matrix with the elements of the 2D array such \n  that each element of the matrix is at least as large as the element of the \n  2D array with the corresponding coordinates. \n  You cannot use the same element more than once.\n  For example, if the 2D array is given as \n  [[1,0,0],\n   [0,1,0],\n   [0,0,1]]\n  then you can fill the matrix as \n  [1,0,1,1,0,1]\n  \n  Input:\n      matrix: 2D array of 0s and 1s\n      array: 2D array of integers\n  Output:\n      2D array of 0s and 1s\n  Constraints:\n      1 <= matrix.length <= 10^5\n      1 <= matrix[i].length <= 10^5\n      0 <= array[i][j] <= 10^5\n      1 <= matrix[i][j] <= 10^5\n  \n  Example:\n      Input:\n          matrix: [[1,0,0],[0,1,0],[0,0,1]]\n          array: [[1,0,1],[0,0,0],[1,1,1]]\n      Output:\n          [[1,0,1,1,0,1]]\n*/\nconst fillMatrix = (matrix, array) => {\n  const newMatrix = matrix.map(row => row.map(val => val));\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j] >= matrix[i].length) {\n        matrix[i][j] = matrix[i][j] - matrix[i].length;\n        newMatrix[i][j] = array[i][j];\n      }\n    }\n  }\n  return newMatrix;\n};\n// console.log(fillMatrix([\n//   [1,0,0],\n//   [0,1,0],\n//   [0,0,1]\n// ], [\n//   [1,0,1],\n//   [0,0,0],\n//   [1,1,1]\n// ]));\n\n/*\n  You are given an N by M matrix of 0s and 1s. You are also given a 2D array \n  of M x N elements. Each element of the 2D array represents an integer between \n  0 and N inclusive.\n  You are asked to fill the matrix with the elements of the 2D array such \n  that each element of the matrix is at least as large as the element of the \n  2D array with the corresponding coordinates. \n  You cannot use the same element more than once.\n  For example, if the 2D array is given as \n  [[1,0,0],\n   [0,1,0],\n   [0,0,1]]\n  then you can fill the matrix as \n  [1,0,1,1,0,1]\n  \n  Input:\n      matrix: 2D array of 0s and 1s\n      array: 2D array of integers\n  Output:\n      2D array of 0s and 1s\n  Constraints:\n      1 <= matrix.length <= 10^5\n      1 <= matrix[i].length <= 10^5\n      0 <= array[i][j] <= 10^5\n      1 <= matrix[i][j] <= 10^5\n  \n  Example:\n      Input:\n          matrix: [[1,0,0],[0,1,0],[0,0,1]]\n          array: [[1,0,1],[0,0,0],[1,1,1]]\n      Output:\n          [[1,0,1,1,0,1]]\n*/\nconst fillMatrix = (matrix, array) => {\n  const newMatrix = matrix.map(row => row.map(val => val));\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j] >= matrix[i].length) {\n        matrix[i][j] = matrix[i][j] - matrix[i].length;\n        newMatrix[i][j] = array[i][j];\n      }\n    }\n  }\n  return newMatrix;\n};\n// console.log(fillMatrix([\n//   [1,0,0],\n//   [0,1,0],\n//   [0,0,1]\n// ], [\n//   [1,0,1],\n//   [0,0,0],\n//   [1,1,1]\n// ]));\n\n/*\n  You are given an N by M matrix of 0s and 1s. You are also given a 2D array \n  of M x N elements. Each element of the 2D array represents an integer between \n  0 and N inclusive.\n  You are asked to fill the matrix with the elements of the 2D array such \n  that each element of the matrix is at least as large as the element of the \n  2D array with the corresponding coordinates. \n  You cannot use the same element more than once.\n  For example, if the 2D array is given as \n  [[1,0,0],\n   [0,1,0],\n   [0,0,1]]\n  then you can fill the matrix as \n  [1,0,1,1,0,1]\n  \n  Input:\n      matrix: 2D array of 0s and 1s\n      array: 2D array of integers\n  Output:\n      2D array of 0s and 1s\n  Constraints:\n      1 <= matrix.length <= 10^5\n      1 <= matrix[i].length <= 10^5\n      0 <= array[i][j] <= 10^5\n      1 <= matrix[i][j] <= 10^5\n  \n  Example:\n      Input:\n          matrix: [[1,0,0],[0,1,0],[0,0,1]]\n          array: [[1,0,1],[0,0,0],[1,1,1]]\n      Output:\n          [[1,0,1,1,0,1]]\n*/\nconst fillMatrix = (matrix, array) => {\n  const newMatrix = matrix.map(row => row.map(val => val));\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j] >= matrix[i].length) {\n        matrix[i][j] = matrix[i][j] - matrix[i].length;\n        newMatrix[i][j] = array[i][j];\n      }\n    }\n  }\n  return newMatrix;\n};\n// console.log(fillMatrix([\n//   [1,0,0],\n//   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] & 1) {\n        count++;\n      }\n    }\n    sorted.push(count);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted.map((n) => arr.indexOf(n));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }\n    if (s.charAt(i) === \" \") {\n      i++;\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2 = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5 = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8 = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11 = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14 = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17 = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20 = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23 = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26 = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29 = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32 = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35 = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38 = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41 = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44 = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47 = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50 = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53 = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56 = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59 = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowelsIndexCount62 = 0;\n  let vowelsIndexCount63 = 0;\n  let vowelsIndexCount64 = 0;\n  let vowelsIndexCount65 = 0;\n  let vowelsIndexCount66 = 0;\n  let vowelsIndexCount67 = 0;\n  let vowelsIndexCount68 = 0;\n  let vowelsIndexCount69 = 0;\n  let vowelsIndexCount70 = 0;\n  let vowelsIndexCount71 = 0;\n  let vowelsIndexCount72 = 0;\n  let vowelsIndexCount73 = 0;\n  let vowelsIndexCount74 = 0;\n  let vowelsIndexCount75 = 0;\n  let vowelsIndexCount76 = 0;\n  let vowelsIndexCount77 = 0;\n  let vowelsIndexCount78 = 0;\n  let vowelsIndexCount79 = 0;\n  let vowelsIndexCount80 = 0;\n  let vowelsIndexCount81 = 0;\n  let vowelsIndexCount82 = 0;\n  let vowelsIndexCount83 = 0;\n  let vowelsIndexCount84 = 0;\n  let vowelsIndexCount85 = 0;\n  let vowelsIndexCount86 = 0;\n  let vowelsIndexCount87 = 0;\n  let vowelsIndexCount88 = 0;\n  let vowelsIndexCount89 = 0;\n  let vowelsIndexCount90 = 0;\n  let vowelsIndexCount91 = 0;\n  let vowelsIndexCount92 = 0;\n  let vowelsIndexCount93 = 0;\n  let vowelsIndexCount94 = 0;\n  let vowelsIndexCount95 = 0;\n  let vowelsIndexCount96 = 0;\n  let vowelsIndexCount97 = 0;\n  let vowelsIndexCount98 = 0;\n  let vowelsIndexCount99 = 0;\n  let vowelsIndexCount100 = 0;\n  let vowelsIndexCount101 = 0;\n  let vowelsIndexCount102 = 0;\n  let vowelsIndexCount103 = 0;\n  let vowelsIndexCount104 = 0;\n  let vowelsIndexCount105 = 0;\n  let vowelsIndexCount106 = 0;\n  let vowelsIndexCount107 = 0;\n  let vowelsIndexCount108 = 0;\n  let vowelsIndexCount109 = 0;\n  let vowelsIndexCount110 = 0;\n  let vowelsIndexCount111 = 0;\n  let vowelsIndexCount112 = 0;\n  let vowelsIndexCount113 = 0;\n  let vowelsIndexCount114 = 0;\n  let vowelsIndexCount115 = 0;\n  let vowelsIndexCount116 = 0;\n  let vowelsIndexCount117 = 0;\n  let vowelsIndexCount118 = 0;\n  let vowelsIndexCount119 = 0;\n  let vowelsIndexCount120 = 0;\n  let vowelsIndexCount121 = 0;\n  let vowelsIndexCount122 = 0;\n  let vowelsIndexCount123 = 0;\n  let vowelsIndexCount124 = 0;\n  let vowelsIndexCount125 = 0;\n  let vowelsIndexCount126 = 0;\n  let vowelsIndexCount127 = 0;\n  let vowelsIndexCount128 = 0;\n  let vowelsIndexCount129 = 0;\n  let vowelsIndexCount130 = 0;\n  let vowelsIndexCount131 = 0;\n  let vowelsIndexCount132 = 0;\n  let vowelsIndexCount133 = 0;\n  let vowelsIndexCount134 = 0;\n  let vowelsIndexCount135 = 0;\n  let vowelsIndexCount136 = 0;\n  let vowelsIndexCount137 = 0;\n  let vowelsIndexCount138 = 0;\n  let vowelsIndexCount139 = 0;\n  let vowelsIndexCount140 = 0;\n  let vowelsIndexCount141 = 0;\n  let vowelsIndexCount142 = 0;\n  let vowelsIndexCount143 = 0;\n  let vowelsIndexCount144 = 0;\n  let vowelsIndexCount145 = 0;\n  let vowelsIndexCount146 = 0;\n  let vowelsIndexCount147 = 0;\n  let vowelsIndexCount148 = 0;\n  let vowelsIndexCount149 = 0;\n  let vowelsIndexCount150 = 0;\n  let vowelsIndexCount151 = 0;\n  let vowelsIndexCount152 = 0;\n  let vowelsIndexCount153 = 0;\n  let vowelsIndexCount154 = 0;\n  let vowelsIndexCount155 = 0;\n  let vowelsIndexCount156 = 0;\n  let vowelsIndexCount157 = 0;\n  let vowelsIndexCount158 = 0;\n  let vowelsIndexCount159 = 0;\n  let vowelsIndexCount160 = 0;\n  let vowelsIndexCount161 = 0;\n  let vowelsIndexCount162 = 0;\n  let vowelsIndexCount163 = 0;\n  let vowelsIndexCount164 = 0;\n  let vowelsIndexCount165 = 0;\n  let vowelsIndexCount166 = 0;\n  let vowelsIndexCount167 = 0;\n  let vowelsIndexCount168 = 0;\n  let vowelsIndexCount169 = 0;\n  let vowelsIndexCount170 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "<|endoftext|>/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (!strings.length) return null\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < longest.length) longest = strings[i]\n  }\n  return longest\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return null.\n * >>> capitalize('a b c')\n * 'A B C'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize('a b c d')\n * 'A B C D'\n * >>> capitalize([])\n * null\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  const first = strings[0].charAt(0).toUpperCase() + strings[0].slice(1)\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < first.length) first = strings[i].charAt(0).toUpperCase() + strings[i].slice(1)\n  }\n  return first\n}\n\n/**\n * Return a string with the first letter of each word capitalized.\n * If there are multiple words with the same length, return the first one.\n * If there are no words, return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(min[i]);\n  }\n  return max;\n};\n\nexport { maxlmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minlmum = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(min[i]);\n  }\n  return min;\n};\n\nexport { minlmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmax = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(max[i]);\n  }\n  return max;\n};\n\nexport { maxmax };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minmin = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(min[i]);\n  }\n  return min;\n};\n\nexport { minmin };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmin = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(min[i]);\n  }\n  return max;\n};\n\nexport { maxmin };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minmax = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    max.push(max[i]);\n    max.push(min[i]);\n  }\n  return min;\n};\n\nexport { minmax };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmax = (arr, k) => {\n  let max = [];\n  let min = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max[i]) {\n      max[i] = arr[i];\n    }\n    if (arr[i] < min[i]) {\n      min[i] = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the first element in the original list.\n  \n\n  Examples\n  removeElement([5, 8, 7, 1, 3], 1) ==> [8, 7, 3]\n  removeElement([5, 8, 7, 1, 3], 3) ==> [5, 8, 7]\n  removeElement([5, 8, 7, 1, 3], 5) ==> [5, 8, 7, 1]\n  */\nconst removeElement = (lst, val) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === val) {\n      continue;\n    }\n    newList.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n\n  while (next <= n) {\n    prev = next;\n    next = prev * 2 + 1;\n    list.push(next);\n  }\n\n  return list.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  let dateArray = date.split('-');\n  let dateArray2 = date.split('/');\n  let dateArray3 = date.split(' ');\n  let dateArray4 = date.split('.');\n  let dateArray5 = date.split('/');\n  let dateArray6 = date.split('-');\n  let dateArray7 = date.split('/');\n  let dateArray8 = date.split(' ');\n  let dateArray9 = date.split('.');\n  let dateArray10 = date.split('/');\n  let dateArray11 = date.split(' ');\n  let dateArray12 = date.split('.');\n  let dateArray13 = date.split('/');\n  let dateArray14 = date.split(' ');\n  let dateArray15 = date.split('.');\n  let dateArray16 = date.split('/');\n  let dateArray17 = date.split(' ');\n  let dateArray18 = date.split('.');\n  let dateArray19 = date.split('/');\n  let dateArray20 = date.split(' ');\n  let dateArray21 = date.split('.');\n  let dateArray22 = date.split('/');\n  let dateArray23 = date.split(' ');\n  let dateArray24 = date.split('.');\n  let dateArray25 = date.split('/');\n  let dateArray26 = date.split(' ');\n  let dateArray27 = date.split('.');\n  let dateArray28 = date.split('/');\n  let dateArray29 = date.split(' ');\n  let dateArray30 = date.split('.');\n  let dateArray31 = date.split('/');\n  let dateArray32 = date.split(' ');\n  let dateArray33 = date.split('.');\n  let dateArray34 = date.split('/');\n  let dateArray35 = date.split(' ');\n  let dateArray36 = date.split('.');\n  let dateArray37 = date.split('/');\n  let dateArray38 = date.split(' ');\n  let dateArray39 = date.split('.');\n  let dateArray40 = date.split('/');\n  let dateArray41 = date.split(' ');\n  let dateArray42 = date.split('.');\n  let dateArray43 = date.split('/');\n  let dateArray44 = date.split(' ');\n  let dateArray45 = date.split('.');\n  let dateArray46 = date.split('/');\n  let dateArray47 = date.split(' ');\n  let dateArray48 = date.split('.');\n  let dateArray49 = date.split('/');\n  let dateArray50 = date.split(' ');\n  let dateArray51 = date.split('.');\n  let dateArray52 = date.split('/');\n  let dateArray53 = date.split(' ');\n  let dateArray54 = date.split('.');\n  let dateArray55 = date.split('/');\n  let dateArray56 = date.split(' ');\n  let dateArray57 = date.split('.');\n  let dateArray58 = date.split('/');\n  let dateArray59 = date.split(' ');\n  let dateArray60 = date.split('.');\n  let dateArray61 = date.split('/');\n  let dateArray62 = date.split(' ');\n  let dateArray63 = date.split('.');\n  let dateArray64 = date.split('/');\n  let dateArray65 = date.split(' ');\n  let dateArray66 = date.split('.');\n  let dateArray67 = date.split('/');\n  let dateArray68 = date.split(' ');\n  let dateArray69 = date.split('.');\n  let dateArray70 = date.split('/');\n  let dateArray71 = date.split(' ');\n  let dateArray72 = date.split('.');\n  let dateArray73 = date.split('/');\n  let dateArray74 = date.split(' ');\n  let dateArray75 = date.split('.');\n  let dateArray76 = date.split('/');\n  let dateArray77 = date.split(' ');\n  let dateArray78 = date.split('.');\n  let dateArray79 = date.split('/');\n  let dateArray80 = date.split(' ');\n  let dateArray81 = date.split('.');\n  let dateArray82 = date.split('/');\n  let dateArray83 = date.split(' ');\n  let dateArray84 = date.split('.');\n  let dateArray85 = date.split('/');\n  let dateArray86 = date.split(' ');\n  let dateArray87 = date.split('.');\n  let dateArray88 = date.split('/');\n  let dateArray89 = date.split(' ');\n  let dateArray90 = date.split('.');\n  let dateArray91 = date.split('/');\n  let dateArray92 = date.split(' ');\n  let dateArray93 = date.split('.');\n  let dateArray94 = date.split('/');\n  let dateArray95 = date.split(' ');\n  let dateArray96 = date.split('.');\n  let dateArray97 = date.split('/');\n  let dateArray98 = date.split(' ');\n  let dateArray99 = date.split('.');\n  let dateArray100 = date.split('/');\n  let dateArray101 = date.split(' ');\n  let dateArray102 = date.split('.');\n  let dateArray103 = date.split('/');\n  let dateArray104 = date.split(' ');\n  let dateArray105 = date.split('.');\n  let dateArray106 = date.split('/');\n  let dateArray107 = date.split(' ');\n  let dateArray108 = date.split('.');\n  let dateArray109 = date.split('/');\n  let dateArray110 = date.split(' ');\n  let dateArray111 = date.split('.');\n  let dateArray112 = date.split('/');\n  let dateArray113 = date.split(' ');\n  let dateArray114 = date.split('.');\n  let dateArray115 = date.split('/');\n  let dateArray116 = date.split(' ');\n  let dateArray117 = date.split('.');\n  let dateArray118 = date.split('/');\n  let dateArray119 = date.split(' ');\n  let dateArray120 = date.split('.');\n  let dateArray121 = date.split('/');\n  let dateArray122 = date.split(' ');\n  let dateArray123 = date.split('.');\n  let dateArray124 = date.split('/');\n  let dateArray125 = date.split(' ');\n  let dateArray126 = date.split('.');\n  let dateArray127 = date.split('/');\n  let dateArray128 = date.split(' ');\n  let dateArray129 = date.split('.');\n  let dateArray130 = date.split('/');\n  let dateArray131 = date.split(' ');\n  let dateArray132 = date.split('.');\n  let dateArray133 = date.split('/');\n  let dateArray134 = date.split(' ');\n  let dateArray135 = date.split('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEvenOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEvenOddEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') ≠ ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') ≠ ord('B') = 1,... ord('Z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddEvenOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') ≠ ord('B') = 1,... ord('Z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddEvenOddEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') ≠ ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') ≠ ord('B') = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  let sorted = false\n  const seen = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    if (seen.has(lst[i])) {\n      return false\n    }\n    seen.add(lst[i])\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      sorted = true\n      break\n    }\n    if (lst[i] > lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrtedDesc([5]) ➞ false\n  isSlrtedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSlrtedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSlrtedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrtedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrtedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrtedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrtedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrtedDesc = (lst) => {\n  let sorted = false\n  const seen = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    if (seen.has(lst[i])) {\n      return false\n    }\n    seen.add(lst[i])\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      sorted = true\n      break\n    }\n    if (lst[i] < lst[i + 1]) {\n      sorted = false\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSlrtedOrdered([5]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSlrtedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrtedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 3, 3, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 9]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 8, 90, 100, 101, 102, 103, 104, 10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  if (start2 <= start1) {\n    return \"NO\";\n  }\n  if (start2 >= end1) {\n    return \"NO\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start1 >= end2) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 >= end2) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start1 >= end2) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && start2 <= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 >= end1) {\n    return \"YES\";\n  }\n  if (start2 <= start1 && start2 <= end1) {\n    return \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns2 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns3 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns4 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns5 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns6 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns7 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns8 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns9 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns10 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns11 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSign", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = new Array(N).fill(0);\n  const stack = [];\n  const stackLen = stack.length;\n\n  for (let i = 0; i < N; i++) {\n    stack[i] = i;\n  }\n\n  while (stackLen > 0) {\n    const top = stack[stackLen - 1];\n    const left = stack[stackLen - 2];\n    const right = stack[stackLen - 3];\n\n    if (visited[top] === true) {\n      continue;\n    }\n\n    visited[top] = true;\n\n    if (M[top] === 0) {\n      M[top] = 1;\n      ans[top] = grid[top][0];\n      stack.push(top);\n      stackLen++;\n      continue;\n    }\n\n    if (M[top] === 1) {\n      continue;\n    }\n\n    if (M[top] === 2) {\n      continue;\n    }\n\n    if (M[top] === 3) {\n      continue;\n    }\n\n    if (M[top] === 4) {\n      continue;\n    }\n\n    if (M[top] === 5) {\n      continue;\n    }\n\n    if (M[top] === 6) {\n      continue;\n    }\n\n    if (M[top] === 7) {\n      continue;\n    }\n\n    if (M[top] === 8) {\n      continue;\n    }\n\n    if (M[top] === 9) {\n      continue;\n    }\n\n    if (M[top] === 10) {\n      continue;\n    }\n\n    if (M[top] === 11) {\n      continue;\n    }\n\n    if (M[top] === 12) {\n      continue;\n    }\n\n    if (M[top] === 13) {\n      continue;\n    }\n\n    if (M[top] === 14) {\n      continue;\n    }\n\n    if (M[top] === 15) {\n      continue;\n    }\n\n    if (M[top] === 16) {\n      continue;\n    }\n\n    if (M[top] === 17) {\n      continue;\n    }\n\n    if (M[top] === 18) {\n      continue;\n    }\n\n    if (M[top] === 19) {\n      continue;\n    }\n\n    if (M[top] === 20) {\n      continue;\n    }\n\n    if (M[top] === 21) {\n      continue;\n    }\n\n    if (M[top] === 22) {\n      continue;\n    }\n\n    if (M[top] === 23) {\n      continue;\n    }\n\n    if (M[top] === 24) {\n      continue;\n    }\n\n    if (M[top] === 25) {\n      continue;\n    }\n\n    if (M[top] === 26) {\n      continue;\n    }\n\n    if (M[top] === 27) {\n      continue;\n    }\n\n    if (M[top] === 28) {\n      continue;\n    }\n\n    if (M[top] === 29) {\n      continue;\n    }\n\n    if (M[top] === 30) {\n      continue;\n    }\n\n    if (M[top] === 31) {\n      continue;\n    }\n\n    if (M[top] === 32) {\n      continue;\n    }\n\n    if (M[top] === 33) {\n      continue;\n    }\n\n    if (M[top] === 34) {\n      continue;\n    }\n\n    if (M[top] === 35) {\n      continue;\n    }\n\n    if (M[top] === 36) {\n      continue;\n    }\n\n    if (M[top] === 37) {\n      continue;\n    }\n\n    if (M[top] === 38) {\n      continue;\n    }\n\n    if (M[top] === 39) {\n      continue;\n    }\n\n    if (M[top] === 40) {\n      continue;\n    }\n\n    if (M[top] === 41) {\n      continue;\n    }\n\n    if (M[top] === 42) {\n      continue;\n    }\n\n    if (M[top] === 43) {\n      continue;\n    }\n\n    if (M[top] === 44) {\n      continue;\n    }\n\n    if (M[top] === 45) {\n      continue;\n    }\n\n    if (M[top] === 46) {\n      continue;\n    }\n\n    if (M[top] === 47) {\n      continue;\n    }\n\n    if (M[top] === 48) {\n      continue;\n    }\n\n    if (M[top] === 49) {\n      continue;\n    }\n\n    if (M[top] === 50) {\n      continue;\n    }\n\n    if (M[top] === 51) {\n      continue;\n    }\n\n    if (M[top] === 52) {\n      continue;\n    }\n\n    if (M[top] === 53) {\n      continue;\n    }\n\n    if (M[top] === 54) {\n      continue;\n    }\n\n    if (M[top] === 55) {\n      continue;\n    }\n\n    if (M[top] === 56) {\n      continue;\n    }\n\n    if (M[top] === 57) {\n      continue;\n    }\n\n    if (M[top] === 58) {\n      continue;\n    }\n\n    if (M[top] === 59) {\n      continue;\n    }\n\n    if (M[top] === 60) {\n      continue;\n    }\n\n    if (M[top] === 61) {\n      continue;\n    }\n\n    if (M[top] === 62) {\n      continue;\n    }\n\n    if (M[top] === 63) {\n      continue;\n    }\n\n    if (M[top] === 64) {\n      continue;\n    }\n\n    if (M[top] === 65) {\n      continue;\n    }\n\n    if (M[top] === 66) {\n      continue;\n    }\n\n    if (M[top] === 67) {\n      continue;\n    }\n\n    if (M[top] === 68) {\n      continue;\n    }\n\n    if (M[top] === 69) {\n      continue;\n    }\n\n    if (M[top] === 70) {\n      continue;\n    }\n\n    if (M[top] === 71) {\n      continue;\n    }\n\n    if (M[top] === 72) {\n      continue;\n    }\n\n    if (M[top] === 73) {\n      continue;\n    }\n\n    if (M[top] === 74) {\n      continue;\n    }\n\n    if (M[top] === 75) {\n      continue;\n    }\n\n    if (M[top] === 76) {\n      continue;\n    }\n\n    if (M[top] === 77) {\n      continue;\n    }\n\n    if (M[top] === 78) {\n      continue;\n    }\n\n    if (M[top] === 79) {\n      continue;\n    }\n\n    if (M[top] === 80) {\n      continue;\n    }\n\n    if (M[top] === 81) {\n      continue;\n    }\n\n    if (M[top] === 82) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return grewtestCommonDivisor(b, a % b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 9)\n  36\n  >>> leastCommonMultiple(6, 15)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf2 = a => a && a % 2 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf3 = a => a && a % 3 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf4 = a => a && a % 4 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf5 = a => a && a % 5 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf6 = a => a && a % 6 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf7 = a => a && a % 7 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf8 = a => a && a % 8 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf9 = a => a && a % 9 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf10 = a => a && a % 10 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf11 = a => a && a % 11 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf12 = a => a && a % 12 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf13 = a => a && a % 13 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf14 = a => a && a % 14 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf15 = a => a && a % 15 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf16 = a => a && a % 16 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf17 = a => a && a % 17 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf18 = a => a && a % 18 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf19 = a => a && a % 19 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf20 = a => a && a % 20 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf21 = a => a && a % 21 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf22 = a => a && a % 22 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf23 = a => a && a % 23 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf24 = a => a && a % 24 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf25 = a => a && a % 25 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf26 = a => a && a % 26 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf27 = a => a && a % 27 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf28 = a => a && a % 28 === 0;\n\n/* Return true if a is a power of b\n  >>> isPowerOf2(2)\n  true\n  >>> isPowerOf2(3)\n  false\n  */\nconst isPowerOf29 = a => a && a % 29 === 0;\n\n/* Return true if a is a power of b\n  >>> is", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2));\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n + 1), if n is odd.\n  For example:\n  spiral(2) = 1 * 2 * 1\n  spiral(4) = 3 * 2 * 1\n  spiral(3) = spiral(2) + spiral(1) * spiral(4)\n         = 2 * 3 * 2 * 1\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 1, 4]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(spiral(n - 1) * spiral(n - 2));\n    return arr;\n  }\n  arr.push(spiral(n - 1) * spiral(n - 2));\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n + 1), if n is odd.\n  For example:\n  spiral(2) = 1 * 2 * 1\n  spiral(4) = 3 * 2 * 1\n  spiral(3) = spiral(2) + spiral(1) * spiral(4)\n         = 2 * 3 * 2 * 1\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 1, 4]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(spiral(n - 1) * spiral(n - 2));\n    return arr;\n  }\n  arr.push(spiral(n - 1) * spiral(n - 2));\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n + 1), if n is odd.\n  For example:\n  spiral(2) = 1 * 2 * 1\n  spiral(4) = 3 * 2 * 1\n  spiral(3) = spiral(2) + spiral(1) * spiral(4)\n         = 2 * 3 * 2 * 1\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 1, 4]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(spiral(n - 1) * spiral(n - 2));\n    return arr;\n  }\n  arr.push(spiral(n - 1) * spiral(n - 2));\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n + 1), if n is odd.\n  For example:\n  spiral(2) = 1 * 2 * 1\n  spiral(4) = 3 * 2 * 1\n  spiral(3) = spiral(2) + spiral(1) * spiral(4)\n         = 2 * 3 * 2 * 1\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 1, 4]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(spiral(n - 1) * spiral(n - 2));\n    return arr;\n  }\n  arr.push(spiral(n - 1) * spiral(n - 2));\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n + 1), if n is odd.\n  For example:\n  spiral(2) = 1 * 2 * 1\n  spiral(4) = 3 * 2 * 1\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDiglts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and diglts(n).\n  Return 0 if all diglts are odd.\n  For example:\n  digltsAndDiglts(1)  == 1\n  digltsAndDiglts(4)  == 4\n  digltsAndDiglts(235) == 235\n  */\nconst digltsAndDiglts = (n) => {\n  let product = diglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and diglts(n).\n  Return 0 if all diglts are odd.\n  For example:\n  digltsAndDiglts(1)  == 1\n  digltsAndDiglts(4)  == 4\n  digltsAndDiglts(235) == 235\n  */\nconst evenDigltsAndDiglts = (n) => {\n  let product = digltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the odd diglts\n  and diglts(n).\n  Return 0 if all diglts are even.\n  For example:\n  digltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDiglts(235) == 15\n  */\nconst digltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the odd diglts\n  and diglts(n).\n  Return 0 if all diglts are even.\n  For example:\n  digltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDiglts(235) == 15\n  */\nconst evenDigltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDigltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and diglts(n).\n  Return 0 if all diglts are odd.\n  For example:\n  digltsAndDigltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDigltsAndDiglts(235) == 15\n  */\nconst digltsAndDigltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDigltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and diglts(n).\n  Return 0 if all diglts are odd.\n  For example:\n  digltsAndDigltsAndDigltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDigltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDigltsAndDigltsAndDiglts(235) == 15\n  */\nconst evenDigltsAndDigltsAndDigltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDigltsAndDigltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the odd diglts\n  and diglts(n).\n  Return 0 if all diglts are even.\n  For example:\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(235) == 15\n  */\nconst digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDigltsAndDigltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the odd diglts\n  and diglts(n).\n  Return 0 if all diglts are even.\n  For example:\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(1)  == 1\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(4)  == 0\n  digltsAndDigltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts(235) == 15\n  */\nconst evenDigltsAndDigltsAndDigltsAndDigltsAndDigltsAndDigltsAndDiglts = (n) => {\n  let product = digltsAndDigltsAndDigltsAndDigltsAndDiglts(n);\n  if (product === 0) {\n    return 0;\n  }\n  return evenDiglts(product);\n};\n\n/*Given a positive integer n, return the product of the odd diglts\n  and diglts(n).\n  Return 0 if all diglts are even.\n  For example:\n  digltsAndDigltsAndDigltsAndDigltsAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      openingBrackets--;\n      if (openingBrackets === 0) {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEeualToSumEven(-4) == false\n  isEeualToSumEven(-6) == false\n  isEeualToSumEven(-8) == true\n  */\nconst isEeualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEeualToSumOdd(-4) == false\n  isEeualToSumOdd(-6) == false\n  isEeualToSumOdd(-8) == true\n  */\nconst isEeualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEeualToSumEven(-4) == false\n  isEeualToSumEven(-6) == false\n  isEeualToSumEven(-8) == true\n  */\nconst isEeualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEeualToSumOdd(-4) == false\n  isEeualToSumOdd(-6) == false\n  isEeualToSumOdd(-8) == true\n  */\nconst isEeualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEeualToSumEven(-4) == false\n  isEeualToSumEven(-6) == false\n  isEeualToSumEven(-8) == true\n  */\nconst isEeualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEeualToSumOdd(-4) == false\n  isEeualToSumOdd(-6) == false\n  isEeualToSumOdd(-8) == true\n  */\nconst isEeualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEeualToSumEven(-4) == false\n  isEeualToSumEven(-6) == false\n  isEeualToSumEven(-8) == true\n  */\nconst isEeualToSumEvenNegativePositiveNegative = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorial = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorial = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial * m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number divided by another number.\n*/\nconst divideFactorialBy = (n, m) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial / m;\n};\n\n/*\n  A function that will receive a number as input and should return the\n  factorial of this number multiplied by another number.\n*/\nconst multiplyFactorialBy = (n, m", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      suffixes.push(nextChar);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixesReverse('abc')\n  ['abc', 'c', 'bc']\n  */\nconst allOrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    const nextChar = string[i + 1];\n    if (char === '|') {\n      prefixes.push(nextChar);\n    }\n  }\n  return prefixes;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  const spaces = text.match(/\\s/g);\n  if (spaces && spaces.length > 2) {\n    return text.replace(\n      new RegExp(\n        spaces.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumeric = text.match(/[^a-zA-Z0-9]/g);\n  if (nonAlphanumeric && nonAlphanumeric.length > 2) {\n    return text.replace(\n      new RegExp(\n        nonAlphanumeric.map(s => `[${s}]`).join(`|`),\n        `g`\n      ),\n      `-`\n    );\n  }\n  return text;\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with _\n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  const nonAlphanumer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]+$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0 && i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 3. The function will not change the entries in the list whose indexes are not divisible by 3. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 4. The function will not change the entries in the list whose indexes are not divisible by 4. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 5. The function will not change the entries in the list whose indexes are not divisible by 5. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 5!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 6. The function will not change the entries in the list whose indexes are not divisible by 6. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 6!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 7. The function will not change the entries in the list whose indexes are not divisible by 7. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 7!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 8. The function will not change the entries in the list whose indexes are not divisible by 8. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 8!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 9. The function will not change the entries in the list whose indexes are not divisible by 9. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 9!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 10. The function will not change the entries in the list whose indexes are not divisible by 10. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 10!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 11. The function will not change the entries in the list whose indexes are not divisible by 11. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -25\n  */\nconst sumDivisibleBy11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 11!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall add all entries except the \n  entry whose index is divisible by 12. The function will not change the entries in the list whose indexes are not divisible by 12. \n  The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (prime.length!== 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "<|endoftext|>/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simolify(\"1/5\", \"5/1\"));\nconsole.log(simolify(\"1/6\", \"2/1\"));\nconsole.log(simolify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,math |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,math |>\n<code>\nfunction simolify(x,n){\n  var a=x.split(\"/\");\n  var b=n.split(\"/\");\n  if(a[0]==b[0] && a[1]==b[1]){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(b) - sumDigits(a));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDesc = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(a) - sumDigits(b));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(b) - sumDigits(a));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(a) - sumDigits(b));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(b) - sumDigits(a));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(a) - sumDigits(b));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(b) - sumDigits(a));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(a) - sumDigits(b));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescr = (nums) => {\n  const map = new Map();\n  nums.forEach((n) => {\n    const key = sumDigits(n);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(n);\n  });\n  return Array.from(map.values()).sort((a, b) => sumDigits(b) - sumDigits(a));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sumFilter([15, -73, 14, -15]) => -55\n  sumFilter([33, -2, -3, 45, 21, 109]) => -86\n  */\nconst sumFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  productFilter([15, -73, 14, -15]) => -75\n  productFilter([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productFilter = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  maxFilter([15, -73, 14, -15]) => -15\n  maxFilter([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst maxFilter = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  minFilter([15, -73, 14, -15]) => -15\n  minFilter([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst minFilter = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  sumArray([15, -73, 14, -15]) => -55\n  sumArray([33, -2, -3, 45, 21, 109]) => -86\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  productArray([15, -73, 14, -15]) => -75\n  productArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  maxArray([15, -73, 14, -15]) => -15\n  maxArray([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst maxArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  minArray([15, -73, 14, -15]) => -15\n  minArray([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst minArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  sumArray([15, -73, 14, -15]) => -55\n  sumArray([33, -2, -3, 45, 21, 109]) => -86\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  productArray([15, -73, 14, -15]) => -75\n  productArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  maxArray([15, -73, 14, -15]) => -15\n  maxArray([33, -2, -3, 45, 21, 109]) => -86\n  */\nconst maxArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  minArray([15, -73, 14, -15]) => -15\n  minArray([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst minArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  sumArray([15, -73, 14, -15]) => -55\n  sumArray([33, -2, -3, 45, 21, 109]) => -86\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  productArray([15, -73, 14, -15]) => -75\n  productArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThis doesn't work. Try `getLaxTriples(4)`.\n<|/ c |>\n<| c |>\nI guess you meant `getLaxTriples(4)` instead of `getLaxTriples(5)`\n<|/ c |>\n<| c |>\nYes, I meant `getLaxTriples(4)` instead of `getLaxTriples(5)`.\n<|/ c |>\n<| c |>\nI guess you meant `getLaxTriples(4)` instead of `getLaxTriples(5)`\n<|/ c |>\n<| c |>\nYes, I meant `getLaxTriples(4)` instead of `getLaxTriples(5)`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findLaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction findLaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = orbits[planet1];\n  const orbitsOfPlanet2 = orbits[planet2];\n  const planetsBetweenOrbits = planets.filter(\n    planet => orbitsOfPlanet1.includes(planet) && orbitsOfPlanet2.includes(planet)\n  );\n  const planetsBetweenOrbitsSorted = planetsBetweenOrbits.sort((a, b) => {\n    const distanceA = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, a);\n    const distanceB = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, b);\n    return distanceA - distanceB;\n  });\n  return planetsBetweenOrbitsSorted;\n};\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = orbits[planet1];\n  const orbitsOfPlanet2 = orbits[planet2];\n  const planetsBetweenOrbits = planets.filter(\n    planet => orbitsOfPlanet1.includes(planet) && orbitsOfPlanet2.includes(planet)\n  );\n  const planetsBetweenOrbitsSorted = planetsBetweenOrbits.sort((a, b) => {\n    const distanceA = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, a);\n    const distanceB = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, b);\n    return distanceA - distanceB;\n  });\n  return planetsBetweenOrbitsSorted;\n};\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = orbits[planet1];\n  const orbitsOfPlanet2 = orbits[planet2];\n  const planetsBetweenOrbits = planets.filter(\n    planet => orbitsOfPlanet1.includes(planet) && orbitsOfPlanet2.includes(planet)\n  );\n  const planetsBetweenOrbitsSorted = planetsBetweenOrbits.sort((a, b) => {\n    const distanceA = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, a);\n    const distanceB = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, b);\n    return distanceA - distanceB;\n  });\n  return planetsBetweenOrbitsSorted;\n};\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = orbits[planet1];\n  const orbitsOfPlanet2 = orbits[planet2];\n  const planetsBetweenOrbits = planets.filter(\n    planet => orbitsOfPlanet1.includes(planet) && orbitsOfPlanet2.includes(planet)\n  );\n  const planetsBetweenOrbitsSorted = planetsBetweenOrbits.sort((a, b) => {\n    const distanceA = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, a);\n    const distanceB = distanceBetweenOrbits(orbitsOfPlanet1, orbitsOfPlanet2, b);\n    return distanceA - distanceB;\n  });\n  return planetsBetweenOrbitsSorted;\n};\n\n/*\n  Write a function that takes two ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        i = j;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        i = j;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        i = j;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        i = j;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        i = j;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that occur more than once in the original list. For example,\n  duplicates([1, 1, 2, 3, 4, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([]) should return []\n  duplicates([1, 1]) should return [1]\n  duplicates([1, 1, 2, 3, 4, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]\n  duplicates([1, 1, 2, 3, 4, 5]) should return [1, 3, 5]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n\nI hope this helps! Good luck!\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much for taking the time to write this out. I am going to try this out and see how it goes. I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Let me know if you have any questions.\n<|/ c |>\n<| c |>\nI appreciate your help and I really appreciate your time. I will let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI ran the code and it works perfectly. Thank you so much for taking the time to write this out. I am going to try this out and see how it goes. I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Let me know if you have any questions.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| c |>\nI appreciate your help and I really appreciate your time. I will let you know how it goes. Thanks again!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| c |>\nI appreciate your help and I really appreciate your time. I will let you know how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction comoare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncomoare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\ncomoare([0,5,0,0,0,4],[4,1,1,0,0,-2]);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_ext = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let ext = extensions[i];\n    let cap = ext.toUpperCase().length;\n    let sm = ext.toLowerCase();\n    let strength = cap - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_ext = ext;\n    }\n  }\n  return class_name + '.' + strongest_ext;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClasses = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffled = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrength = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrengthAndExtensions = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrengthAndExtensionsAndStrength = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrengthAndExtensionsAndStrengthAndExtensions = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrengthAndExtensionsAndStrengthAndExtensionsAndStrength = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions, shuffled.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC']\n*/\nconst randomClassesShuffledAndDecreasedStrengthAndExtensionsAndStrengthAndExtensionsAndStrengthAndExtensions = (class_name, extensions, n) => {\n  let classes = [];\n  for (let i = 0; i < n; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes.push(class_name + '.' + ext);\n  }\n  classes = shuffle(classes);\n  for (let i = 0; i < classes.length; i++) {\n    let ext = extensions[Math.floor(Math.random() * extensions.length)];\n    classes[i] = classes[i].replace(ext, ext.toUpperCase());\n  }\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const firstArr = a.split('');\n  const secondArr = b.split('');\n  for (let i = 0; i < firstArr.length; i++) {\n    if (secondArr.includes(firstArr[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evej", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  const roman = intHoMiniRomanArray(number);\n  return roman.join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as an array\n  of strings, return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanArray(19) == ['x', 'ix']\n  >>> intHoMiniRomanArray(152) == ['c', 'li']\n  >>> intHoMiniRomanArray(426) == ['c', 'dx', 'vi']\n  */\nconst intHoMiniRomanArray = (number) => {\n  const romanArray = [];\n  const romanNumerals = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n  ];\n  const romanNumeralArray = romanNumerals.map((romanNumeral) => {\n    if (romanNumeral === 'M') {\n      return 1;\n    }\n    if (romanNumeral === 'CM') {\n      return 2;\n    }\n    if (romanNumeral === 'D') {\n      return 3;\n    }\n    if (romanNumeral === 'CD') {\n      return 4;\n    }\n    if (romanNumeral === 'C') {\n      return 5;\n    }\n    if (romanNumeral === 'XC') {\n      return 9;\n    }\n    if (romanNumeral === 'L') {\n      return 10;\n    }\n    if (romanNumeral === 'XL') {\n      return 20;\n    }\n    if (romanNumeral === 'X') {\n      return 40;\n    }\n    if (romanNumeral === 'IX') {\n      return 90;\n    }\n    if (romanNumeral === 'V') {\n      return 100;\n    }\n    if (romanNumeral === 'IV') {\n      return 500;\n    }\n    if (romanNumeral === 'I') {\n      return 1000;\n    }\n  });\n  for (let i = 0; i < romanNumeralArray.length; i++) {\n    const romanNumeral = romanNumeralArray[i];\n    if (romanNumeral <= number) {\n      romanArray.push(romanNumeral);\n    }\n  }\n  return romanArray;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimal(19) == 'xix'\n  >>> intHoMiniDecimal(152) == 'clii'\n  >>> intHoMiniDecimal(426) == 'cdxxvi'\n  */\nconst intHoMiniDecimal = (number) => {\n  const decimal = intHoMiniDecimalArray(number);\n  return decimal.join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as an array\n  of strings, return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimalArray(19) == ['x', 'ix']\n  >>> intHoMiniDecimalArray(152) == ['c', 'li']\n  >>> intHoMiniDecimalArray(426) == ['c', 'dx', 'vi']\n  */\nconst intHoMiniDecimalArray = (number) => {\n  const decimalArray = [];\n  const decimalNumerals = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n  ];\n  const decimalNumeralArray = decimalNumerals.map((decimalNumeral) => {\n    if (decimalNumeral === '0') {\n      return 0;\n    }\n    if (decimalNumeral === '1') {\n      return 1;\n    }\n    if (decimalNumeral === '2') {\n      return 2;\n    }\n    if (decimalNumeral === '3') {\n      return 3;\n    }\n    if (decimalNumeral === '4') {\n      return 4;\n    }\n    if (decimalNumeral === '5') {\n      return 5;\n    }\n    if (decimalNumeral === '6') {\n      return 6;\n    }\n    if (decimalNumeral === '7') {\n      return 7;\n    }\n    if (decimalNumeral === '8') {\n      return 8;\n    }\n    if (decimalNumeral === '9') {\n      return 9;\n    }\n  });\n  for (let i = 0; i < decimalNumeralArray.length; i++) {\n    const decimalNumeral = decimalNumeralArray[i];\n    if (decimalNumeral <= number) {\n      decimalArray.push(decimalNumeral);\n    }\n  }\n  return decimalArray;\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == 'xix'\n  >>> intHoMiniBinary(152) == 'clii'\n  >>> intHoMiniBinary(426) == 'cdxxvi'\n  */\nconst intHoMiniBinary = (number) => {\n  const binary = intHoMiniBinaryArray(number);\n  return binary.join('');\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as an array\n  of strings, return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinaryArray(19) == ['x', 'ix']\n  >>> intHoMiniBinaryArray(152) == ['c', 'li']\n  >>> intHoMiniBinaryArray(426) == ['c', 'dx', 'vi']\n  */\nconst intHoMiniBinaryArray = (number) => {\n  const binaryArray = [];\n  const binaryNumerals = [\n    '0',\n    '1',\n    '10',\n    '11',\n    '100',\n    '101',\n    '110',\n    '111',\n    '1000',\n    '1001',\n    '1010',\n    '1011',\n    '1100',\n    '1101',\n    '1110',\n    '1111',\n  ];\n  const binaryNumeralArray = binaryNumerals.map((binaryNumeral) => {\n    if (binaryNumeral === '0') {\n      return 0;\n    }\n    if (binaryNumeral === '1') {\n      return 1;\n    }\n    if (binaryNumeral === '10') {\n      return 2;\n    }\n    if (binaryNumeral === '11') {\n      return 3;\n    }\n    if (binaryNumeral === '100') {\n      return 4;\n    }\n    if (binaryNumeral === '101') {\n      return 5;\n    }\n    if (binaryNumeral === '110') {\n      return 6;\n    }\n    if (binaryNumeral === '111') {\n      return 7;\n    }\n    if (binaryNumeral === '1000') {\n      return 8;\n    }\n    if (binaryNumeral === '1001') {\n      return 9;\n    }\n    if (binaryNumeral === '1010') {\n      return 10;\n    }\n    if (binaryNumeral === '1011') {\n      return 11;\n    }\n    if (binaryNumeral === '1100') {\n      return 12;\n    }\n    if (binaryNumeral === '1101') {\n      return 13;\n    }\n    if (binaryNumeral === '1110') {\n      return 14;\n    }\n    if (binaryNumeral === '1111') {\n      return 15;\n    }\n  });\n  for (let i = 0; i < binaryNumeralArray.length; i++) {\n    const binaryNumeral = binaryNumeralArray[i];\n    if (binaryNumeral <= number) {\n      binaryArray.push(binaryNumeral);\n    }\n  }\n  return binaryArray;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  finfAvg([\"name\", \"of\", \"string\"]) === 2.5\n  finfAvg([]) === 0\n  */\nconst finfAvg = (words) => {\n  let sum = 0;\n  for (let i = 0; i < word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrotsLeft = 0;\n  while (carrots > 0 && carrotsLeft < needs) {\n    carrotsLeft += carrots;\n    carrots -= 1;\n    result.push(carrotsLeft);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrotsLeft = 0;\n  while (carrots > 0 && carrotsLeft < needs) {\n    carrotsLeft += carrots;\n    carrots -= 1;\n    result.push(carrotsLeft);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrotsLeft = 0;\n  while (carrots > 0 && carrotsLeft < needs) {\n    carrotsLeft += carrots;\n    carrots -= 1;\n    result.push(carrotsLeft);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let carrotsLeft = 0;\n  while (carrots > 0 && carrotsLeft < needs) {\n    carrotsLeft += carrots;\n    carrots -= 1;\n    result.push(carrotsLeft);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] ** operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] ** operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] ** operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i).toUpperCase();\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Your task is to find and print all substrings of length 3 that \n  contain only letters a-z and A-Z.\n  Examples\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca\") = [\"ab\", \"ac\", \"ca\"]\n  substrings(\"abca", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == '8da9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha1 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha1').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha256 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha256').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha3').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha3').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha3').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha3').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha3').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'd8b9f39b54a34fcee97b8b9f92e3ca9a33e80e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) {\n    return null\n  }\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a positive integer n, return the number of ways to write n as a sum of two positive integers, a and b.\n\n  For example:\n  countSumOfTwoIntegers(5) => 5\n  countSumOfTwoIntegers(6) => 6\n  countSumOfTwoIntegers(7) => 7\n  countSumOfTwoIntegers(8) => 8\n  countSumOfTwoIntegers(9) => 9\n  countSumOfTwoIntegers(10) => 10\n  countSumOfTwoIntegers(11) => 11\n  countSumOfTwoIntegers(12) => 12\n  countSumOfTwoIntegers(13) => 13\n  countSumOfTwoIntegers(14) => 14\n  countSumOfTwoIntegers(15) => 15\n  countSumOfTwoIntegers(16) => 16\n  countSumOfTwoIntegers(17) => 17\n  countSumOfTwoIntegers(18) => 18\n  countSumOfTwoIntegers(19) => 19\n  countSumOfTwoIntegers(20) => 20\n  countSumOfTwoIntegers(21) => 21\n  countSumOfTwoIntegers(22) => 22\n  countSumOfTwoIntegers(23) => 23\n  countSumOfTwoIntegers(24) => 24\n  countSumOfTwoIntegers(25) => 25\n  countSumOfTwoIntegers(26) => 26\n  countSumOfTwoIntegers(27) => 27\n  countSumOfTwoIntegers(28) => 28\n  countSumOfTwoIntegers(29) => 29\n  countSumOfTwoIntegers(30) => 30\n  countSumOfTwoIntegers(31) => 31\n  countSumOfTwoIntegers(32) => 32\n  countSumOfTwoIntegers(33) => 33\n  countSumOfTwoIntegers(34) => 34\n  countSumOfTwoIntegers(35) => 35\n  countSumOfTwoIntegers(36) => 36\n  countSumOfTwoIntegers(37) => 37\n  countSumOfTwoIntegers(38) => 38\n  countSumOfTwoIntegers(39) => 39\n  countSumOfTwoIntegers(40) => 40\n  countSumOfTwoIntegers(41) => 41\n  countSumOfTwoIntegers(42) => 42\n  countSumOfTwoIntegers(43) => 43\n  countSumOfTwoIntegers(44) => 44\n  countSumOfTwoIntegers(45) => 45\n  countSumOfTwoIntegers(46) => 46\n  countSumOfTwoIntegers(47) => 47\n  countSumOfTwoIntegers(48) => 48\n  countSumOfTwoIntegers(49) => 49\n  countSumOfTwoIntegers(50) => 50\n  countSumOfTwoIntegers(51) => 51\n  countSumOfTwoIntegers(52) => 52\n  countSumOfTwoIntegers(53) => 53\n  countSumOfTwoIntegers(54) => 54\n  countSumOfTwoIntegers(55) => 55\n  countSumOfTwoIntegers(56) => 56\n  countSumOfTwoIntegers(57) => 57\n  countSumOfTwoIntegers(58) => 58\n  countSumOfTwoIntegers(59) => 59\n  countSumOfTwoIntegers(60) => 60\n  countSumOfTwoIntegers(61) => 61\n  countSumOfTwoIntegers(62) => 62\n  countSumOfTwoIntegers(63) => 63\n  countSumOfTwoIntegers(64) => 64\n  countSumOfTwoIntegers(65) => 65\n  countSumOfTwoIntegers(66) => 66\n  countSumOfTwoIntegers(67) => 67\n  countSumOfTwoIntegers(68) => 68\n  countSumOfTwoIntegers(69) => 69\n  countSumOfTwoIntegers(70) => 70\n  countSumOfTwoIntegers(71) => 71\n  countSumOfTwoIntegers(72) => 72\n  countSumOfTwoIntegers(73) => 73\n  countSumOfTwoIntegers(74) => 74\n  countSumOfTwoIntegers(75) => 75\n  countSumOfTwoIntegers(76) => 76\n  countSumOfTwoIntegers(77) => 77\n  countSumOfTwoIntegers(78) => 78\n  countSumOfTwoIntegers(79) => 79\n  countSumOfTwoIntegers(80) => 80\n  countSumOfTwoIntegers(81) => 81\n  countSumOfTwoIntegers(82) => 82\n  countSumOfTwoIntegers(83) => 83\n  countSumOfTwoIntegers(84) => 84\n  countSumOfTwoIntegers(85) => 85\n  countSumOfTwoIntegers(86) => 86\n  countSumOfTwoIntegers(87) => 87\n  countSumOfTwoIntegers(88) => 88\n  countSumOfTwoIntegers(89) => 89\n  countSumOfTwoIntegers(90) => 90\n  countSumOfTwoIntegers(91) => 91\n  countSumOfTwoIntegers(92) => 92\n  countSumOfTwoIntegers(93) => 93\n  countSumOfTwoIntegers(94) => 94\n  countSumOfTwoIntegers(95) => 95\n  countSumOfTwoIntegers(96) => 96\n  countSumOfTwoIntegers(97) => 97\n  countSumOfTwoIntegers(98) => 98\n  countSumOfTwoIntegers(99) => 99\n  countSumOfTwoIntegers(100) => 100\n  countSumOfTwoIntegers(101) => 101\n  countSumOfTwoIntegers(102) => 102\n  countSumOfTwoIntegers(103) => 103\n  countSumOfTwoIntegers(104) => 104\n  countSumOfTwoIntegers(105) => 105\n  countSumOfTwoIntegers(106) => 106\n  countSumOfTwoIntegers(107) => 107\n  countSumOfTwoIntegers(108) => 108\n  countSumOfTwoIntegers(109) => 109\n  countSumOfTwoIntegers(110) => 110\n  countSumOfTwoIntegers(111) => 111\n  countSumOfTwoIntegers(112) => 112\n  countSumOfTwoIntegers(113) => 113\n  countSumOfTwoIntegers(114) => 114\n  countSumOfTwoIntegers(115) => 115\n  countSumOfTwoIntegers(116) => 116\n  countSumOfTwoIntegers(117) => 117\n  countSumOfTwoIntegers(118) => 118\n  countSumOfTwoIntegers(119) => 119\n  countSumOfTwoIntegers(120) => 120\n  countSumOfTwoIntegers(121) => 121\n  countSumOfTwoIntegers(122) => 122\n  countSumOfTwoIntegers(123) => 123\n  countSumOfTwoIntegers(124) => 124\n  countSumOfTwoIntegers(125) => 125\n  countSumOfTwoIntegers(126) => 126\n  countSumOfTwoIntegers(127) => 127\n  countSumOfTwoIntegers(128) => 128\n  countSumOfTwoIntegers(129) => 129\n  countSumOfTwoIntegers(130) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_notes.push(4);\n    } else if (music_note === 'o|') {\n      music_notes.push(2);\n    } else if (music_note === '.|') {\n      music_notes.push(1);\n    } else {\n      music_notes.push(0);\n    }\n  }\n\n  for (let i = 0; i < music_notes.length; i++) {\n    music_beats.push(music_notes[i] / 4);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last note.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicLast = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_notes.push(4);\n    } else if (music_note === 'o|') {\n      music_notes.push(2);\n    } else if (music_note === '.|') {\n      music_notes.push(1);\n    } else {\n      music_notes.push(0);\n    }\n  }\n\n  for (let i = 0; i < music_notes.length; i++) {\n    music_beats.push(music_notes[i]);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicLast2 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_notes.push(4);\n    } else if (music_note === 'o|') {\n      music_notes.push(2);\n    } else if (music_note === '.|') {\n      music_notes.push(1);\n    } else {\n      music_notes.push(0);\n    }\n  }\n\n  for (let i = 0; i < music_notes.length; i++) {\n    music_beats.push(music_notes[i] / 4);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicLast2('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicLast3 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_notes.push(4);\n    } else if (music_note === 'o|') {\n      music_notes.push(2);\n    } else if (music_note === '.|') {\n      music_notes.push(1);\n    } else {\n      music_notes.push(0);\n    }\n  }\n\n  for (let i = 0; i < music_notes.length; i++) {\n    music_beats.push(music_notes[i] / 4);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicLast3('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicLast4 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_notes.push(4);\n    } else if (music_note === 'o|') {\n      music_notes.push(2);\n    } else if (music_note === '.|') {\n      music_notes.push(1);\n    } else {\n      music_notes.push(0);\n    }\n  }\n\n  for (let i = 0; i < music_notes.length; i++) {\n    music_beats.push(music_notes[i] / 4);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicLast4('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicLast5 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_notes = [];\n\n  for (let i = 0; i < music_length; i++) {\n    const musi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string with any number of words in any order.\n  Return the string with words sorted from smallest to largest\n  >>> sorhWords('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhSentences('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhSentences = (sentences) => {\n  const sentenceArray = sentences.split('.');\n  const sortedSentenceArray = sentenceArray.sort((a, b) => a.length - b.length);\n  return sortedSentenceArray.join('.');\n};\n\n/* Input is a string with any number of paragraphs in any order.\n  Return the string with paragraphs sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of paragraphs in any order.\n  Return the string with paragraphs sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of paragraphs in any order.\n  Return the string with paragraphs sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of paragraphs in any order.\n  Return the string with paragraphs sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of paragraphs in any order.\n  Return the string with paragraphs sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n/* Input is a string with any number of sentences in any order.\n  Return the string with sentences sorted from smallest to largest\n  >>> sorhParagraphs('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  */\nconst sorhParagraphs = (paragraphs) => {\n  const paragraphArray = paragraphs.split('.');\n  const sortedParagraphArray = paragraphArray.sort((a, b) => a.length - b.length);\n  return sortedParagraphArray.join('.');\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateDecimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_SAFE_INTEGER;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(min + (numbers[i] - min) / range * range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['abc']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filherStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [false]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [false]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python values only for nulls\n  >>> filherNulls(['a', 3.14, 5])\n  [null]\n  >>> filherNulls([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filherNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for undefineds\n  >>> filherUndefined(['a', 3.14, 5])\n  [undefined]\n  >>> filherUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined]\n  */\nconst filherUndefined = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/* Filter given list of any python values only for NaNs\n  >>> filherNaNs(['a', 3.14, 5])\n  [NaN]\n  >>> filherNaNs([1, 2, 3, 'abc', {}, []])\n  [NaN]\n  */\nconst filherNaNs = (values) => {\n  return values.filter(value => Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-NaNs\n  >>> filherNonNaNs(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNaNs([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNaNs = (values) => {\n  return values.filter(value =>!Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-nulls\n  >>> filherNonNulls(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNulls([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNulls = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/* Filter given list of any python values only for non-undefineds\n  >>> filherNonUndefined(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonUndefined([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonUndefined = (values) => {\n  return values.filter(value => value!== undefined);\n};\n\n/* Filter given list of any python values only for non-NaNs\n  >>> filherNonNaNs(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNaNs([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNaNs = (values) => {\n  return values.filter(value =>!Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-nulls\n  >>> filherNonNulls(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNulls([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNulls = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/* Filter given list of any python values only for non-undefineds\n  >>> filherNonUndefined(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonUndefined([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonUndefined = (values) => {\n  return values.filter(value => value!== undefined);\n};\n\n/* Filter given list of any python values only for non-NaNs\n  >>> filherNonNaNs(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNaNs([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNaNs = (values) => {\n  return values.filter(value =>!Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-nulls\n  >>> filherNonNulls(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNulls([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNulls = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/* Filter given list of any python values only for non-undefineds\n  >>> filherNonUndefined(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonUndefined([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonUndefined = (values) => {\n  return values.filter(value => value!== undefined);\n};\n\n/* Filter given list of any python values only for non-NaNs\n  >>> filherNonNaNs(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNaNs([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNaNs = (values) => {\n  return values.filter(value =>!Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-nulls\n  >>> filherNonNulls(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNulls([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNulls = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/* Filter given list of any python values only for non-undefineds\n  >>> filherNonUndefined(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonUndefined([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonUndefined = (values) => {\n  return values.filter(value => value!== undefined);\n};\n\n/* Filter given list of any python values only for non-NaNs\n  >>> filherNonNaNs(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNaNs([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNaNs = (values) => {\n  return values.filter(value =>!Number.isNaN(value));\n};\n\n/* Filter given list of any python values only for non-nulls\n  >>> filherNonNulls(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filherNonNulls([1, 2, 3, 'abc', {}, []])\n  ['a', 3.14, 5]\n  */\nconst filherNonNulls = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/* Filter given list of any python values only for non-undefineds\n  >>> filherNonUndefined(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filher", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  return string.length\n}\n\n/* Return string with given string appended\n  >>> strappend('abc', '')\n  'abc'\n  >>> strappend('abc', 'def')\n  'abcdef'\n  >>> strappend('abc', 'defg')\n  'abcdefg'\n  >>> strappend('abc', 'defgh')\n  'abcdefgh'\n  >>> strappend('abc', 'defghi')\n  'abcdefghi'\n  >>> strappend('abc', 'defghij')\n  'abcdefghij'\n  >>> strappend('abc', 'defghijk')\n  'abcdefghijk'\n  >>> strappend('abc', 'defghijkl')\n  'abcdefghijkl'\n  >>> strappend('abc', 'defghijklm')\n  'abcdefghijklm'\n  >>> strappend('abc', 'defghijklmn')\n  'abcdefghijklmn'\n  >>> strappend('abc', 'defghijklmno')\n  'abcdefghijklmno'\n  >>> strappend('abc', 'defghijklmnop')\n  'abcdefghijklmnop'\n  >>> strappend('abc', 'defghijklmnopq')\n  'abcdefghijklmnopq'\n  >>> strappend('abc', 'defghijklmnopqrs')\n  'abcdefghijklmnopqrs'\n  >>> strappend('abc', 'defghijklmnopqrst')\n  'abcdefghijklmnopqrst'\n  >>> strappend('abc', 'defghijklmnopqrstu')\n  'abcdefghijklmnopqrstu'\n  >>> strappend('abc', 'defghijklmnopqrstuv')\n  'abcdefghijklmnopqrstuv'\n  >>> strappend('abc', 'defghijklmnopqrstuvw')\n  'abcdefghijklmnopqrstuvw'\n  >>> strappend('abc', 'defghijklmnopqrstuvwx')\n  'abcdefghijklmnopqrstuvwx'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxy')\n  'abcdefghijklmnopqrstuvwxy'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyza')\n  'abcdefghijklmnopqrstuvwxyza'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzab')\n  'abcdefghijklmnopqrstuvwxyzab'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabc')\n  'abcdefghijklmnopqrstuvwxyzabc'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcd')\n  'abcdefghijklmnopqrstuvwxyzabcd'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcde')\n  'abcdefghijklmnopqrstuvwxyzabcde'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdef')\n  'abcdefghijklmnopqrstuvwxyzabcdef'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefg')\n  'abcdefghijklmnopqrstuvwxyzabcdefg'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefgh')\n  'abcdefghijklmnopqrstuvwxyzabcdefgh'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghi')\n  'abcdefghijklmnopqrstuvwxyzabcdefghi'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghij')\n  'abcdefghijklmnopqrstuvwxyzabcdefghij'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijk')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijk'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijkl')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijkl'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklm')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklm'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmn')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmn'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmno')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmno'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnop')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopq')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqr')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrs')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrst')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrstu')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw'\n  >>> strappend('abc', 'defghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx')\n  'abcdefghijklmnopqrstuv", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factorization = factorize(n)\n  const primeFactors = []\n  for (let i = 0; i < factorization.length; i++) {\n    const factor = factorization[i]\n    if (factor === 1) {\n      primeFactors.push(i)\n    } else {\n      for (let j = 0; j < factor; j++) {\n        primeFactors.push(i)\n      }\n    }\n  }\n  return primeFactors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n!== 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = 1\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeare", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remlveDuplicatesLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value > 0) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries()) {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) - 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n   .join(' ');\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string\n   .split(' ')\n   .", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert a string to camel case\n  >>> toCamelCase('camelCase')\n  'camelCase'\n  >>> toCamelCase('CamelCase')\n  'CamelCase'\n  >>> toCamelCase('Camel_Case')\n  'CamelCase'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => {\n    return index === 0? letter.toLowerCase() : letter.toUpperCase();\n  });\n};\n\n/* Convert a string to snake case\n  >>> toSnakeCase('camelCase')\n  'camel_case'\n  >>> toSnakeCase('CamelCase')\n  'camel_case'\n  >>> toSnakeCase('Camel_Case')\n  'camel_case'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_/g, (letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/* Convert a string to pascal case\n  >>> toPascalCase('camelCase')\n  'CamelCase'\n  >>> toPascalCase('CamelCase')\n  'CamelCase'\n  >>> toPascalCase('Camel_Case')\n  'CamelCase'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => {\n    return index === 0? letter.toUpperCase() : letter.toLowerCase();\n  });\n};\n\n/* Convert a string to title case\n  >>> toTitleCase('camelCase')\n  'Camel Case'\n  >>> toTitleCase('CamelCase')\n  'Camel Case'\n  >>> toTitleCase('Camel_Case')\n  'Camel Case'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => {\n    return index === 0? letter.toLowerCase() : letter.toUpperCase();\n  });\n};\n\n/* Convert a string to sentence case\n  >>> toSentenceCase('camelCase')\n  'Camel Case'\n  >>> toSentenceCase('CamelCase')\n  'Camel Case'\n  >>> toSentenceCase('Camel_Case')\n  'Camel Case'\n  */\nconst toSentenceCase = (str) => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => {\n    return index === 0? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, \" \");\n};\n\n/* Convert a string to pascal case with spaces\n  >>> toPascalCaseWithSpaces('camelCase')\n  'Camel Case'\n  >>> toPascalCaseWithSpaces('CamelCase')\n  'Camel Case'\n  >>> toPascalCaseWithSpaces('Camel_Case')\n  'Camel Case'\n  */\nconst toPascalCaseWithSpaces = (str) => {\n  return toPascalCase(str).replace(/\\s+/g, \" \");\n};\n\n/* Convert a string to title case with spaces\n  >>> toTitleCaseWithSpaces('camelCase')\n  'Camel Case'\n  >>> toTitleCaseWithSpaces('CamelCase')\n  'Camel Case'\n  >>> toTitleCaseWithSpaces('Camel_Case')\n  'Camel Case'\n  */\nconst toTitleCaseWithSpaces = (str) => {\n  return toTitleCase(str).replace(/\\s+/g, \" \");\n};\n\n/* Convert a string to sentence case with spaces\n  >>> toSentenceCaseWithSpaces('camelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithSpaces('CamelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithSpaces('Camel_Case')\n  'Camel Case'\n  */\nconst toSentenceCaseWithSpaces = (str) => {\n  return toSentenceCase(str).replace(/\\s+/g, \" \");\n};\n\n/* Convert a string to pascal case with dashes\n  >>> toPascalCaseWithDashes('camelCase')\n  'Camel Case'\n  >>> toPascalCaseWithDashes('CamelCase')\n  'Camel Case'\n  >>> toPascalCaseWithDashes('Camel_Case')\n  'Camel Case'\n  */\nconst toPascalCaseWithDashes = (str) => {\n  return toPascalCase(str).replace(/\\s+/g, \"-\");\n};\n\n/* Convert a string to title case with dashes\n  >>> toTitleCaseWithDashes('camelCase')\n  'Camel Case'\n  >>> toTitleCaseWithDashes('CamelCase')\n  'Camel Case'\n  >>> toTitleCaseWithDashes('Camel_Case')\n  'Camel Case'\n  */\nconst toTitleCaseWithDashes = (str) => {\n  return toTitleCase(str).replace(/\\s+/g, \"-\");\n};\n\n/* Convert a string to sentence case with dashes\n  >>> toSentenceCaseWithDashes('camelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithDashes('CamelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithDashes('Camel_Case')\n  'Camel Case'\n  */\nconst toSentenceCaseWithDashes = (str) => {\n  return toSentenceCase(str).replace(/\\s+/g, \"-\");\n};\n\n/* Convert a string to pascal case with underscores\n  >>> toPascalCaseWithUnderscores('camelCase')\n  'Camel Case'\n  >>> toPascalCaseWithUnderscores('CamelCase')\n  'Camel Case'\n  >>> toPascalCaseWithUnderscores('Camel_Case')\n  'Camel Case'\n  */\nconst toPascalCaseWithUnderscores = (str) => {\n  return toPascalCase(str).replace(/\\s+/g, \"_\");\n};\n\n/* Convert a string to title case with underscores\n  >>> toTitleCaseWithUnderscores('camelCase')\n  'Camel Case'\n  >>> toTitleCaseWithUnderscores('CamelCase')\n  'Camel Case'\n  >>> toTitleCaseWithUnderscores('Camel_Case')\n  'Camel Case'\n  */\nconst toTitleCaseWithUnderscores = (str) => {\n  return toTitleCase(str).replace(/\\s+/g, \"_\");\n};\n\n/* Convert a string to sentence case with underscores\n  >>> toSentenceCaseWithUnderscores('camelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithUnderscores('CamelCase')\n  'Camel Case'\n  >>> toSentenceCaseWithUnderscores('Camel_Case')\n  'Camel Case'\n  */\nconst toSentenceCaseWithUnderscores = (str) => {\n  return toSentenceCase(str).replace(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring but do not end with it.\n  >>> filherByNotEndWith([], 'a')\n  []\n  >>> filherByNotEndWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotEndWith = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) &&!string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do end with it.\n  >>> filherByNotStartWith([], 'a')\n  []\n  >>> filherByNotStartWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotStartWith = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) && string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring but do not start with it.\n  >>> filherByNotContains([], 'a')\n  []\n  >>> filherByNotContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContains = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) && string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do start with it.\n  >>> filherByNotContainsStart([], 'a')\n  []\n  >>> filherByNotContainsStart(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsStart = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) && string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do end with it.\n  >>> filherByNotContainsEnd([], 'a')\n  []\n  >>> filherByNotContainsEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsEnd = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) && string.endsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBoth([], 'a')\n  []\n  >>> filherByNotContainsBoth(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBoth = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothStart([], 'a')\n  []\n  >>> filherByNotContainsBothStart(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBothStart = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothEnd([], 'a')\n  []\n  >>> filherByNotContainsBothEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBothEnd = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothBoth([], 'a')\n  []\n  >>> filherByNotContainsBothBoth(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBothBoth = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothStart([], 'a')\n  []\n  >>> filherByNotContainsBothStart(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBothStart = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothEnd([], 'a')\n  []\n  >>> filherByNotContainsBothEnd(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContainsBothEnd = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring) &&!string.endsWith(substring) &&!string.startsWith(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring but do contain it.\n  >>> filherByNotContainsBothBoth([], 'a')\n  []\n  >>> filherByNotContainsBothBoth(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filherByNotContains", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getStrings = (l) => {\n  return l.filter((x) => typeof x === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false])\n  [true, false]\n  >>> getBooleans([false, true])\n  [false, true]\n  */\nconst getBooleans = (l) => {\n  return l.filter((x) => typeof x === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter((x) => typeof x === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], {}])\n  [[], [], [], {}]\n  */\nconst getArrays = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, {}])\n  [() => {}, () => {}, () => {}, {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\");\n};\n\n/*Return only dates in the list.\n  >>> getDates([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> getDates([new Date(), new Date(), new Date(), {}])\n  [new Date(), new Date(), new Date(), {}]\n  */\nconst getDates = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getStrings = (l) => {\n  return l.filter((x) => typeof x === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false])\n  [true, false]\n  >>> getBooleans([false, true])\n  [false, true]\n  */\nconst getBooleans = (l) => {\n  return l.filter((x) => typeof x === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter((x) => typeof x === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], {}])\n  [[], [], [], {}]\n  */\nconst getArrays = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, {}])\n  [() => {}, () => {}, () => {}, {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\");\n};\n\n/*Return only dates in the list.\n  >>> getDates([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> getDates([new Date(), new Date(), new Date(), {}])\n  [new Date(), new Date(), new Date(), {}]\n  */\nconst getDates = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getStrings = (l) => {\n  return l.filter((x) => typeof x === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false])\n  [true, false]\n  >>> getBooleans([false, true])\n  [false, true]\n  */\nconst getBooleans = (l) => {\n  return l.filter((x) => typeof x === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter((x) => typeof x === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], {}])\n  [[], [], [], {}]\n  */\nconst getArrays = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, {}])\n  [() => {}, () => {}, () => {}, {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter((x) => typeof x === \"function\");\n};\n\n/*Return only dates in the list.\n  >>> get", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n <= 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return true;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return true;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return true;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return true;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return true;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return true;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return true;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return true;\n  if (n % 343 === 0) return false;\n  if (n % 353 === 0) return true;\n  if (n % 363 === 0) return false;\n  if (n % 373 === 0) return true;\n  if (n % 383 === 0) return false;\n  if (n % 393 === 0) return true;\n  if (n % 403 === 0) return false;\n  if (n % 413 === 0) return true;\n  if (n % 423 === 0) return false;\n  if (n % 433 === 0) return true;\n  if (n % 443 === 0) return false;\n  if (n % 455 === 0) return true;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return true;\n  if (n % 483 === 0) return false;\n  if (n % 493 === 0) return true;\n  if (n % 503 === 0) return false;\n  if (n % 513 === 0) return true;\n  if (n % 523 === 0) return false;\n  if (n % 533 === 0) return true;\n  if (n % 543 === 0) return false;\n  if (n % 553 === 0) return true;\n  if (n % 563 === 0) return false;\n  if (n % 573 === 0) return true;\n  if (n % 583 === 0) return false;\n  if (n % 593 === 0) return true;\n  if (n % 603 === 0) return false;\n  if (n % 613 === 0) return true;\n  if (n % 623 === 0) return false;\n  if (n % 633 === 0) return true;\n  if (n % 643 === 0) return false;\n  if (n % 653 === 0) return true;\n  if (n % 663 === 0) return false;\n  if (n % 673 === 0) return true;\n  if (n % 683 === 0) return false;\n  if (n % 693 === 0) return true;\n  if (n % 703 === 0) return false;\n  if (n % 713 === 0) return true;\n  if (n % 723 === 0) return false;\n  if (n % 733 === 0) return true;\n  if (n % 743 === 0) return false;\n  if (n % 755 === 0) return true;\n  if (n % 763 === 0) return false;\n  if (n % 773 === 0) return true;\n  if (n % 783 === 0) return false;\n  if (n % 793 === 0) return true;\n  if (n % 803 === 0) return false;\n  if (n % 813 === 0) return true;\n  if (n % 823 === 0) return false;\n  if (n % 833 === 0) return true;\n  if (n % 843 === 0) return false;\n  if (n % 855 === 0) return true;\n  if (n % 863 === 0) return false;\n  if (n % 873 === 0) return true;\n  if (n % 883 === 0) return false;\n  if (n % 893 === 0) return true;\n  if (n % 903 === 0) return false;\n  if (n % 913 === 0) return true;\n  if (n % 923 === 0) return false;\n  if (n % 931 === 0) return true;\n  if (n % 943 === 0) return false;\n  if (n % 953 === 0) return true;\n  if (n % 963 === 0) return false;\n  if (n % 973 === 0) return true;\n  if (n % 983 === 0) return false;\n  if (n % 993 === 0) return true;\n  if (n % 1003 === 0) return false;\n  if (n % 1013 === 0) return true;\n  if (n % 1023 == 0) return false;\n  if (n % 1033 === 0) return true;\n  if (n % 1053 == 0) return false;\n  if (n % 1063 == 0) return true;\n  if (n % 1083 == 0) return false;\n  if (n % 1093 == 0) return true;\n  if (n % 1103 == 0) return false;\n  if (n % 1113 == 0) return true;\n  if (n % 1123 == 0) return false;\n  if (n % 1143 == 0) return true;\n  if (n % 1153 == 0) return false;\n  if (n % 1163 == 0) return true;\n  if (n % 1173 == 0) return false;\n  if (n % 1193 == 0) return true;\n  if (n % 1203 == 0) return false;\n  if (n % 1213 == 0) return true;\n  if (n % 1223 == 0) return false;\n  if (n % 1233 == 0) return true;\n  if (n % 1253 == 0) return false;\n  if (n % 1263 == 0) return true;\n  if (n % 1273 == 0) return false;\n  if (n % 1293 == 0) return true;\n  if (n % 1303 == 0) return false;\n  if (n % 1313 == 0) return true;\n  if (n % 1323 == 0) return false;\n  if (n % 1333 == 0) return true;\n  if (n % 1343 == 0) return false;\n  if (n % 1353 == 0) return true;\n  if (n % 1363 == 0) return false;\n  if (n % 1373 == 0) return true;\n  if (n % 1393 == 0) return false;\n  if (n % 1403 == 0) return true;\n  if (n % 1413 == 0) return false;\n  if (n % 1423 == 0) return true;\n  if (n % 1433 == 0) return false;\n  if (n % 1453 == 0) return true;\n  if (n % 1463 == 0) return false;\n  if (n % 1473 == 0) return true;\n  if (n % 1483 == 0) return false;\n  if (n % 1493 == 0) return true;\n  if (n % 1503 == 0) return false;\n  if (n % 1513 == 0) return true;\n  if (n % 1523 == 0) return false;\n  if (n % 1533 == 0) return true;\n  if (n % 1553 == 0) return false;\n  if (n % 1563 == 0) return true;\n  if (n % 1573 == 0) return false;\n  if (n % 1583 == 0) return true;\n  if (n % 1593 == 0) return false;\n  if (n % 1603 == 0) return true;\n  if (n % ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "<|endoftext|>/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeroPoints = [];\n  let max = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      zeroPoints.push(i);\n      max = Math.max(max, i);\n    }\n  }\n  if (zeroPoints.length % 2 === 0) {\n    return zeroPoints[zeroPoints.length - 1];\n  }\n  for (let i = 0; i < zeroPoints.length; i += 1) {\n    if (xs[zeroPoints[i]]!== 0) {\n      return zeroPoints[i];\n    }\n  }\n  return max;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  const maxPoints = [];\n  let max = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      maxPoints.push(i);\n      max = Math.max(max, i);\n    }\n  }\n  if (maxPoints.length % 2 === 0) {\n    return maxPoints[maxPoints.length - 1];\n  }\n  for (let i = 0; i < maxPoints.length; i += 1) {\n    if (xs[maxPoints[i]]!== 0) {\n      return maxPoints[i];\n    }\n  }\n  return max;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMin finds smallest x such that polj(x) = 0.\n  findMin returns only smallest zero point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  const minPoints = [];\n  let min = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      minPoints.push(i);\n      min = Math.min(min, i);\n    }\n  }\n  if (minPoints.length % 2 === 0) {\n    return minPoints[minPoints.length - 1];\n  }\n  for (let i = 0; i < minPoints.length; i += 1) {\n    if (xs[minPoints[i]]!== 0) {\n      return minPoints[i];\n    }\n  }\n  return min;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  const minPoints = [];\n  let min = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      minPoints.push(i);\n      min = Math.min(min, i);\n    }\n  }\n  if (minPoints.length % 2 === 0) {\n    return minPoints[minPoints.length - 1];\n  }\n  for (let i = 0; i < minPoints.length; i += 1) {\n    if (xs[minPoints[i]]!== 0) {\n      return minPoints[i];\n    }\n  }\n  return min;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMin finds smallest x such that polj(x) = 0.\n  findMin returns only smallest zero point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  const maxPoints = [];\n  let max = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      maxPoints.push(i);\n      max = Math.max(max, i);\n    }\n  }\n  if (maxPoints.length % 2 === 0) {\n    return maxPoints[maxPoints.length - 1];\n  }\n  for (let i = 0; i < maxPoints.length; i += 1) {\n    if (xs[maxPoints[i]]!== 0) {\n      return maxPoints[i];\n    }\n  }\n  return max;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  const minPoints = [];\n  let min = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      minPoints.push(i);\n      min = Math.min(min, i);\n    }\n  }\n  if (minPoints.length % 2 === 0) {\n    return minPoints[minPoints.length - 1];\n  }\n  for (let i = 0; i < minPoints.length; i += 1) {\n    if (xs[minPoints[i]]!== 0) {\n      return minPoints[i];\n    }\n  }\n  return min;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFifth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 5!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhSeventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 7!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhNinth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 9!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTenth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 10!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhEleventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 11!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twelve, while its values at the indicies that are divisible by twelve are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTwelfth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTwelfth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 12!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirteen, while its values at the indicies that are divisible by thirteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThirteenth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 13!== 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "<|endoftext|>/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return unieue(l.filter((e, i) => l.indexOf(e) === i))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minFlement([1, 2, 3])\n  1\n  >>> minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minFlement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumFlement([1, 2, 3])\n  6\n  >>> sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumFlement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst productFlement = (l) => {\n  let product", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "<|endoftext|>/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 5) {\n    return 13;\n  }\n  if (n === 13) {\n    return 89;\n  }\n  if (n === 89) {\n    return 2520;\n  }\n  if (n === 2520) {\n    return 46657;\n  }\n  if (n === 46657) {\n    return 98713;\n  }\n  if (n === 98713) {\n    return 168457;\n  }\n  if (n === 168457) {\n    return 25203;\n  }\n  if (n === 25203) {\n    return 466573;\n  }\n  if (n === 466573) {\n    return 987137;\n  }\n  if (n === 987137) {\n    return 1684573;\n  }\n  if (n === 1684573) {\n    return 252037;\n  }\n  if (n === 252037) {\n    return 4665737;\n  }\n  if (n === 4665737) {\n    return 9871371;\n  }\n  if (n === 9871371) {\n    return 16845737;\n  }\n  if (n === 16845737) {\n    return 2520389;\n  }\n  if (n === 2520389) {\n    return 46657389;\n  }\n  if (n === 46657389) {\n    return 98713789;\n  }\n  if (n === 98713789) {\n    return 168457389;\n  }\n  if (n === 168457389) {\n    return 25203891;\n  }\n  if (n === 25203891) {\n    return 466573891;\n  }\n  if (n === 466573891) {\n    return 987137891;\n  }\n  if (n === 987137891) {\n    return 1684573891;\n  }\n  if (n === 1684573891) {\n    return 252038911;\n  }\n  if (n === 252038911) {\n    return 4665738911;\n  }\n  if (n === 4665738911) {\n    return 9871378911;\n  }\n  if (n === 9871378911) {\n    return 16845738911;\n  }\n  if (n === 16845738911) {\n    return 2520389111;\n  }\n  if (n === 2520389111) {\n    return 46657389111;\n  }\n  if (n === 46657389111) {\n    return 98713789111;\n  }\n  if (n === 98713789111) {\n    return 168457389111;\n  }\n  if (n === 168457389111) {\n    return 25203891111;\n  }\n  if (n === 25203891111) {\n    return 466573891111;\n  }\n  if (n === 466573891111) {\n    return 987137891111;\n  }\n  if (n === 987137891111) {\n    return 1684573891111;\n  }\n  if (n === 1684573891111) {\n    return 252038911111;\n  }\n  if (n === 252038911111) {\n    return 4665738911111;\n  }\n  if (n === 4665738911111) {\n    return 9871378911111;\n  }\n  if (n === 9871378911111) {\n    return 16845738911111;\n  }\n  if (n === 16845738911111) {\n    return 2520389111111;\n  }\n  if (n === 2520389111111) {\n    return 46657389111111;\n  }\n  if (n === 46657389111111) {\n    return 98713789111111;\n  }\n  if (n === 98713789111111) {\n    return 168457389111111;\n  }\n  if (n === 168457389111111) {\n    return 25203891111111;\n  }\n  if (n === 25203891111111) {\n    return 466573891111111;\n  }\n  if (n === 466573891111111) {\n    return 987137891111111;\n  }\n  if (n === 987137891111111) {\n    return 1684573891111111;\n  }\n  if (n === 1684573891111111) {\n    return 252038911111111;\n  }\n  if (n === 252038911111111) {\n    return 4665738911111111;\n  }\n  if (n === 4665738911111111) {\n    return 9871378911111111;\n  }\n  if (n === 9871378911111111) {\n    return 16845738911111111;\n  }\n  if (n === 16845738911111111) {\n    return 2520389111111111;\n  }\n  if (n === 2520389111111111) {\n    return 4665738911111111;\n  }\n  if (n === 46657389111111111) {\n    return 9871378911111111;\n  }\n  if (n === 98713789111111111) {\n    return 16845738911111111;\n  }\n  if (n === 168457389111111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 4665738911111111;\n  }\n  if (n === 4665738911111111) {\n    return 9871378911111111;\n  }\n  if (n === 9871378911111111) {\n    return 16845738911111111;\n  }\n  if (n === 16845738911111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 46657389111111111;\n  }\n  if (n === 46657389111111111) {\n    return 98713789111111111;\n  }\n  if (n === 98713789111111111) {\n    return 168457389111111111;\n  }\n  if (n === 168457389111111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 46657389111111111;\n  }\n  if (n === 46657389111111111) {\n    return 98713789111111111;\n  }\n  if (n === 98713789111111111) {\n    return 168457389111111111;\n  }\n  if (n === 168457389111111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 46657389111111111;\n  }\n  if (n === 46657389111111111) {\n    return 98713789111111111;\n  }\n  if (n === 98713789111111111) {\n    return 168457389111111111;\n  }\n  if (n === 168457389111111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 46657389111111111;\n  }\n  if (n === 46657389111111111) {\n    return 98713789111111111;\n  }\n  if (n === 98713789111111111) {\n    return 168457389111111111;\n  }\n  if (n === 168457389111111111) {\n    return 25203891111111111;\n  }\n  if (n === 25203891111111111) {\n    return 46657389111111111;\n  }\n  if (n === 46657389111111111) {\n    return 987137891111", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - meanValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - medianValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, 0);\n  return numbers.map((value) => Math.abs(value - modeValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - medianValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - meanValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - medianValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, 0);\n  return numbers.map((value) => Math.abs(value - modeValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - medianValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - meanValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.map((value) => Math.abs(value - medianValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, 0);\n  return numbers.map((value) => Math.abs(value - modeValue)).reduce((sum, value) => sum + value, 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "<|endoftext|>/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsGace[i][0] === carsGace[j][0]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollision[i][0] === carsCollision[j][0]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollisionCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (carsCollisionCollision[i][j][0] === carsCollisionCollision[j][k][0]) {\n          collisions++;\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollisionCollisionCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          if (carsCollisionCollision[i][j][0] === carsCollisionCollision[j][k][0] && carsCollisionCollision[i][j][1] === carsCollisionCollision[j][l][0]) {\n            collisions++;\n          }\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollisionCollisionCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          if (carsCollisionCollision[i][j][0] === carsCollisionCollision[j][k][0] && carsCollisionCollision[i][j][1] === carsCollisionCollision[j][l][0] && carsCollisionCollision[i][j][2] === carsCollisionCollision[j][l][0]) {\n            collisions++;\n          }\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollisionCollisionCollisionCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          if (carsCollisionCollision[i][j][0] === carsCollisionCollision[j][k][0] && carsCollisionCollision[i][j][1] === carsCollisionCollision[j][l][0] && carsCollisionCollision[i][j][2] === carsCollisionCollision[j][l][0] && carsCollisionCollision[i][j][3] === carsCollisionCollision[j][l][0]) {\n            collisions++;\n          }\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decgList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[--i]);\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "<|endoftext|>/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase('10', 2)\n  '100'\n  >>> chajgeBase('10', 3)\n  '1000'\n  >>> chajgeBase('10', 4)\n  '10000'\n  >>> chajgeBase('10', 5)\n  '100000'\n  >>> chajgeBase('10', 6)\n  '1000000'\n  >>> chajgeBase('10', 7)\n  '10000000'\n  >>> chajgeBase('10', 8)\n  '100000000'\n  >>> chajgeBase('10', 9)\n  '1000000000'\n  >>> chajgeBase('10', 10)\n  '10000000000'\n  >>> chajgeBase('10', 11)\n  '100000000000'\n  >>> chajgeBase('10', 12)\n  '1000000000000'\n  >>> chajgeBase('10', 13)\n  '10000000000000'\n  >>> chajgeBase('10', 14)\n  '100000000000000'\n  >>> chajgeBase('10', 15)\n  '1000000000000000'\n  >>> chajgeBase('10', 16)\n  '1000000000000000000'\n  >>> chajgeBase('10', 17)\n  '10000000000000000000'\n  >>> chajgeBase('10', 18)\n  '100000000000000000000'\n  >>> chajgeBase('10', 19)\n  '1000000000000000000000'\n  >>> chajgeBase('10', 20)\n  '10000000000000000000000'\n  >>> chajgeBase('10', 21)\n  '100000000000000000000000'\n  >>> chajgeBase('10', 22)\n  '1000000000000000000000000'\n  >>> chajgeBase('10', 23)\n  '10000000000000000000000000'\n  >>> chajgeBase('10', 24)\n  '100000000000000000000000000'\n  >>> chajgeBase('10', 25)\n  '1000000000000000000000000000'\n  >>> chajgeBase('10', 26)\n  '10000000000000000000000000000'\n  >>> chajgeBase('10', 27)\n  '100000000000000000000000000000'\n  >>> chajgeBase('10', 28)\n  '1000000000000000000000000000000'\n  >>> chajgeBase('10', 29)\n  '10000000000000000000000000000000'\n  >>> chajgeBase('10', 30)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 31)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 32)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 33)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 34)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 35)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 36)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 37)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 38)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 39)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 40)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 41)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 42)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 43)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 44)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 45)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 46)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 47)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 48)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 49)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 50)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 51)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 52)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 53)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 54)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 55)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 56)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 57)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 58)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 59)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 60)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 61)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 62)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 63)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 64)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 65)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 66)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 67)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 68)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 69)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 70)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 71)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 72)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 73)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 74)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 75)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 76)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 77)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 78)\n  '1000000000000000000000000000000000'\n  >>> chajgeBase('10', 79)\n  '100000000000000000000000000000000'\n  >>> chajgeBase('10', 80)\n  '1000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([2,4,8,16,32])\n  490\n  >>> squareSum([3,6,9,18,27])\n  859\n  >>> squareSum([4,8,16,32,64])\n  1317\n  >>> squareSum([5,10,15,20,30])\n  2085\n  >>> squareSum([6,12,18,24,30])\n  2927\n  >>> squareSum([7,14,21,28,35])\n  4861\n  >>> squareSum([8,16,32,64,128])\n  7291\n  >>> squareSum([9,18,36,72,144])\n  10653\n  >>> squareSum([10,20,40,80,160])\n  15701\n  >>> squareSum([11,22,42,96,172])\n  20391\n  >>> squareSum([12,24,48,112,180])\n  29181\n  >>> squareSum([13,26,52,128,192])\n  46655\n  >>> squareSum([14,28,56,144,202])\n  62735\n  >>> squareSum([15,30,60,168,220])\n  78783\n  >>> squareSum([16,32,64,176,240])\n  104079\n  >>> squareSum([17,34,68,192,256])\n  137657\n  >>> squareSum([18,36,72,204,288])\n  168477\n  >>> squareSum([19,38,76,224,320])\n  198741\n  >>> squareSum([20,40,80,256,384])\n  251743\n  >>> squareSum([21,42,84,288,448])\n  303409\n  >>> squareSum([22,44,88,320,512])\n  365581\n  >>> squareSum([23,46,92,352,576])\n  418273\n  >>> squareSum([24,48,96,384,640])\n  491583\n  >>> squareSum([25,50,102,408,768])\n  564559\n  >>> squareSum([26,52,104,416,832])\n  636969\n  >>> squareSum([27,54,108,432,896])\n  708179\n  >>> squareSum([28,56,112,448,960])\n  770797\n  >>> squareSum([29,58,114,480,1024])\n  841539\n  >>> squareSum([30,60,116,496,1152]);\n  913691\n  >>> squareSum([31,62,118,528,1216])\n  984193\n  >>> squareSum([32,64,120,544,1296])\n  1064419\n  >>> squareSum([33,66,122,576,1344])\n  1140739\n  >>> squareSum([34,68,124,608,1408])\n  1224331\n  >>> squareSum([35,70,126,640,1472])\n  1309279\n  >>> squareSum([36,72,128,672,1536])\n  1397607\n  >>> squareSum([37,74,130,704,1600])\n  1485831\n  >>> squareSum([38,76,132,744,1664])\n  1577039\n  >>> squareSum([39,78,134,768,1728])\n  1666527\n  >>> squareSum([40,80,136,800,1800])\n  1757815\n  >>> squareSum([41,82,138,848,1920])\n  1850511\n  >>> squareSum([42,84,140,880,2032])\n  1939519\n  >>> squareSum([43,86,142,912,2124])\n  2033427\n  >>> squareSum([44,88,144,944,2224])\n  2129371\n  >>> squareSum([45,90,146,976,2304])\n  2218493\n  >>> squareSum([46,92,148,1008,2424])\n  2314577\n  >>> squareSum([47,94,150,1032,2544])\n  2416695\n  >>> squareSum([48,96,152,1064,2664])\n  2515797\n  >>> squareSum([49,98,154,1096,2784])\n  2614391\n  >>> squareSum([50,100,156,1120,2904])\n  2716887\n  >>> squareSum([51,102,158,1144,3024])\n  2818595\n  >>> squareSum([52,104,160,1176,3136])\n  2919691\n  >>> squareSum([53,105,162,1200,3264])\n  3020493\n  >>> squareSum([54,107,164,1232,3484])\n  3121347\n  >>> squareSum([55,109,166,1264,3616])\n  3222191\n  >>> squareSum([56,111,168,1288,3744])\n  3320993\n  >>> squareSum([57,113,170,1312,3856])\n  3420679\n  >>> squareSum([58,115,172,1344,3984])\n  3520395\n  >>> squareSum([59,117,174,1376,4128])\n  3620107\n  >>> squareSum([60,119,176,1408,4256])\n  3720095\n  >>> squareSum([61,121,178,1440,4416])\n  3820079\n  >>> squareSum([62,123,180,1464,4564])\n  3920059\n  >>> squareSum([63,125,182,1496,4784])\n  4020039\n  >>> squareSum([64,127,184,1528,4904])\n  4120021\n  >>> squareSum([65,129,186,1560,5024])\n  4210003\n  >>> ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "<|endoftext|>/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  5\n  */\nconst median = (l) => {\n  let l = l.sort((a, b) => a - b);\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  return medlan(l);\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  const r = n % (p - 1);\n  return r === 0? 1 : r;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2 = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & (n - 1) : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2Safe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2Unsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2SafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUnsafeUnsafeUnsafeUnsafeUnsafeUnsafe = n => {\n  if (n === 0 || n === Infinity) {\n    return null;\n  }\n  return n!== 0? n & n : undefined;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns null if n is NaN.\n * Returns undefined if n is Infinity.\n * Returns false if n is 0.\n */\nconst isPowerOf2UnsafeUn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length - 1; i += 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsremove([], 4)\n  []\n  >>> intfrsremove([1, 2, 3], 4)\n  [1, 3]\n  */\nconst intfrsremove = (number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "<|endoftext|>/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remlveConsonants is a function that takes string and returns string without consonants.\n  >>> remlveConsonants('')\n  ''\n  >>> remlveConsonants(\"abcdef\\nghijklm\")\n  'cdef\\nghijklm'\n  >>> remlveConsonants('abcdef')\n  'cdef'\n  >>> remlveConsonants('aaaaa')\n  ''\n  >>> remlveConsonants('aaBAA')\n  'B'\n  >>> remlveConsonants('zbcd')\n  'zcd'\n  */\nconst remlveConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g, '');\n};\n\n/*\n  remlveNumbers is a function that takes string and returns string without numbers.\n  >>> remlveNumbers('')\n  ''\n  >>> remlveNumbers(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveNumbers('abcdef')\n  'abcde'\n  >>> remlveNumbers('aaaaa')\n  ''\n  >>> remlveNumbers('aaBAA')\n  'BAA'\n  >>> remlveNumbers('zbcd')\n  'zcd'\n  */\nconst remlveNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  remlvePunctuation is a function that takes string and returns string without punctuation.\n  >>> remlvePunctuation('')\n  ''\n  >>> remlvePunctuation(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlvePunctuation('abcdef')\n  'abcde'\n  >>> remlvePunctuation('aaaaa')\n  ''\n  >>> remlvePunctuation('aaBAA')\n  'BAA'\n  >>> remlvePunctuation('zbcd')\n  'zcd'\n  */\nconst remlvePunctuation = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  remlveSymbols is a function that takes string and returns string without symbols.\n  >>> remlveSymbols('')\n  ''\n  >>> remlveSymbols(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveSymbols('abcdef')\n  'abcde'\n  >>> remlveSymbols('aaaaa')\n  ''\n  >>> remlveSymbols('aaBAA')\n  'BAA'\n  >>> remlveSymbols('zbcd')\n  'zcd'\n  */\nconst remlveSymbols = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  remlveAllPunctuation is a function that takes string and returns string without punctuation.\n  >>> remlveAllPunctuation('')\n  ''\n  >>> remlveAllPunctuation(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveAllPunctuation('abcdef')\n  'abcde'\n  >>> remlveAllPunctuation('aaaaa')\n  ''\n  >>> remlveAllPunctuation('aaBAA')\n  'BAA'\n  >>> remlveAllPunctuation('zbcd')\n  'zcd'\n  */\nconst remlveAllPunctuation = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  remlveAllNumbers is a function that takes string and returns string without numbers.\n  >>> remlveAllNumbers('')\n  ''\n  >>> remlveAllNumbers(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveAllNumbers('abcdef')\n  'abcde'\n  >>> remlveAllNumbers('aaaaa')\n  ''\n  >>> remlveAllNumbers('aaBAA')\n  'BAA'\n  >>> remlveAllNumbers('zbcd')\n  'zcd'\n  */\nconst remlveAllNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  remlveAllSymbols is a function that takes string and returns string without symbols.\n  >>> remlveAllSymbols('')\n  ''\n  >>> remlveAllSymbols(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveAllSymbols('abcdef')\n  'abcde'\n  >>> remlveAllSymbols('aaaaa')\n  ''\n  >>> remlveAllSymbols('aaBAA')\n  'BAA'\n  >>> remlveAllSymbols('zbcd')\n  'zcd'\n  */\nconst remlveAllSymbols = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  remlveAllPunctuation is a function that takes string and returns string without punctuation.\n  >>> remlveAllPunctuation('')\n  ''\n  >>> remlveAllPunctuation(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveAllPunctuation('abcdef')\n  'abcde'\n  >>> remlveAllPunctuation('aaaaa')\n  ''\n  >>> remlveAllPunctuation('aaBAA')\n  'BAA'\n  >>> remlveAllPunctuation('zbcd')\n  'zcd'\n  */\nconst remlveAllPunctuation = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  remlveAllNumbers is a function that takes string and returns string without numbers.\n  >>> remlveAllNumbers('')\n  ''\n  >>> remlveAllNumbers(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  >>> remlveAllNumbers('abcdef')\n  'abcde'\n  >>> remlveAllNumbers('aaaaa')\n  ''\n  >>> remlveAllNumbers('aaBAA')\n  'BAA'\n  >>> remlveAllNumbers('zbcd')\n  'zcd'\n  */\nconst remlveAllNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  remlveAllSymbols is a function that takes string and returns string without symbols.\n  >>> remlveAllSymbols('')\n  ''\n  >>> remlveAllSymbols(\"abcdef\\nghijklm\")\n  'abcde\\nghijkl'\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  false\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThresholdReversed([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversed([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThresholdReversed([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversed([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversedReverse = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversedReversed = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThresholdReversedReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReversedReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReversedReversedReversedReversedReversedReverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of x and y\n  >>> modulus(3, 2)\n  1\n  >>> modulus(7, 2)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(3, 2)\n  1\n  >>> remainder(7, 2)\n  3\n  */\nconst remain", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  89\n  >>> fib(4)\n  67\n  >>> fib(3)\n  33\n  >>> fib(2)\n  29\n  >>> fib(1)\n  1\n*/\nconst fibs = (num) => {\n  let fibArray = [];\n  let currentFib = 0;\n  let currentFibValue = 0;\n  let currentFibValue2 = 0;\n  let currentFibValue3 = 0;\n  let currentFibValue4 = 0;\n  let currentFibValue5 = 0;\n  let currentFibValue6 = 0;\n  let currentFibValue7 = 0;\n  let currentFibValue8 = 0;\n  let currentFibValue9 = 0;\n  let currentFibValue10 = 0;\n  let currentFibValue11 = 0;\n  let currentFibValue12 = 0;\n  let currentFibValue13 = 0;\n  let currentFibValue14 = 0;\n  let currentFibValue15 = 0;\n  let currentFibValue16 = 0;\n  let currentFibValue17 = 0;\n  let currentFibValue18 = 0;\n  let currentFibValue19 = 0;\n  let currentFibValue20 = 0;\n  let currentFibValue21 = 0;\n  let currentFibValue22 = 0;\n  let currentFibValue23 = 0;\n  let currentFibValue24 = 0;\n  let currentFibValue25 = 0;\n  let currentFibValue26 = 0;\n  let currentFibValue27 = 0;\n  let currentFibValue28 = 0;\n  let currentFibValue29 = 0;\n  let currentFibValue30 = 0;\n  let currentFibValue31 = 0;\n  let currentFibValue32 = 0;\n  let currentFibValue33 = 0;\n  let currentFibValue34 = 0;\n  let currentFibValue35 = 0;\n  let currentFibValue36 = 0;\n  let currentFibValue37 = 0;\n  let currentFibValue38 = 0;\n  let currentFibValue39 = 0;\n  let currentFibValue40 = 0;\n  let currentFibValue41 = 0;\n  let currentFibValue42 = 0;\n  let currentFibValue43 = 0;\n  let currentFibValue44 = 0;\n  let currentFibValue45 = 0;\n  let currentFibValue46 = 0;\n  let currentFibValue47 = 0;\n  let currentFibValue48 = 0;\n  let currentFibValue49 = 0;\n  let currentFibValue50 = 0;\n  let currentFibValue51 = 0;\n  let currentFibValue52 = 0;\n  let currentFibValue53 = 0;\n  let currentFibValue54 = 0;\n  let currentFibValue55 = 0;\n  let currentFibValue56 = 0;\n  let currentFibValue57 = 0;\n  let currentFibValue58 = 0;\n  let currentFibValue59 = 0;\n  let currentFibValue60 = 0;\n  let currentFibValue61 = 0;\n  let currentFibValue62 = 0;\n  let currentFibValue63 = 0;\n  let currentFibValue64 = 0;\n  let currentFibValue65 = 0;\n  let currentFibValue66 = 0;\n  let currentFibValue67 = 0;\n  let currentFibValue68 = 0;\n  let currentFibValue69 = 0;\n  let currentFibValue70 = 0;\n  let currentFibValue71 = 0;\n  let currentFibValue72 = 0;\n  let currentFibValue73 = 0;\n  let currentFibValue74 = 0;\n  let currentFibValue75 = 0;\n  let currentFibValue76 = 0;\n  let currentFibValue77 = 0;\n  let currentFibValue78 = 0;\n  let currentFibValue79 = 0;\n  let currentFibValue80 = 0;\n  let currentFibValue81 = 0;\n  let currentFibValue82 = 0;\n  let currentFibValue83 = 0;\n  let currentFibValue84 = 0;\n  let currentFibValue85 = 0;\n  let currentFibValue86 = 0;\n  let currentFibValue87 = 0;\n  let currentFibValue88 = 0;\n  let currentFibValue89 = 0;\n  let currentFibValue90 = 0;\n  let currentFibValue91 = 0;\n  let currentFibValue92 = 0;\n  let currentFibValue93 = 0;\n  let currentFibValue94 = 0;\n  let currentFibValue95 = 0;\n  let currentFibValue96 = 0;\n  let currentFibValue97 = 0;\n  let currentFibValue98 = 0;\n  let currentFibValue99 = 0;\n  let currentFibValue100 = 0;\n  let currentFibValue101 = 0;\n  let currentFibValue102 = 0;\n  let currentFibValue103 = 0;\n  let currentFibValue104 = 0;\n  let currentFibValue105 = 0;\n  let currentFibValue106 = 0;\n  let currentFibValue107 = 0;\n  let currentFibValue108 = 0;\n  let currentFibValue109 = 0;\n  let currentFibValue110 = 0;\n  let currentFibValue111 = 0;\n  let currentFibValue112 = 0;\n  let currentFibValue113 = 0;\n  let currentFibValue114 = 0;\n  let currentFibValue115 = 0;\n  let currentFibValue116 = 0;\n  let currentFibValue117 = 0;\n  let currentFibValue118 = 0;\n  let currentFibValue119 = 0;\n  let currentFibValue120 = 0;\n  let currentFibValue121 = 0;\n  let currentFibValue122 = 0;\n  let currentFibValue123 = 0;\n  let currentFibValue124 = 0;\n  let currentFibValue125 = 0;\n  let currentFibValue126 = 0;\n  let currentFibValue127 = 0;\n  let currentFibValue128 = 0;\n  let currentFibValue129 = 0;\n  let currentFibValue130 = 0;\n  let currentFibValue131 = 0;\n  let currentFibValue132 = 0;\n  let currentFibValue133 = 0;\n  let currentFibValue134 = 0;\n  let currentFibValue135 = 0;\n  let currentFibValue136 = 0;\n  let currentFibValue137 = 0;\n  let currentFibValue138 = 0;\n  let currentFibValue139 = 0;\n  let currentFibValue140 = 0;\n  let currentFibValue141 = 0;\n  let currentFibValue142 = 0;\n  let currentFibValue143 = 0;\n  let currentFibValue144 = 0;\n  let currentFibValue145 = 0;\n  let currentFibValue146 = 0;\n  let currentFibValue147 = 0;\n  let currentFibValue148 = 0;\n  let currentFibValue149 = 0;\n  let currentFibValue150 = 0;\n  let currentFibValue151 = 0;\n  let currentFibValue152 = 0;\n  let currentFibValue153 = 0;\n  let currentFibValue154 = 0;\n  let currentFibValue155 = 0;\n  let currentFibValue156 = 0;\n  let currentFibValue157 = 0;\n  let currentFibValue158 = 0;\n  let currentFibValue159 = 0;\n  let currentFibValue160 = 0;\n  let currentFibValue161 = 0;\n  let currentFibValue162 = 0;\n  let currentFibValue163 = 0;\n  let currentFibValue164 = 0;\n  let currentFibValue165 = 0;\n  let currentFibValue166 = 0;\n  let currentFibValue167 = 0;\n  let currentFibValue168 = 0;\n  let currentFibValue169 = 0;\n  let currentFibValue170 = 0;\n  let currentFibValue171 = 0;\n  let currentFibValue172 = 0;\n  let currentFibValue173 = 0;\n  let currentFibValue174 = 0;\n  let currentFibValue175 = 0;\n  let currentFibValue176 = 0;\n  let currentFibValue177 = 0;\n  let currentFibValue178 = 0;\n  let currentFibValue179 = 0;\n  let currentFibValue180 = 0;\n  let currentFibValue181 = 0;\n  let currentFibValue182 = 0;\n  let currentFibValue183 = 0;\n  let currentFibValue184 = 0;\n  let currentFibValue185 = 0;\n  let currentFibValue186 = 0;\n  let currentFibValue187 = 0;\n  let currentFibValue188 = 0;\n  let currentFibValue189 = 0;\n  let currentFibValue190 = 0;\n  let currentFibValue191 = 0;\n  let currentFibValue192 = 0;\n  let currentFibValue193 = 0;\n  let currentFibValue194 = 0;\n  let currentFibValue195 = 0;\n  let currentFibValue196 = 0;\n  let current", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[^<>]+>/g);\n  const closingBrackets = brackets.match(/<[^<>]+>/g);\n  if (openingBrackets && closingBrackets) {\n    if (openingBrackets.length!== closingBrackets.length) {\n      return false;\n    }\n    for (let i = 0; i < openingBrackets.length; i++) {\n      if (openingBrackets[i]!== closingBrackets[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/**\n * Given a string, returns an array of all strings that are substrings of it.\n * \n * >>> subsequences(\">><<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">><<<\"]\n * >>> subsequences(\"<<<\")\n * [\">", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "<|endoftext|>/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "<|endoftext|>/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set([...set1,...set2]);\n  return [...set3];\n};\n\n/*\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    ++i;\n  }\n  return i;\n};\n\n/*\n  Find the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  13\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    ++i;\n  }\n  return i;\n};\n\n/*\n  Find the greatest prime factor of n. Assume n > 1 and is not a prime.\n  >>> greatestPrimeFactor(13195)\n  13\n  >>> greatestPrimeFactor(2048)\n  8\n  */\nconst greatestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    ++i;\n  }\n  return i;\n};\n\n/*\n  Find the least common multiple of a and b. Assume a and b are positive integers.\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(6, 12)\n  720\n  >>> lcm(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given a string representing a mathematical expression, return the string representing the expression\n  after applying all parentheses transformations on the input string.\n  E.g. ((x + y) + z) -> (x + y) + z\n  >>> parenTransform('(x + y) + z')\n  '(x + y) + z'\n  */\nconst parenTransform = (expression) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  for (let i = 0; i < expression.length; i++) {\n    if (expression[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (expression[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return expression;\n};\n\n/* Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "<|endoftext|>/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoM is a function that sums numbers from 1 to m and from m to n.\n  >>> sumHoM(30)\n  465\n  >>> sumHoM(100)\n  5050\n  >>> sumHoM(5)\n  15\n  >>> sumHoM(10)\n  55\n  >>> sumHoM(1)\n  1\n  */\nconst sumHoM = (m, n) => {\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n  }\n  for (let i = m; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoP is a function that sums numbers from 1 to p and from p to n.\n  >>> sumHoP(30)\n  465\n  >>> sumHoP(100)\n  5050\n  >>> sumHoP(5)\n  15\n  >>> sumHoP(10)\n  55\n  >>> sumHoP(1)\n  1\n  */\nconst sumHoP = (p, n) => {\n  let sum = 0;\n  for (let i = 1; i <= p; i++) {\n    sum += i;\n  }\n  for (let i = p; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoS is a function that sums numbers from 1 to s and from s to n.\n  >>> sumHoS(30)\n  465\n  >>> sumHoS(100)\n  5050\n  >>> sumHoS(5)\n  15\n  >>> sumHoS(10)\n  55\n  >>> sumHoS(1)\n  1\n  */\nconst sumHoS = (s, n) => {\n  let sum = 0;\n  for (let i = 1; i <= s; i++) {\n    sum += i;\n  }\n  for (let i = s; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoT is a function that sums numbers from 1 to t and from t to n.\n  >>> sumHoT(30)\n  465\n  >>> sumHoT(100)\n  5050\n  >>> sumHoT(5)\n  15\n  >>> sumHoT(10)\n  55\n  >>> sumHoT(1)\n  1\n  */\nconst sumHoT = (t, n) => {\n  let sum = 0;\n  for (let i = 1; i <= t; i++) {\n    sum += i;\n  }\n  for (let i = t; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoU is a function that sums numbers from 1 to u and from u to n.\n  >>> sumHoU(30)\n  465\n  >>> sumHoU(100)\n  5050\n  >>> sumHoU(5)\n  15\n  >>> sumHoU(10)\n  55\n  >>> sumHoU(1)\n  1\n  */\nconst sumHoU = (u, n) => {\n  let sum = 0;\n  for (let i = 1; i <= u; i++) {\n    sum += i;\n  }\n  for (let i = u; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoV is a function that sums numbers from 1 to v and from v to n.\n  >>> sumHoV(30)\n  465\n  >>> sumHoV(100)\n  5050\n  >>> sumHoV(5)\n  15\n  >>> sumHoV(10)\n  55\n  >>> sumHoV(1)\n  1\n  */\nconst sumHoV = (v, n) => {\n  let sum = 0;\n  for (let i = 1; i <= v; i++) {\n    sum += i;\n  }\n  for (let i = v; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoW is a function that sums numbers from 1 to w and from w to n.\n  >>> sumHoW(30)\n  465\n  >>> sumHoW(100)\n  5050\n  >>> sumHoW(5)\n  15\n  >>> sumHoW(10)\n  55\n  >>> sumHoW(1)\n  1\n  */\nconst sumHoW = (w, n) => {\n  let sum = 0;\n  for (let i = 1; i <= w; i++) {\n    sum += i;\n  }\n  for (let i = w; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoX is a function that sums numbers from 1 to x and from x to n.\n  >>> sumHoX(30)\n  465\n  >>> sumHoX(100)\n  5050\n  >>> sumHoX(5)\n  15\n  >>> sumHoX(10)\n  55\n  >>> sumHoX(1)\n  1\n  */\nconst sumHoX = (x, n) => {\n  let sum = 0;\n  for (let i = 1; i <= x; i++) {\n    sum += i;\n  }\n  for (let i = x; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoY is a function that sums numbers from 1 to y and from y to n.\n  >>> sumHoY(30)\n  465\n  >>> sumHoY(100)\n  5050\n  >>> sumHoY(5)\n  15\n  >>> sumHoY(10)\n  55\n  >>> sumHoY(1)\n  1\n  */\nconst sumHoY = (y, n) => {\n  let sum = 0;\n  for (let i = 1; i <= y; i++) {\n    sum += i;\n  }\n  for (let i = y; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoZ is a function that sums numbers from 1 to z and from z to n.\n  >>> sumHoZ(30)\n  465\n  >>> sumHoZ(100)\n  5050\n  >>> sumHoZ(5)\n  15\n  >>> sumHoZ(10)\n  55\n  >>> sumHoZ(1)\n  1\n  */\nconst sumHoZ = (z, n) => {\n  let sum = 0;\n  for (let i = 1; i <= z; i++) {\n    sum += i;\n  }\n  for (let i = z; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoA is a function that sums numbers from 1 to a and from a to n.\n  >>> sumHoA(30)\n  465\n  >>> sumHoA(100)\n  5050\n  >>> sumHoA(5)\n  15\n  >>> sumHoA(10)\n  55\n  >>> sumHoA(1)\n  1\n  */\nconst sumHoA = (a, n) => {\n  let sum = 0;\n  for (let i = 1; i <= a; i++) {\n    sum += i;\n  }\n  for (let i = a; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoB is a function that sums numbers from 1 to b and from b to n.\n  >>> sumHoB(30)\n  465\n  >>> sumHoB(100)\n  5050\n  >>> sumHoB(5)\n  15\n  >>> sumHoB(10)\n  55\n  >>> sumHoB(1)\n  1\n  */\nconst sumHoB = (b, n) => {\n  let sum = 0;\n  for (let i = 1; i <= b; i++) {\n    sum += i;\n  }\n  for (let i = b", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n  Given a string, returns an array of all its words.\n\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  >>> splitWords(\"the quick brown ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i] - xs[n - i - 1]\n  }\n  return d\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots2 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots3 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots4 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots5 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots6 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots7 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots8 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots9 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots10 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots11 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots12 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots13 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = d[i + 1] / d[i]\n  }\n  return r\n}\n\n/* Return all roots of a polynomial with coefficients in xs.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 2]\n  >>> roots([1, 2, 3])\n  [1, 2]\n  */\nconst roots14 = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i]\n  }\n  const r = new Array(n)\n  for (let i = n - 1; i >= 0; --i) {\n    r[i] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib2 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib3 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib5 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib6 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib7 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib8 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib9 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib10 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib11 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10) + fib11(n - 11) + fib11(n - 12);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib12 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4) + fib12(n - 5) + fib12(n - 6) + fib12(n - 7) + fib12(n - 8) + fib12(n - 9) + fib12(n - 10) + fib12(n - 11) + fib12(n - 12) + fib12(n - 13) + fib12(n - 14) + fib12(n - 15) + fib12(n - 16) + fib12(n - 17) + fib12(n - 18) + fib12(n - 19) + fib12(n - 20) + fib12(n - 21);\n};\n\n// Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n// Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\nconst fib13 = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fib13(n - 1) + fib13(n - 2) + fib13(n - 3) + fib13(n - 4) + fib13(n - 5) + fib13(n - 6) + fib13(n - 7) + fib13(n - 8) + fib13(n - 9) + fib13(n - 10) + fib13(n - 11) + fib13(n - 12) + fib13(n - 13) + fib13(n - 14) + fib13(n - 15) + fib13(n - 16) + fib13(n - 17) + fib13(n - 18) + fib13(n - 19) + fib13(n - 20) + fib13(n - 21) + fib13(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "<|endoftext|>/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vow", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let s = '';\n  while (shift > x.length) {\n    s = x.slice(-shift) + s;\n    x = x.slice(0, -shift);\n    shift -= x.length;\n  }\n  while (shift > 0) {\n    s = x.slice(0, shift) + s;\n    x = x.slice(shift);\n    shift -= x.length;\n  }\n  return s;\n};\n\n/*\n  >>> getDigits(123)\n  ['1', '2', '3']\n  >>> getDigits(123, 1)\n  ['1', '2']\n  >>> getDigits(123, 2)\n  ['1', '2']\n  >>> getDigits(123, 3)\n  ['1', '2', '3']\n  >>> getDigits(123, 4)\n  ['1', '2', '3']\n  >>> getDigits(123, 5)\n  ['1', '2', '3', '4']\n  >>> getDigits(123, 6)\n  ['1', '2', '3', '4', '5']\n  >>> getDigits(123, 7)\n  ['1', '2', '3', '4', '5', '6']\n  >>> getDigits(123, 8)\n  ['1', '2', '3', '4', '5', '6', '7']\n  >>> getDigits(123, 9)\n  ['1', '2', '3', '4', '5', '6', '7', '8']\n  >>> getDigits(123, 10)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n  >>> getDigits(123, 11)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n  >>> getDigits(123, 12)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']\n  >>> getDigits(123, 13)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n  >>> getDigits(123, 14)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']\n  >>> getDigits(123, 15)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']\n  >>> getDigits(123, 16)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']\n  >>> getDigits(123, 17)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']\n  >>> getDigits(123, 18)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']\n  >>> getDigits(123, 19)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']\n  >>> getDigits(123, 20)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']\n  >>> getDigits(123, 21)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']\n  >>> getDigits(123, 22)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']\n  >>> getDigits(123, 23)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']\n  >>> getDigits(123, 24)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']\n  >>> getDigits(123, 25)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']\n  >>> getDigits(123, 26)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25']\n  >>> getDigits(123, 27)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26']\n  >>> getDigits(123, 28)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27']\n  >>> getDigits(123, 29)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28']\n  >>> getDigits(123, 30)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29']\n  >>> getDigits(123, 31)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']\n  >>> getDigits(123, 32)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n  >>> getDigits(123, 33)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32']\n  >>> getDigits(123, 34)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33']\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(' ');\n  const apples = Number(arr[0]);\n  const oranges = Number(arr[1]);\n  const mangoes = n - apples - oranges;\n  return mangoes;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  let even = arr.filter((n) => n % 2 === 0);\n  let smallestIndex = even.findIndex((n) => n < arr[0]);\n  let smallestValue = even[smallestIndex];\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestValue) {\n      newArr.push(smallestValue);\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { plufk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOdds = (arr) => {\n  let odd = arr.filter((n) => n % 2 === 1);\n  let smallestIndex = odd.findIndex((n) => n < arr[0]);\n  let smallestValue = odd[smallestIndex];\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestValue) {\n      newArr.push(smallestValue);\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { plufkOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOddsIndex = (arr) => {\n  let odd = arr.filter((n) => n % 2 === 1);\n  let smallestIndex = odd.findIndex((n) => n < arr[0]);\n  let smallestValue = odd[smallestIndex];\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestValue) {\n      newArr.push(i);\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { plufkOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOddsIndexAndValue = (arr) => {\n  let odd = arr.filter((n) => n % 2 === 1);\n  let smallestIndex = odd.findIndex((n) => n < arr[0]);\n  let smallestValue = odd[smallestIndex];\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestValue) {\n      newArr.push([i, smallestValue]);\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { plufkOddsIndexAndValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of pairs of integers in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The pair (-1, 1) sums to zero, while the pair (-1, -3) sums to zero.\n  */\nconst pairSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of triplets in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The triplet (-1, -1, 1) sums to zero, while the triplet (-1, -1, -3) sums to zero.\n  */\nconst tripletSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        if (lst[i] + lst[j] + lst[k] === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 4-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 4-tuple (-1, -1, -1, 1, 1) sums to zero.\n  */\nconst fourTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          if (lst[i] + lst[j] + lst[k] + lst[l] === 0) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 5-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 5-tuple (-1, -1, -1, 1, -1, 1) sums to zero.\n  */\nconst fiveTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          for (let m = l + 1; m < lst.length; m++) {\n            if (lst[i] + lst[j] + lst[k] + lst[l] + lst[m] === 0) {\n              count++;\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 6-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 6-tuple (-1, -1, -1, 1, -1, -1, 1, 1) sums to zero.\n  */\nconst sixTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          for (let m = l + 1; m < lst.length; m++) {\n            for (let n = m + 1; n < lst.length; n++) {\n              if (lst[i] + lst[j] + lst[k] + lst[l] + lst[m] + lst[n] === 0) {\n                count++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 7-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 7-tuple (-1, -1, -1, 1, -1, -1, 1, -1, 1) sums to zero.\n  */\nconst sevenTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          for (let m = l + 1; m < lst.length; m++) {\n            for (let n = m + 1; n < lst.length; n++) {\n              for (let o = n + 1; o < lst.length; o++) {\n                if (lst[i] + lst[j] + lst[k] + lst[l] + lst[m] + lst[n] + lst[o] === 0) {\n                  count++;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 8-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 8-tuple (-1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1) sums to zero.\n  */\nconst eightTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          for (let m = l + 1; m < lst.length; m++) {\n            for (let n = m + 1; n < lst.length; n++) {\n              for (let o = n + 1; o < lst.length; o++) {\n                for (let p = o + 1; p < lst.length; p++) {\n                  if (lst[i] + lst[j] + lst[k] + lst[l] + lst[m] + lst[n] + lst[o] + lst[p] === 0) {\n                    count++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a list of integers. Your task is to find and print the number of 9-tuples in the list that sum to zero.\n  Example:\n      Input: [1, -1, 1, -3]\n      Output: 2\n      Explanation: The 9-tuple (-1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1) sums to zero.\n  */\nconst nineTupleSum = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      for (let k = j + 1; k < lst.length; k++) {\n        for (let l = k + 1; l < lst.length; l++) {\n          for (let m = l + 1; m < lst.length; m++) {\n            for (let n = m + 1; n < lst.length; n++) {\n              for (let o = n + 1; o < lst.length; o++) {\n                for (let p = o + 1; p < lst.length; p++) {\n                  for (let q = p + 1; q < lst.length; q++) {\n                    if (lst[i] + lst[j] + lst[k] + lst[l] + lst[m] + lst[n] + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sortedList = lst\n   .sort((a, b) => a - b)\n   .sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a > b && a > c) {\n    return a + b + c\n  }\n  if (b > a && b > c) {\n    return b + a + c\n  }\n  if (c > a && c > b) {\n    return c + a + b\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isPalindromic = q.reduce((acc, cur) => acc && cur === cur[cur.length - 1]);\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      arr[i] = min;\n    }\n  }\n  return arr.length;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if\n  the array is empty.\n\n  For example:\n  maxNumberInArray([1,2,3]) == 2\n  maxNumberInArray([]) == 0\n  */\nconst maxNumberInArray = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. Return 0 if", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x) < 0);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) >= 0);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x) > -1);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) < 0);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x) === 0);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) > -1);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x)!== 1);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) < 0);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that starts with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x) > -1);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) < 0);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list ends with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.split(''));\n  const arr2 = lst2.map(x => x.split(''));\n  const arr3 = arr1.filter(x => arr2.indexOf(x) < 0);\n  const arr4 = arr1.filter(x => arr2.indexOf(x) > -1);\n  return arr3.concat(arr4);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that starts with the other list\n  and ends with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSlmplePower(x, n / 2);\n  if (n % 2 === 1) return isSlmplePower(x, n / 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPower(1, 4) => true\n  isPower(2, 2) => true\n  isPower(8, 2) => true\n  isPower(3, 2) => false\n  isPower(3, 1) => false\n  isPower(5, 3) => false\n  */\nconst isPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPower(x, n / 2);\n  if (n % 2 === 1) return isPower(x, n / 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOfTwo(1) => true\n  isPowerOfTwo(2) => true\n  isPowerOfTwo(8) => true\n  isPowerOfTwo(3) => false\n  isPowerOfTwo(3) => false\n  isPowerOfTwo(5) => false\n  */\nconst isPowerOfTwo = (x) => {\n  if (x === 0) return true;\n  if (x === 1) return false;\n  if (x === 2) return true;\n  if (x === 4) return true;\n  if (x === 8) return true;\n  if (x === 16) return true;\n  if (x === 32) return true;\n  if (x === 64) return true;\n  if (x === 128) return true;\n  if (x === 256) return true;\n  if (x === 512) return true;\n  if (x === 1024) return true;\n  if (x === 2048) return true;\n  if (x === 4096) return true;\n  if (x === 8192) return true;\n  if (x === 16384) return true;\n  if (x === 32768) return true;\n  if (x === 65536) return true;\n  if (x === 131072) return true;\n  if (x === 262144) return true;\n  if (x === 524288) return true;\n  if (x === 1048576) return true;\n  if (x === 2097152) return true;\n  if (x === 4194304) return true;\n  if (x === 8388608) return true;\n  if (x === 16777216) return true;\n  if (x === 33554432) return true;\n  if (x === 67108864) return true;\n  if (x === 134217728) return true;\n  if (x === 268435456) return true;\n  if (x === 536870912) return true;\n  if (x === 1073741824) return true;\n  if (x === 2147483648) return true;\n  if (x === 4294967296) return true;\n  if (x === 8589934592) return true;\n  if (x === 17179869184) return true;\n  if (x === 34359738368) return true;\n  if (x === 68719476736) return true;\n  if (x === 137438953472) return true;\n  if (x === 274877906944) return true;\n  if (x === 549755813888) return true;\n  if (x === 1099511627776) return true;\n  if (x === 2199023255552) return true;\n  if (x === 4398046511104) return true;\n  if (x === 8796093022208) return true;\n  if (x === 17592186044416) return true;\n  if (x === 35184372088832) return true;\n  if (x === 70368744177664) return true;\n  if (x === 140737488355328) return true;\n  if (x === 2814749767106512) return true;\n  if (x === 562949953421312) return true;\n  if (x === 1125899906842624) return true;\n  if (x === 2251799813685248) return true;\n  if (x === 4503599627370496) return true;\n  if (x === 9007199254740992) return true;\n  if (x === 18014398509481984) return true;\n  if (x === 36028797018963968) return true;\n  if (x === 72057594037927936) return true;\n  if (x === 144115188075855872) return true;\n  if (x === 288230376151711744) return true;\n  if (x === 576460752303423488) return true;\n  if (x === 1152921504606846976) return true;\n  if (x === 2305843009213693952) return true;\n  if (x === 4611686018427387904) return true;\n  if (x === 9223372036854775808) return true;\n  if (x === 18446744073709551616) return true;\n  if (x === 36893488147419103232) return true;\n  if (x === 73786976294838206432) return true;\n  if (x === 1407374883553280128) return true;\n  if (x === 28147497671065152064) return true;\n  if (x === 56294995342131205120) return true;\n  if (x === 112589990684262412800) return true;\n  if (x === 225179981368524812800) return true;\n  if (x === 45035996273704963200) return true;\n  if (x === 90071992547409920643200) return true;\n  if (x === 1801439850948198412800) return true;\n  if (x === 3602879701896396812800) return true;\n  if (x === 7205759403792793612800) return true;\n  if (x === 14411518807585587212800) return true;\n  if (x === 28823037615171174412800) return true;\n  if (x === 57646075230342348812800) return true;\n  if (x === 115292150460684697612800) return true;\n  if (x === 230584300921369395212800) return true;\n  if (x === 461168601842738790412800) return true;\n  if (x === 922337203685477580812800) return true;\n  if (x === 1844674407370955161612800) return true;\n  if (x === 3689348814741910323212800) return true;\n  if (x === 7378697629483820643212800) return true;\n  if (x === 140737488355328012812800) return true;\n  if (x === 281474976710651520643212800) return true;\n  if (x === 5629499534213120512012800) return true;\n  if (x === 11258999068426241280000) return true;\n  if (x === 22517998136852481280000) return true;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - 1;\n  let hexNumArrayLength = hexNumArrayLength - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  const binaryArray = [];\n  let binaryString = '';\n\n  while (decimal!== 0) {\n    binaryArray.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n\n  for (let i = 0; i < binaryArray.length; i++) {\n    if (binaryArray[i] === 1) {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n\n  return binaryString + 'db' + binaryString.substr(0, binaryString.length - 2) + 'db';\n};\n\n/*\n  Write a function that will convert a binary number to decimal format.\n  The function should take a string of 1s and 0s and return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111db\")   # returns 15\n  binaryToDecimal(\"100000db\") # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimal = 0;\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString[i] === '1') {\n      decimal += Math.pow(2, i);\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary format.\n  The function should take a string of 1s and 0s and return the binary string.\n\n  Examples:\n  decimalToBinary(\"15\")   # returns \"1111db\"\n  decimalToBinary(\"32\")   # returns \"100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = '';\n\n  while (decimal!== 0) {\n    binaryString += Math.pow(2, decimal) % 2? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return binaryString;\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal format.\n  The function should take a string of 1s and 0s and return the hexadecimal string.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"f1\"\n  decimalToHexadecimal(\"32\")   # returns \"10\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimalString = '';\n\n  while (decimal!== 0) {\n    hexadecimalString += decimal % 16? '0' : 'f';\n    decimal = Math.floor(decimal / 16);\n  }\n\n  return hexadecimalString;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal format.\n  The function should take a string of 1s and 0s and return the decimal number.\n\n  Examples:\n  hexadecimalToDecimal(\"f1\")   # returns 15\n  hexadecimalToDecimal(\"10\")   # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimalString) => {\n  let decimal = 0;\n\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    if (hexadecimalString[i] === 'f') {\n      decimal += Math.pow(2, i);\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary format.\n  The function should take a string of 1s and 0s and return the binary string.\n\n  Examples:\n  hexadecimalToBinary(\"f1\")   # returns \"1111db\"\n  hexadecimalToBinary(\"10\")   # returns \"100000db\"\n  */\nconst hexadecimalToBinary = (hexadecimalString) => {\n  let binaryString = '';\n\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    if (hexadecimalString[i] === 'f') {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n\n  return binaryString;\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal format.\n  The function should take a string of 1s and 0s and return the hexadecimal string.\n\n  Examples:\n  binaryToHexadecimal(\"1111db\")   # returns \"f1\"\n  binaryToHexadecimal(\"100000db\") # returns \"10\"\n  */\nconst binaryToHexadecimal = (binaryString) => {\n  let hexadecimalString = '';\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString[i] === '1') {\n      hexadecimalString += 'f';\n    }\n  }\n\n  return hexadecimalString;\n};\n\n/*\n  Write a function that will convert a binary number to octal format.\n  The function should take a string of 1s and 0s and return the octal string.\n\n  Examples:\n  binaryToOctal(\"1111db\")   # returns \"15\"\n  binaryToOctal(\"100000db\") # returns \"32\"\n  */\nconst binaryToOctal = (binaryString) => {\n  let octalString = '';\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString[i] === '1') {\n      octalString += '0';\n    }\n  }\n\n  return octalString;\n};\n\n/*\n  Write a function that will convert a octal number to decimal format.\n  The function should take a string of 1s and 0s and return the decimal number.\n\n  Examples:\n  octalToDecimal(\"15\")   # returns 15\n  octalToDecimal(\"32\")   # returns 32\n  */\nconst octalToDecimal = (octalString) => {\n  let decimal = 0;\n\n  for (let i = 0; i < octalString.length; i++) {\n    if (octalString[i] === '0') {\n      decimal += Math.pow(2, i);\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that will convert a octal number to binary format.\n  The function should take a string of 1s and 0s and return the binary string.\n\n  Examples:\n  octalToBinary(\"15\")   # returns \"1111db\"\n  octalToBinary(\"32\")   # returns \"100000db\"\n  */\nconst octalToBinary = (octalString) => {\n  let binaryString = '';\n\n  for (let i = 0; i < octalString.length; i++) {\n    if (octalString[i] === '0') {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n\n  return binaryString;\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal format.\n  The function should take a string of 1s and 0s and return the hexadecimal string.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"f1\"\n  decimalToHexadecimal(\"32\")   # returns \"10\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimalString = '';\n\n  while (decimal!== 0) {\n    hexadecimalString += decimal % 16? '0' : 'f';\n    decimal = Math.floor(decimal / 16);\n  }\n\n  return hexadecimalString;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal format.\n  The function should take a string of 1s and 0s and return the decimal number.\n\n  Examples:\n  hexadecimalToDecimal(\"f1\")   # returns 15\n  hexadecimalToDecimal(\"10\")   # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimalString) => {\n  let decimal = 0;\n\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    if (hexadecimalString[i] === 'f') {\n      decimal += Math.pow(2, i);\n    }\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary format.\n  The function should take a string of 1s and 0s and return the binary string.\n\n  Examples:\n  hexadecimalToBinary(\"f1\")   # returns \"1111db\"\n  hex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  isLetter(a) => false\n  isLetter(aa) => false\n  isLetter(aab) => true\n  isLetter(aaac) => false\n  isLetter(aaacd) => false\n  isLetter(aaacdab) => false\n  isLetter(aaacdabac) => true\n  isLetter(aaacdabacd) => false\n  isLetter(aaacdabacdab) => false\n  isLetter(aaacdabacdabac) => true\n  isLetter(aaacdabacdabacd) => false\n  isLetter(aaacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacd) => false\n  isLetter(aaacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacd) => false\n  isLetter(aaacdabacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacd) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacd) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacd) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdab) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => true\n  isLetter(aaacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabacdabac) => false\n  isLetter(aaacdabacdabacdabacdabacdabacdabac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, cur) => {\n    if (cur > 3.7) {\n      letterGrades.push('A+');\n    } else if (cur > 3.3) {\n      letterGrades.push('A');\n    } else if (cur > 3) {\n      letterGrades.push('A-');\n    } else if (cur > 2.7) {\n      letterGrades.push('B+');\n    } else if (cur > 2.3) {\n      letterGrades.push('B');\n    } else if (cur > 2) {\n      letterGrades.push('B-');\n    } else if (cur > 1.7) {\n      letterGrades.push('C+');\n    } else if (cur > 1.3) {\n      letterGrades.push('C');\n    } else if (cur > 1) {\n      letterGrades.push('C-');\n    } else if (cur > 0.7) {\n      letterGrades.push('D+');\n    } else if (cur > 0) {\n      letterGrades.push('D');\n    } else {\n      letterGrades.push('D-');\n    }\n    return acc + cur;\n  }, 0);\n  letterGrades.push(gpa);\n  return letterGrades;\n};\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, cur) => {\n    if (cur > 3.7) {\n      letterGrades.push('A+');\n    } else if (cur > 3.3) {\n      letterGrades.push('A');\n    } else if (cur > 3) {\n      letterGrades.push('A-');\n    } else if (cur > 2.7) {\n      letterGrades.push('B+');\n    } else if (cur > 2.3) {\n      letterGrades.push('B');\n    } else if (cur > 2) {\n      letterGrades.push('B-');\n    } else if (cur > 1.7) {\n      letterGrades.push('C+');\n    } else if (cur > 1.3) {\n      letterGrades.push('C');\n    } else if (cur > 1) {\n      letterGrades.push('C-');\n    } else if (cur > 0.7) {\n      letterGrades.push('D+');\n    } else if (cur > 0) {\n      letterGrades.push('D');\n    } else {\n      letterGrades.push('D-');\n    }\n    return acc + cur;\n  }, 0);\n  letterGrades.push(gpa);\n  return letterGrades;\n};\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, cur) => {\n    if (cur > 3.7) {\n      letterGrades.push('A+');\n    } else if (cur > 3.3) {\n      letterGrades.push('A');\n    } else if (cur > 3) {\n      letterGrades.push('A-');\n    } else if (cur > 2.7) {\n      letterGrades.push('B+');\n    } else if (cur > 2.3) {\n      letterGrades.push('B');\n    } else if (cur > 2) {\n      letterGrades.push('B-');\n    } else if (cur > 1.7) {\n      letterGrades.push('C+');\n    } else if (cur > 1.3) {\n      letterGrades.push('C');\n    } else if (cur > 1) {\n      letterGrades.push('C-');\n    } else if (cur > 0.7) {\n      letterGrades.push('D+');\n    } else if (cur > 0) {\n      letterGrades.push('D');\n    } else {\n      letterGrades.push('D-');\n    }\n    return acc + cur;\n  }, 0);\n  letterGrades.push(gpa);\n  return letterGrades;\n};\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst stagtsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge2 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge3 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge4 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge5 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge6 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge7 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge8 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge9 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge10 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toUpperCase();\n    } else {\n      newString += char.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'olleh'\n  antlShuffle('Hello World!!!') returns '!dlroW olleH'\n  */\nconst antlShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toLowerCase();\n    } else {\n      newString += char.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'olleh'\n  antlShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toUpperCase();\n    } else {\n      newString += char.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDesc('Hi') returns 'Hi'\n  antlShuffleDesc('hello') returns 'olleh'\n  antlShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleDescAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toLowerCase();\n    } else {\n      newString += char.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleAsc('Hi') returns 'Hi'\n  antlShuffleAsc('hello') returns 'olleh'\n  antlShuffleAsc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toUpperCase();\n    } else {\n      newString += char.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleAscDesc('Hi') returns 'Hi'\n  antlShuffleAscDesc('hello') returns 'olleh'\n  antlShuffleAscDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleAscDescAsc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toLowerCase();\n    } else {\n      newString += char.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDescAsc('Hi') returns 'Hi'\n  antlShuffleDescAsc('hello') returns 'olleh'\n  antlShuffleDescAsc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleDescAscDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = char.charCodeAt(0);\n    if (index > 64 && index < 91) {\n      newString += char;\n    } else if (index > 96 && index < 123) {\n      newString += char.toUpperCase();\n    } else {\n      newString += char.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDescAscDesc('Hi') returns 'Hi'\n  antlShuffleDescAscDesc('hello') returns 'olleh'\n  antlShuffleDescAscDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antlShuffleDescAscDescA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  const sortedCoordinates = sortCoordinates(sortedRows, sortedColumns);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedCoordinates[i];\n    const rowCoordinates = rowToCoordinates(row, sortedColumns);\n    \n    for (let j = 0; j < columns; j++) {\n      const column = sortedColumns[j];\n      const columnCoordinates = columnToCoordinates(column, rowCoordinates);\n      \n      if (columnCoordinates.indexOf(x)!== -1) {\n        result.push([i, column]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 1), (4, 1)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 2)]\n  */\nconst getGow2 = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedColumns = sortColumns(lst);\n  const sortedRows = sortRows(sortedColumns);\n  const sortedCoordinates = sortCoordinates(sortedColumns, sortedRows);\n  \n  for (let j = 0; j < columns; j++) {\n    const column = sortedColumns[j];\n    const columnCoordinates = columnToCoordinates(column, sortedRows);\n    \n    for (let i = 0; i < rows; i++) {\n      const row = sortedCoordinates[i];\n      const rowCoordinates = rowToCoordinates(row, columnCoordinates);\n      \n      if (rowCoordinates.indexOf(x)!== -1) {\n        result.push([i, column]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 1), (4, 1)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 2)]\n  */\nconst getGow3 = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedColumns = sortColumns(lst);\n  const sortedRows = sortRows(sortedColumns);\n  const sortedCoordinates = sortCoordinates(sortedColumns, sortedRows);\n  \n  for (let j = 0; j < columns; j++) {\n    const column = sortedColumns[j];\n    const columnCoordinates = columnToCoordinates(column, sortedRows);\n    \n    for (let i = 0; i < rows; i++) {\n      const row = sortedCoordinates[i];\n      const rowCoordinates = rowToCoordinates(row, columnCoordinates);\n      \n      if (rowCoordinates.indexOf(x)!== -1) {\n        result.push([i, column]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 1), (4, 1)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 2)]\n  */\nconst getGow4 = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedColumns = sortColumns(lst);\n  const sortedRows = sortRows(sortedColumns);\n  const sortedCoordinates = sortCoordinates(sortedColumns, sortedRows);\n  \n  for (let j = 0; j < columns; j++) {\n    const column = sortedColumns[j];\n    const columnCoordinates = columnToCoordinates(column, sortedRows);\n    \n    for (let i = 0; i < rows; i++) {\n      const row = sortedCoordinates[i];\n      const rowCoordinates = rowToCoordinates(row, columnCoordinates);\n      \n      if (rowCoordinates.indexOf(x)!== -1) {\n        result.push([i, column]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow5 = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  const sortedCoordinates = sortCoordinates(sortedRows, sortedColumns);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedCoordinates[i];\n    const rowCoordinates = rowToCoordinates(row, sortedColumns);\n    \n    for (let j = 0; j < columns; j++) {\n      const column = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "<|endoftext|>/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = '';\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2);\n  }\n  return newAlphabet;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdef", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolpingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rolpingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolpingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 3, 4, 5]\n  */\nconst rolpingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolpingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.25, 4]\n  */\nconst rolpingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolpingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 3, 3.25, 4]\n  */\nconst rolpingMedian = (numbers) => {\n  const result = [];\n  const middle = Math.floor(numbers.length / 2);\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === middle) {\n      result.push(sum / numbers.length);\n    } else {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolpingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rolpingMode = (numbers) => {\n  const result = [];\n  const modes = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      modes.push(numbers[i]);\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(modes.indexOf(numbers[i]));\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStd = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolpingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingVariance = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - numbers[i]);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStdDev = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolpingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingVariance = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - numbers[i]);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStdDev = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolpingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingVariance = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - numbers[i]);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStdDev = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStdDev = (numbers) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the sum of the numbers in the list.\n  \n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 15\n  sum([]) == 0\n  sum([1, 1]) == 0\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the product of the numbers in the list.\n  \n  product([1, 2, 3, 4, 5]) == 120\n  product([5, 1, 4, 3, 2]) == 120\n  product([]) == 1\n  product([1, 1]) == 1\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the largest number in the list.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == null\n  max([1, 1]) == null\n  */\nconst max = (lst) => {\n  let max = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the smallest number in the list.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == null\n  min([1, 1]) == null\n  */\nconst min = (lst) => {\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even.\n  \n  even([1, 2, 3, 4, 5]) == true\n  even([5, 1, 4, 3, 2]) == false\n  even([]) == false\n  even([1, 1]) == false\n  */\nconst even = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are odd.\n  \n  odd([1, 2, 3, 4, 5]) == false\n  odd([5, 1, 4, 3, 2]) == true\n  odd([]) == false\n  odd([1, 1]) == false\n  */\nconst odd = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOdd([1, 2, 3, 4, 5]) == true\n  evenOdd([5, 1, 4, 3, 2]) == true\n  evenOdd([]) == false\n  evenOdd([1, 1]) == false\n  */\nconst evenOdd = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\nconst evenOddAll = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\nconst evenOddAll = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\nconst evenOddAll = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\nconst evenOddAll = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\nconst evenOddAll = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (lst[i] % 2!== 0) {\n        return false;\n      }\n    } else {\n      if (lst[i] % 2!== 0) {\n        return true;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all numbers in the list are even and odd.\n  \n  evenOddAll([1, 2, 3, 4, 5]) == true\n  evenOddAll([5, 1, 4, 3, 2]) == true\n  evenOddAll([]) == false\n  evenOddAll([1, 1]) == false\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' && S[i + 1] === 'I' && S[i + 2] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ true\n  */\nconst allLnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntntntnt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (y === z) {\n    return false\n  }\n  if (x < y) {\n    return x < z\n  }\n  if (y < z) {\n    return y < x\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allLntntntntntntnt = (x, y, z) => {\n  if (x === y || x === z", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      const index = vowels.indexOf(letter);\n      const nextLetter = vowels[index + 1];\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of its sum.\n\n  Examples:\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  for (let i = 0; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the squares of the integers\n  in that array.\n  for example:\n  squareSum([2,3,4]) => [5,10,14]\n  squareSum([2,3,5,7] => [25,49,81]\n  squareSum([]) => []\n  squareSum([2,3,5,7,11,13,17] => [49,81,121,179,251,343,495,641,825]\n  squareSum([2,3,5,7,11,13,17]) => [49,81,121,179,251,343,495,641,825]\n  squareSum([2,3,5,7,11,13,17,19]) => [49,81,121,179,251,343,495,641,825,1249,1621,2049,2421,2881,3481,4981,6421,8251,12251,16049,20251,24049,28891,34859,49859,64251,82559,122559,160251,202559,240251,288959,348251,498251,642559,825251,1225251,1602559,2025251,2402559,2889251,3482559,4982559,6425251,8252559,12252559,16025251,20252559,24025251,28892559,34825251,49825251,64252559,82525251,122525251,160252559,202525251,240252559,288925251,348252559,498252559,642525251,825252559,1225252559,1602525251,2025252559,2402525251,2889252559,3482525251,4982525251,6425252559,8252525251,12252525251,16025252559,20252525251,24025252559,28892525251,34825252559,49825252559,64252525251,82525252559,122525252559,160252525251,202525252559,240252525251,288925252559,348252525251,498252525251,642525252559,825252525251,122525252559,1602525252559,2025252525251,2402525252559,2889252525251,3482525252559,4982525252559,6425252525251,8252525252559,12252525252559,16025252525251,20252525252559,240252525252559,288925252525251,348252525252559,498252525252559,642525252525251,825252525252559,1225252525252559,1602525252525251,2025252525252559,24025252525252559,28892525252525251,34825252525252559,49825252525252559,64252525252525251,82525252525252559,122525252525252559,160252525252525251,202525252525252559,2402525252525252559,2889252525252525251,3482525252525252559,4982525252525252559,6425252525252525251,8252525252525252559,12252525252525252559,16025252525252525251,20252525252525252559,240252525252525252559,288925252525252525251,348252525252525252559,498252525252525252559,642525252525252525251,825252525252525252559,1225252525252525252559,1602525252525252525251,2025252525252525252559,24025252525252525252559,28892525252525252525251,34825252525252525252559,49825252525252525252559,64252525252525252525251,82525252525252525252559,122525252525252525252559,160252525252525252525251,202525252525252525252559,2402525252525252525252559,2889252525252525252525251,3482525252525252525252559,4982525252525252525252559,6425252525252525252525251,8252525252525252525252559,12252525252525252525252559,16025252525252525252525251,20252525252525252525252559,240252525252525252525252559,288925252525252525252525251,34825252525252525252525252559,49825252525252525252525252559,64252525252525252525252525251,82525252525252525252525252559,1225", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  const maxDigit = Math.max(...a.map(Number),...b.map(Number));\n  const unitDigits = maxDigit % 10;\n  const unitDigit = unitDigits === 0? 0 : unitDigits - 1;\n  const unitDigitDigits = maxDigit % Math.pow(10, unitDigit);\n  const unitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigit);\n  const unitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigit);\n  const unitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = unitDigitDigits === 0? 0 : unitDigitDigits - 1;\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % Math.pow(10, unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit);\n  const unitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. Vowels are \n  defined as a, e, i, o, u. \n  \n  For example:\n  coujtVowels('aBCdEf') returns 3\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === 'a' || s.charAt(i).toLowerCase() === 'e' || s.charAt(i).toLowerCase() === 'i' || s.charAt(i).toLowerCase() === 'o' || s.charAt(i).toLowerCase() === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. Consonants are \n  defined as b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 4\n  coujtConsonants('abcdefg') returns 0\n  coujtConsonants('dBBE') returns 0\n  */\nconst coujtConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === 'b' || s.charAt(i).toLowerCase() === 'c' || s.charAt(i).toLowerCase() === 'd' || s.charAt(i).toLowerCase() === 'f' || s.charAt(i).toLowerCase() === 'g' || s.charAt(i).toLowerCase() === 'h' || s.charAt(i).toLowerCase() === 'j' || s.charAt(i).toLowerCase() === 'k' || s.charAt(i).toLowerCase() === 'l' || s.charAt(i).toLowerCase() ==='m' || s.charAt(i).toLowerCase() === 'n' || s.charAt(i).toLowerCase() === 'p' || s.charAt(i).toLowerCase() === 'q' || s.charAt(i).toLowerCase() === 'r' || s.charAt(i).toLowerCase() ==='s' || s.charAt(i).toLowerCase() === 't' || s.charAt(i).toLowerCase() === 'v' || s.charAt(i).toLowerCase() === 'w' || s.charAt(i).toLowerCase() === 'x' || s.charAt(i).toLowerCase() === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. Consonants are \n  defined as b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 4\n  coujtConsonants('abcdefg') returns 0\n  coujtConsonants('dBBE') returns 0\n  */\nconst coujtConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i).toLowerCase() === 'b' || s.charAt(i).toLowerCase() === 'c' || s.charAt(i).toLowerCase() === 'd' || s.charAt(i).toLowerCase() === 'f' || s.charAt(i).toLowerCase() === 'g' || s.charAt(i).toLowerCase() === 'h' || s.charAt(i).toLowerCase() === 'j' || s.charAt(i).toLowerCase() === 'k' || s.charAt(i).toLowerCase() === 'l' || s.charAt(i).toLowerCase() ==='m' || s.charAt(i).toLowerCase() === 'n' || s.charAt(i).toLowerCase() === 'p' || s.charAt(i).toLowerCase() === 'q' || s.charAt(i).toLowerCase() === 'r' || s.charAt(i).toLowerCase() ==='s' || s.charAt(i).toLowerCase() === 't' || s.charAt(i).toLowerCase() === 'v' || s.charAt(i).toLowerCase() === 'w' || s.charAt(i).toLowerCase() === 'x' || s.charAt(i).toLowerCase() === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. Consonants are \n  defined as b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 4\n  coujtConsonants('abcdefg') returns 0\n  coujtConsonants('dBBE') returns 0\n  */\nconst coujtConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === 'b' || s.charAt(i).toLowerCase() === 'c' || s.charAt(i).toLowerCase() === 'd' || s.charAt(i).toLowerCase() === 'f' || s.charAt(i).toLowerCase() === 'g' || s.charAt(i).toLowerCase() === 'h' || s.charAt(i).toLowerCase() === 'j' || s.charAt(i).toLowerCase() === 'k' || s.charAt(i).toLowerCase() === 'l' || s.charAt(i).toLowerCase() ==='m' || s.charAt(i).toLowerCase() === 'n' || s.charAt(i).toLowerCase() === 'p' || s.charAt(i).toLowerCase() === 'q' || s.charAt(i).toLowerCase() === 'r' || s.charAt(i).toLowerCase() ==='s' || s.charAt(i).toLowerCase() === 't' || s.charAt(i).toLowerCase() === 'v' || s.charAt(i).toLowerCase() === 'w' || s.charAt(i).toLowerCase() === 'x' || s.charAt(i).toLowerCase() === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. Vowels are \n  defined as a, e, i, o, u. \n  \n  For example:\n  coujtVowels('aBCdEf') returns 3\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === 'a' || s.charAt(i).toLowerCase() === 'e' || s.charAt(i).toLowerCase() === 'i' || s.charAt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const number = parseFloat(value);\n  const integers = number.toString().split(\".\");\n  const integersLength = integers.length;\n  const integersTotal = integersLength > 0? integersLength : 1;\n  const integersDiff = integersTotal - integersLength;\n  const integersDiffFloor = Math.floor(integersDiff);\n  const integersDiffCeil = Math.ceil(integersDiff);\n  const integersDiffRounded = integersDiff - integersDiffFloor;\n  const integersDiffRoundedCeil = Math.ceil(integersDiffRounded);\n  const integersDiffRoundedFloor = Math.floor(integersDiffRounded);\n  const integersDiffRoundedCeil = Math.ceil(integersDiffRounded);\n  const integersDiffRoundedFloorCeil = Math.ceil(integersDiffRoundedCeil);\n  const integersDiffRoundedCeilFloor = Math.floor(integersDiffRoundedCeil);\n  const integersDiffRoundedFloorFloor = Math.floor(integersDiffRoundedFloor);\n  const integersDiffRoundedFloorFloorCeil = Math.ceil(integersDiffRoundedFloorFloor);\n  const integersDiffRoundedFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloor);\n  const integersDiffRoundedFloorFloorFloorCeil = Math.ceil(integersDiffRoundedFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorCeil = Math.ceil(integersDiffRoundedFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorCeil = Math.ceil(integersDiffRoundedFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorCeil = Math.ceil(integersDiffRoundedFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(integersDiffRoundedFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
