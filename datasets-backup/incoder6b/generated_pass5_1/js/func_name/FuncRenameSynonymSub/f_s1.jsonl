{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b)\n  const firstNumber = sortedNumbers[0]\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1]\n  const closestNumbers = sortedNumbers.filter((number) => {\n    return Math.abs(number - firstNumber) < threshold && Math.abs(number - lastNumber) < threshold\n  })\n  return closestNumbers.length === 2\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArray = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeight = (arr, weight) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentage = (arr, weight, percentage) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentage = (arr, weight, percentage, percentage2) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11, percentage12) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11, percentage12, percentage13) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11, percentage12, percentage13, percentage14) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11, percentage12, percentage13, percentage14, percentage15) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage5, percentage6, percentage7, percentage8, percentage9, percentage10, percentage11, percentage12, percentage13, percentage14, percentage15, percentage16) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst getRandomElementFromArrayWithWeightAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentageAndPercentage = (arr, weight, percentage, percentage2, percentage3, percentage4, percentage", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_group = false;\n  let open_brace_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_level++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_level--;\n      closed_group = false;\n      if (open_brace_level === 0) {\n        open_brace_count++;\n        current_group.push(char);\n      } else {\n        open_brace_count--;\n      }\n    } else if (char ==='') {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    } else {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    }\n\n    if (open_brace_level === 0) {\n      groups.push(current_group);\n      current_group = [];\n      open_brace_count = 0;\n      open_brace_level = 0;\n    }\n  }\n\n  if (open_brace_count!== 0) {\n    throw new Error('Unbalanced parenthesis');\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_group = false;\n  let open_brace_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_level++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_level--;\n      closed_group = false;\n      if (open_brace_level === 0) {\n        open_brace_count++;\n        current_group.push(char);\n      } else {\n        open_brace_count--;\n      }\n    } else if (char ==='') {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    } else {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    }\n\n    if (open_brace_level === 0) {\n      groups.push(current_group);\n      current_group = [];\n      open_brace_count = 0;\n      open_brace_level = 0;\n    }\n  }\n\n  if (open_brace_count!== 0) {\n    throw new Error('Unbalanced parenthesis');\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_group = false;\n  let open_brace_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_level++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_level--;\n      closed_group = false;\n      if (open_brace_level === 0) {\n        open_brace_count++;\n        current_group.push(char);\n      } else {\n        open_brace_count--;\n      }\n    } else if (char ==='') {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    } else {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    }\n\n    if (open_brace_level === 0) {\n      groups.push(current_group);\n      current_group = [];\n      open_brace_count = 0;\n      open_brace_level = 0;\n    }\n  }\n\n  if (open_brace_count!== 0) {\n    throw new Error('Unbalanced parenthesis');\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_group = false;\n  let open_brace_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_level++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_level--;\n      closed_group = false;\n      if (open_brace_level === 0) {\n        open_brace_count++;\n        current_group.push(char);\n      } else {\n        open_brace_count--;\n      }\n    } else if (char ==='') {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    } else {\n      if (open_brace_count === 0) {\n        open_brace_level++;\n        current_group.push(char);\n      } else {\n        open_brace_level--;\n      }\n    }\n\n    if (open_brace_level === 0) {\n      groups.push(current_group);\n      current_group = [];\n      open_brace_count = 0;\n      open_brace_level = 0;\n    }\n  }\n\n  if (open_brace_count!== 0) {\n    throw new Error('Unbalanced parenthesis');\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome);\n  const suffix = string.slice(longestPalindrome);\n  const reversedPrefix = prefix.split('').reverse().join('');\n  return reversedPrefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome);\n  const suffix = string.slice(longestPalindrome);\n  const reversedPrefix = prefix.split('').reverse().join('');\n  return reversedPrefix + suffix;\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  let shortestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      shortestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  let shortestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      shortestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  let shortestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      shortestPalindrome++;\n    } else {\n      break;\n    }\n  }\n  return shortestPalindrome;\n}\n\n/* Find the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const result = (n - m) / 2 + m;\n  return result < 0? -1 : result.toString(2);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6!== 0 && x[i] % 7 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6!== 0 && x[i] % 7!== 0 && x[i] % 8 === 0) {\n      res.push(x[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationName[num] : `${byDurationName[num]}${byDurationName[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationName = {\n  1: 'One',\n  2: 'Two',\n  3: 'Three',\n  4: 'Four',\n  5: 'Five',\n  6: 'Six',\n  7: 'Seven',\n  8: 'Eight',\n  9: 'Nine',\n};\n\nconst byDurationReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationName[num] : `${byDurationName[num]}${byDurationName[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationNameReversed = {\n  1: 'One',\n  2: 'Two',\n  3: 'Three',\n  4: 'Four',\n  5: 'Five',\n  6: 'Six',\n  7: 'Seven',\n  8: 'Eight',\n  9: 'Nine',\n};\n\nconst byDurationReversedName = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationNameReversed[num] : `${byDurationNameReversed[num]}${byDurationNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedName[num] : `${byDurationReversedName[num]}${byDurationReversedName[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedName = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversed[num] : `${byDurationReversedNameReversed[num]}${byDurationReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedName[num] : `${byDurationReversedNameReversedName[num]}${byDurationReversedNameReversedName[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedName = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedNameReversed[num] : `${byDurationReversedNameReversedNameReversed[num]}${byDurationReversedNameReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedNameReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedNameReversedName[num] : `${byDurationReversedNameReversedNameReversed[num]}${byDurationReversedNameReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedNameReversedName = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedNameReversedNameReversed[num] : `${byDurationReversedNameReversedNameReversedReversed[num]}${byDurationReversedNameReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedNameReversedNameReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedNameReversedNameReversed[num] : `${byDurationReversedNameReversedNameReversedReversed[num]}${byDurationReversedNameReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedNameReversedNameReversedName = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? byDurationReversedNameReversedNameReversedNameReversedName[num] : `${byDurationReversedNameReversedNameReversedNameReversed[num]}${byDurationReversedNameReversedNameReversed[index - 1]}`;\n  });\n  return result;\n};\n\nconst byDurationReversedNameReversedNameReversedNameReversedNameReversedNameReversed = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    const index = num.toString().length;\n    return index === 1? by", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 9, 27, 81]\n  */\nconst i = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 9, 27, 81]\n  */\nconst l = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 9, 27, 81]\n  */\nconst n = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "<|endoftext|>/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function findKthLargest which takes an array of integers and a number\n  and returns the kth largest number in the array.\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 3) == -5\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 2) == -1\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 0) == 0\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 5) == 5\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 10) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 15) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 20) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 25) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 30) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 35) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 40) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 45) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 50) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 55) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 60) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 65) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 70) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 75) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 80) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 85) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 90) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 95) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 100) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 105) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 110) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 115) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 120) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 125) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 130) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 135) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 140) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 145) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 150) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 155) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 160) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 165) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 170) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 175) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 180) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 185) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 190) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 195) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 200) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 205) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 210) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 215) == 10\n  >>> findKthLargest([-10, -9, -7, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 220) == 10\n  >>> findKthLargest([-10, -9, -7, -5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  let shiftCount = 0;\n  let sortedArray = [];\n  while (shiftCount < arr.length) {\n    shiftCount++;\n    sortedArray = sortedArray.concat(arr.slice(shiftCount));\n    arr = arr.slice(0, shiftCount);\n  }\n  if (arr.length === 0) {\n    return true;\n  }\n  if (sortedArray.length!== arr.length) {\n    return false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (sortedArray[i] > arr[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in the given array and return the index of this element in the array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  maxElementTestis([3, 4, 5, 1, 2])==>3\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Maximum element in the given array is 5 and its index is 3.\n  \n  */\nconst maxElementTestis = (arr) => {\n  let maxElement = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxElement) {\n      maxElement = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  element in the given array and return the index of this element in the array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  minElementTestis([3, 4, 5, 1, 2])==>1\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Minimum element in the given array is 1 and its index is 1.\n  \n  */\nconst minElementTestis = (arr) => {\n  let minElement = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the average\n  of the given array and return the average of the given array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  averageTestis([3, 4, 5, 1, 2])==>3\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Average of the given array is 3.\n  \n  */\nconst averageTestis = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the sum\n  of the given array and return the sum of the given array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  sumTestis([3, 4, 5, 1, 2])==>15\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Sum of the given array is 15.\n  \n  */\nconst sumTestis = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the product of\n  the given array and return the product of the given array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  productTestis([3, 4, 5, 1, 2])==>120\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Product of the given array is 120.\n  \n  */\nconst productTestis = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  and minimum elements of the given array and return the maximum and minimum\n  elements of the given array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  maxMinTestis([3, 4, 5, 1, 2])==>[3, 1]\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]=1\n  arr[4]=2\n  \n  Maximum element of the given array is 3 and its index is 1.\n  Minimum element of the given array is 1 and its index is 0.\n  \n  */\nconst maxMinTestis = (arr) => {\n  let maxElement = arr[0];\n  let minElement = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxElement) {\n      maxElement = arr[i];\n    }\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n    }\n  }\n  return [maxElement, minElement];\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  and minimum elements of the given array and return the maximum and minimum\n  elements of the given array. \n  \n  If the given array is empty then return -1.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  maxMinTestis([3, 4, 5, 1, 2])==>[3, 1]\n  Explanation: \n  \n  arr[0]=3\n  arr[1]=4\n  arr[2]=5\n  arr[3]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aBits = parseInt(a, 2);\n  const bBits = parseInt(b, 2);\n  const result = aBits ^ bBits;\n  return result.toString(2);\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns true if the given string is a valid bowed\n * stringed instrument.\n *\n * A valid bowed\n * stringed instrument is one that\n * consists of only 1s and 0s.\n *\n * >>> bowedStringedInstrumentIsValid('100')\n * true\n * >>> bowedStringedInstrumentIsValid('010')\n * true\n * >>> bowedStringedInstrumentIsValid('001')\n * false\n */\nconst bowedStringedInstrumentIsValid = str => {\n  const aBits = parseInt(str, 2);\n  return aBits === 0;\n};\n\n/**\n * Returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  // Your code here\n}\n\n// Call the central function with the two lists below\n// and see what it returns.\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  test.split(' ').forEach((letter) => {\n    counts[letter] = counts[letter]? counts[letter] + 1 : 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC] === [s, c];\n};\n\n/*Task\n  You are given a string s and a number k. Your task is to find the first k characters of s that is palindrome.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        count++;\n      }\n    }\n    oddCount += count;\n  }\n  return [`${oddCount} odd element${oddCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curiousCount2 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        count++;\n      }\n    }\n    evenCount += count;\n  }\n  return [`${evenCount} even element${evenCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount2(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount2(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curiousCount3 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        count++;\n      }\n    }\n    evenCount += count;\n  }\n  return [`${evenCount} even element${evenCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount3(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount3(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curiousCount4 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        count++;\n      }\n    }\n    evenCount += count;\n  }\n  return [`${evenCount} even element${evenCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount4(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount4(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curiousCount5 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        count++;\n      }\n    }\n    evenCount += count;\n  }\n  return [`${evenCount} even element${evenCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount5(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount5(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curiousCount6 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        count++;\n      }\n    }\n    evenCount += count;\n  }\n  return [`${evenCount} even element${evenCount === 1? '' :'s'} in the ${lst.length} string${lst.length === 1? '' :'s'} in the input.`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount6(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> curiousCount6(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst curious", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minuteSubArraySum([-1, -2, -3]) == 6\n  */\nconst minuteSubArrayMaxSum = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minuteSubArrayProduct = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minProd = nums[0];\n  for (let i = 1; i < len; i++) {\n    minProd = minProd * nums[i];\n  }\n  return minProd;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProduct([-1, -2, -3]) == 24\n  */\nconst minuteSubArrayMaxProduct = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxProd = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxProd = maxProd * nums[i];\n  }\n  return maxProd;\n};\n\n/*\n  Given an array of integers nums, find the minimum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == 2\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMinElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    minElement = Math.min(minElement, nums[i]);\n  }\n  return minElement;\n};\n\n/*\n  Given an array of integers nums, find the maximum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == -1\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum maximum element in nums.\n  Example\n  minuteMaxElement([2, 3, 4, 1, 2, 4]) == 4\n  minuteMaxElement([-1, -2, -3]) == 3\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == 2\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMinElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    minElement = Math.min(minElement, nums[i]);\n  }\n  return minElement;\n};\n\n/*\n  Given an array of integers nums, find the maximum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == -1\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum maximum element in nums.\n  Example\n  minuteMaxElement([2, 3, 4, 1, 2, 4]) == 4\n  minuteMaxElement([-1, -2, -3]) == 3\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == 2\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMinElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    minElement = Math.min(minElement, nums[i]);\n  }\n  return minElement;\n};\n\n/*\n  Given an array of integers nums, find the maximum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == -1\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum maximum element in nums.\n  Example\n  minuteMaxElement([2, 3, 4, 1, 2, 4]) == 4\n  minuteMaxElement([-1, -2, -3]) == 3\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == 2\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMinElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let minElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    minElement = Math.min(minElement, nums[i]);\n  }\n  return minElement;\n};\n\n/*\n  Given an array of integers nums, find the maximum minimum element in nums.\n  Example\n  minuteMinElement([2, 3, 4, 1, 2, 4]) == -1\n  minuteMinElement([-1, -2, -3]) == -1\n  */\nconst minuteMaxElement = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return 0;\n  }\n  let maxElement = nums[0];\n  for (let i = 1; i < len; i++) {\n    maxElement = Math.max(maxElement, nums[i]);\n  }\n  return maxElement;\n};\n\n/*\n  Given an array of integers nums, find the minimum maximum element in nums.\n  Example\n  minuteMaxElement([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const buckets = Array.from({ length: capacity }, () => new Array(bucket_capacity).fill(0));\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]].push(i, j);\n      }\n    }\n  }\n  buckets.forEach((bucket, index) => {\n    bucket.forEach(([x, y]) => {\n      grid[x][y] = 0;\n    });\n  });\n  buckets.forEach((bucket, index) => {\n    bucket.forEach(([x, y]) => {\n      if (grid[x][y] === 1) {\n        count++;\n      }\n    });\n  });\n  return count;\n};\n\n/*\n  You are given an n x n 2D matrix representing an image.\n  Each pixel in the image is either black or white.\n  You are also given a 2D vector of size n x 1 representing the RGB color of a pixel.\n  You are asked to fill the image with water.\n  You are guaranteed that no two adjacent pixels have the same RGB color.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the top right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the bottom right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the background pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the left of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same color as the adjacent pixel to the right of the water pixel.\n  You are also guaranteed that no two adjacent pixels have the same ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || aStr - bStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => {\n    return acc + parseInt(val.toString(2), 2);\n  }, 0);\n  const decs = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    return aStr.length - bStr.length || bStr - aStr;\n  });\n  return [...decs,...ones];\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelsCountAfter = 0;\n  let vowelsCountBefore = 0;\n  let vowelsCountBetween = 0;\n  let vowelsCountInBetween = 0;\n  let vowelsCountInFront = 0;\n  let vowelsCountInBack = 0;\n  let vowelsCountInFrontAndBack = 0;\n  let vowelsCountInFrontAndBackAndAfter = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBefore = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetween = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetween = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFront = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBack = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfter = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBefore = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetween = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetween = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFront = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBack = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetween = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFront = 0;\n  let vowelsCountInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFrontAndBackAndAfterAndBeforeAndBetweenAndInBetweenAndInFr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const stack = [];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        res.push('No');\n      } else {\n        res.push(stack.pop());\n      }\n    }\n  }\n  return res.join('');\n};\n\n/* You are given a list of integers. Your job is to find the maximum number\n  in that list. Return 'No' if there's no such number. Return 'Yes' if the\n  maximum number is in the list.\n  Examples:\n  maxNum([10, 5, 1, 8, 3]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([10, 5, 1, 8, 3, 1]) == 10\n  maxNum([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "<|endoftext|>/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return null;\n  }\n  if (len === 1) {\n    return strings[0];\n  }\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n      maxIndex = i;\n    }\n  }\n  return strings[maxIndex];\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  5\n  */\nconst longest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len > max) {\n      max = len;\n    }\n  }\n  return max;\n};\n\n/**\n * Return the length of the shortest string in the given list.\n * Return 0 if the list is empty.\n * >>> shortest([ 'a', 'bb', 'ccc', 'dddd' ])\n  3\n  >>> shortest([ 'a', 'bb', 'ccc', 'dddd', 'eeee' ])\n  4\n  */\nconst shortest = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return 0;\n  }\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const len = strings[i].length;\n    if (len < min) {\n      min = len;\n    }\n  }\n  return min;\n};\n\n/**\n * Return the length of the longest string in the given list.\n * Return 0 if the list is empty.\n * >>> longest([ 'a', 'bb', 'ccc', 'dddd' ])\n  4\n  >>> longest([", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  let maxArr = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    maxArr.push(arr[i]);\n  }\n  return maxArr;\n};\n\nexport { maximal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimal = (arr, k) => {\n  let minArr = [];\n  for (let i = 0; i < k; i++) {\n    minArr.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    minArr.push(arr[i]);\n  }\n  return minArr;\n};\n\nexport { minimal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 0\n      Output: []\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  let kLargest = [];\n  for (let i = 0; i < k; i++) {\n    kLargest.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    kLargest.push(arr[i]);\n  }\n  return kLargest;\n};\n\nexport { kLargest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 3, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 0\n      Output: []\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  let kSmallest = [];\n  for (let i = 0; i < k; i++) {\n    kSmallest.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    kSmallest.push(arr[i]);\n  }\n  return kSmallest;\n};\n\nexport { kSmallest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 5, 4]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [6, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 0\n      Output: []\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestAndLargest = (arr, k) => {\n  let kSmallest = [];\n  let kLargest = [];\n  for (let i = 0; i < k; i++) {\n    kSmallest.push(arr[i]);\n    kLargest.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    kSmallest.push(arr[i]);\n    kLargest.push(arr[i]);\n  }\n  return [kSmallest, kLargest];\n};\n\nexport { kSmallestAndLargest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [4, 6, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [4, 6]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 0\n      Output: []\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestAndLargestDescending = (arr, k) => {\n  let kSmallest = [];\n  let kLargest = [];\n  for (let i = 0; i < k; i++) {\n    kSmallest.push(arr[i]);\n    kLargest.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    kSmallest.push(arr[i]);\n    kLargest.push(arr[i]);\n  }\n  return [kLargest, kSmallest];\n};\n\nexport { kSmallestAndLargestDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [4, 5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [4, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 0\n      Output: []\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargestAndSmallestDescending = (arr, k) => {\n  let kLargest = [];\n  let kSmallest = [];\n  for (let i = 0; i < k; i++) {\n    kLargest.push(arr[i]);\n    kSmallest.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    kLargest.push(arr[i]);\n    kSmallest.push(arr[i]);\n  }\n  return [kSmallest, kLargest];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that occur more than once in the original list.\n\n  Examples\n  solution([5, 8, 7, 1, 3]) ==> [5, 7, 3]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (newList.indexOf(lst[i]) === -1) {\n      newList.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2 === 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenReverseCollatz(5) returns [5, 16, 8, 4, 2, 1] The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenReverseCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  result.reverse();\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddReverseCollatz(5) returns [5, 16, 8, 4, 2, 1] The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddReverseCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2 === 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  result.reverse();\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenReverseCollatz(5) returns [5, 16, 8, 4, 2, 1] The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenReverseCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2!== 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  result.reverse();\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddReverseCollatz(5) returns [5, 16, 8, 4, 2, 1] The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddReverseCollatz = (n) => {\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    let nextTerm = i;\n    while(nextTerm % 2 === 0) {\n      nextTerm /= 2;\n    }\n    result.push(nextTerm);\n  }\n  result.reverse();\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInYear = 365;\n  let monthsInYear = 12;\n  let dateArrayLength = dateArray.length;\n  let daysInMonthLength = daysInMonth.length;\n  let monthsInYearLength = monthsInYear.length;\n  let daysInYearLength = daysInYear.length;\n  let monthsInYearLength = monthsInYear.length;\n  let dateArrayLength2 = dateArrayLength - 1;\n  let daysInMonthLength2 = daysInMonthLength - 1;\n  let monthsInYearLength2 = monthsInYearLength - 1;\n  let daysInYearLength2 = daysInYearLength - 1;\n  let monthsInYearLength2 = monthsInYearLength - 1;\n  let dateArrayLength3 = dateArrayLength2 - 1;\n  let daysInMonthLength3 = daysInMonthLength2 - 1;\n  let monthsInYearLength3 = monthsInYearLength2 - 1;\n  let daysInYearLength3 = daysInYearLength2 - 1;\n  let monthsInYearLength3 = monthsInYearLength2 - 1;\n  let dateArrayLength4 = dateArrayLength3 - 1;\n  let daysInMonthLength4 = daysInMonthLength3 - 1;\n  let monthsInYearLength4 = monthsInYearLength3 - 1;\n  let daysInYearLength4 = daysInYearLength3 - 1;\n  let monthsInYearLength4 = monthsInYearLength3 - 1;\n  let dateArrayLength5 = dateArrayLength4 - 1;\n  let daysInMonthLength5 = daysInMonthLength4 - 1;\n  let monthsInYearLength5 = monthsInYearLength4 - 1;\n  let daysInYearLength5 = daysInYearLength4 - 1;\n  let monthsInYearLength5 = monthsInYearLength4 - 1;\n  let dateArrayLength6 = dateArrayLength5 - 1;\n  let daysInMonthLength6 = daysInMonthLength5 - 1;\n  let monthsInYearLength6 = monthsInYearLength5 - 1;\n  let daysInYearLength6 = daysInYearLength5 - 1;\n  let monthsInYearLength6 = monthsInYearLength5 - 1;\n  let dateArrayLength7 = dateArrayLength6 - 1;\n  let daysInMonthLength7 = daysInMonthLength6 - 1;\n  let monthsInYearLength7 = monthsInYearLength6 - 1;\n  let daysInYearLength7 = daysInYearLength6 - 1;\n  let monthsInYearLength7 = monthsInYearLength6 - 1;\n  let dateArrayLength8 = dateArrayLength7 - 1;\n  let daysInMonthLength8 = daysInMonthLength7 - 1;\n  let monthsInYearLength8 = monthsInYearLength7 - 1;\n  let daysInYearLength8 = daysInYearLength7 - 1;\n  let monthsInYearLength8 = monthsInYearLength7 - 1;\n  let dateArrayLength9 = dateArrayLength8 - 1;\n  let daysInMonthLength9 = daysInMonthLength8 - 1;\n  let monthsInYearLength9 = monthsInYearLength8 - 1;\n  let daysInYearLength9 = daysInYearLength8 - 1;\n  let monthsInYearLength9 = monthsInYearLength8 - 1;\n  let dateArrayLength10 = dateArrayLength9 - 1;\n  let daysInMonthLength10 = daysInMonthLength9 - 1;\n  let monthsInYearLength10 = monthsInYearLength9 - 1;\n  let daysInYearLength10 = daysInYearLength9 - 1;\n  let monthsInYearLength10 = monthsInYearLength9 - 1;\n  let dateArrayLength11 = dateArrayLength10 - 1;\n  let daysInMonthLength11 = daysInMonthLength10 - 1;\n  let monthsInYearLength11 = monthsInYearLength10 - 1;\n  let daysInYearLength11 = daysInYearLength10 - 1;\n  let monthsInYearLength11 = monthsInYearLength10 - 1;\n  let dateArrayLength12 = dateArrayLength11 - 1;\n  let daysInMonthLength12 = daysInMonthLength11 - 1;\n  let monthsInYearLength12 = monthsInYearLength11 - 1;\n  let daysInYearLength12 = daysInYearLength11 - 1;\n  let monthsInYearLength12 = monthsInYearLength11 - 1;\n  let dateArrayLength13 = dateArrayLength12 - 1;\n  let daysInMonthLength13 = daysInMonthLength12 - 1;\n  let monthsInYearLength13 = monthsInYearLength12 - 1;\n  let daysInYearLength13 = daysInYearLength12 - 1;\n  let monthsInYearLength13 = monthsInYearLength12 - 1;\n  let dateArrayLength14 = dateArrayLength13 - 1;\n  let daysInMonthLength14 = daysInMonthLength13 - 1;\n  let monthsInYearLength14 = monthsInYearLength13 - 1;\n  let daysInYearLength14 = daysInYearLength13 - 1;\n  let monthsInYearLength14 = monthsInYearLength13 - 1;\n  let dateArrayLength15 = dateArrayLength14 - 1;\n  let daysInMonthLength15 = daysInMonthLength14 - 1;\n  let monthsInYearLength15 = monthsInYearLength14 - 1;\n  let daysInYearLength15 = daysInYearLength14 - 1;\n  let monthsInYearLength15 = monthsInYearLength14 - 1;\n  let dateArrayLength16 = dateArrayLength15 - 1;\n  let daysInMonthLength16 = daysInMonthLength15 - 1;\n  let monthsInYearLength16 = monthsInYearLength15 - 1;\n  let daysInYearLength16 = daysInYearLength15 - 1;\n  let monthsInYearLength16 = monthsInYearLength15 - 1;\n  let dateArrayLength17 = dateArrayLength16 - 1;\n  let daysInMonthLength17 = daysInMonthLength16 - 1;\n  let monthsInYearLength17 = monthsInYearLength16 - 1;\n  let daysInYearLength17 = daysInYearLength16 - 1;\n  let monthsInYearLength17 = monthsInYearLength16 - 1;\n  let dateArrayLength18 = dateArrayLength17 - 1;\n  let daysInMonthLength18 = daysInMonthLength17 - 1;\n  let monthsInYearLength18 = monthsInYearLength17 - 1;\n  let daysInYearLength18 = daysInYearLength17 - 1;\n  let monthsInYearLength18 = monthsInYearLength17 - 1;\n  let dateArrayLength19 = dateArrayLength18 - 1;\n  let daysInMonthLength19 = daysInMonthLength18 - 1;\n  let monthsInYearLength19 = monthsInYearLength18 - 1;\n  let daysInYearLength19 = daysInYearLength18 - 1;\n  let monthsInYearLength19 = monthsInYearLength18 - 1;\n  let dateArrayLength20 = dateArrayLength19 - 1;\n  let daysInMonthLength20 = daysInMonthLength19 - 1;\n  let monthsInYearLength20 = monthsInYearLength19 - 1;\n  let daysInYearLength20 = daysInYearLength19", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords2 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords3 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords4 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords5 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords6 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords7 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords8 = (txt) => {\n  const words = txt.trim().toLowerCase().split(/\\s+/);\n  const wordSet = new Set(words);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (wordSet.has(words[i])) {\n      result.push(words[i]);\n    }\n  }\n  return result.length > 0? result : words.length;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.max(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.min(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAscDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.max(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAsc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.min(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.max(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAscDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.max(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAsc = (lst) => {\n  const set = new Set(lst);\n  return!set.has(-Math.min(...lst));\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 <= start1 && end2 >= end1) return false\n  if (start1 <= start2 && end1 >= end2) return false\n  if (start1 <= start2 && end1 <= end2) return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 <= start1 && end2 >= end1) return false\n  if (start1 <= start2 && end1 >= end2) return false\n  if (start1 <= start2 && end1 <= end2) return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 <= start1 && end2 >= end1) return false\n  if (start1 <= start2 && end1 >= end2) return false\n  if (start1 <= start2 && end1 <= end2) return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 <= start1 && end2 >= end1) return false\n  if (start1 <= start2 && end1 >= end2) return false\n  if (start1 <= start2 && end1 <= end2) return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 <= start1 && end2 >= end1) return false\n  if (start1 <= start2 && end1 >= end2) return false\n  if (start1 <= start2 && end1 <= end2) return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns2 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns3 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns4 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns5 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns6 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns7 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns8 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns9 = (arr) => {\n  if (arr.length === 0) return null\n  const signs = arr.reduce((acc, val) => {\n    if (val > 0) return [...acc, 1]\n    if (val < 0) return [...acc, -1]\n    return [...acc, 0]\n  }, [])\n  return signs.reduce((acc, val) => acc + val * Math.sign(val), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue.push(0);\n  M[0] = 1;\n  while (queue.length > 0) {\n    const i = queue.shift();\n    if (visited[i]) continue;\n    visited[i] = true;\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] === grid[i][j + 1]) {\n        M[j] += M[j + 1];\n        queue.push(j + 1);\n      }\n    }\n  }\n  return M.slice(0, k + 1);\n};\n\n/*\n  Given a 2D array grid of N rows and M columns. Each cell of the grid is a\n  character. Fill the grid so that each character appears at least once and\n  each row and column has at least one character in common.\n\n  You have to find the minimum number of moves to make the grid as rectangular as\n  possible.\n  A character can be moved from cell to cell (horizontally or vertically) by\n  choosing a direction (up, down, left, right, or diagonally) and moving the\n  character in that direction.\n  You CANNOT move a character diagonally more than once.\n  A character can be moved only in one direction.\n  Return an integer denoting the minimum number of moves.\n\n  Examples:\n\n      Input: grid = [ ['a','a','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b','b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (a === 0) {\n    return b\n  }\n  if (b === 0) {\n    return a\n  }\n  return capitalCoarseDivisor(b, a % b)\n}\n\n/**\n * Return the number of digits in n\n * >>> digitCount(10)\n  1\n  >>> digitCount(100)\n  2\n  >>> digitCount(1000)\n  3\n  >>> digitCount(1000000)\n  4\n  >>> digitCount(1000000000)\n  5\n  */\nconst digitCount = n => {\n  let count = 0\n  while (n > 0) {\n    n /= 10\n    count += 1\n  }\n  return count\n}\n\n/**\n * Return the number of digits in n that are greater than or equal to k\n * >>> digitCountGreaterThanOrEqual(10, 3)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 4)\n  2\n  >>> digitCountGreaterThanOrEqual(10, 5)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 6)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 7)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 8)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 9)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 10)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 11)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 12)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 13)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 14)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 15)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 16)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 17)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 18)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 19)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 20)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 21)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 22)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 23)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 24)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 25)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 26)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 27)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 28)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 29)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 30)\n  1\n  >>> digitCountGreaterThanOrEqual(10, 31)\n  1\n  */\nconst digitCountGreaterThanOrEqual = (n, k) => {\n  let count = 0\n  while (n >= k) {\n    n /= 10\n    count += 1\n  }\n  return count\n}\n\n/**\n * Return the number of digits in n that are less than or equal to k\n * >>> digitCountLessThanOrEqual(10, 3)\n  1\n  >>> digitCountLessThanOrEqual(10, 4)\n  1\n  >>> digitCountLessThanOrEqual(10, 5)\n  1\n  >>> digitCountLessThanOrEqual(10, 6)\n  1\n  >>> digitCountLessThanOrEqual(10, 7)\n  1\n  >>> digitCountLessThanOrEqual(10, 8)\n  1\n  >>> digitCountLessThanOrEqual(10, 9)\n  1\n  >>> digitCountLessThanOrEqual(10, 10)\n  1\n  >>> digitCountLessThanOrEqual(10, 11)\n  1\n  >>> digitCountLessThanOrEqual(10, 12)\n  1\n  >>> digitCountLessThanOrEqual(10, 13)\n  1\n  >>> digitCountLessThanOrEqual(10, 14)\n  1\n  >>> digitCountLessThanOrEqual(10, 15)\n  1\n  >>> digitCountLessThanOrEqual(10, 16)\n  1\n  >>> digitCountLessThanOrEqual(10, 17)\n  1\n  >>> digitCountLessThanOrEqual(10, 18)\n  1\n  >>> digitCountLessThanOrEqual(10, 19)\n  1\n  >>> digitCountLessThanOrEqual(10, 20)\n  1\n  >>> digitCountLessThanOrEqual(10, 21)\n  1\n  >>> digitCountLessThanOrEqual(10, 22)\n  1\n  >>> digitCountLessThanOrEqual(10, 23)\n  1\n  >>> digitCountLessThanOrEqual(10, 24)\n  1\n  >>> digitCountLessThanOrEqual(10, 25)\n  1\n  >>> digitCountLessThanOrEqual(10, 26)\n  1\n  >>> digitCountLessThanOrEqual(10, 27)\n  1\n  >>> digitCountLessThanOrEqual(10, 28)\n  1\n  >>> digitCountLessThanOrEqual(10, 29)\n  1\n  >>> digitCountLessThanOrEqual(10, 30)\n  1\n  >>> digitCountLessThanOrEqual(10, 31)\n  1\n  */\nconst digitCountLessThanOrEqual = (n, k) => {\n  let count = 0\n  while (n < k) {\n    n /= 10\n    count += 1\n  }\n  return count\n}\n\n/**\n * Return the number of digits in n that are less than or equal to k\n * >>> digitCountLessThanOrEqual(10, 3)\n  1\n  >>> digitCountLessThanOrEqual(10, 4)\n  1\n  >>> digitCountLessThanOrEqual(10, 5)\n  1\n  >>> digitCountLessThanOrEqual(10, 6)\n  1\n  >>> digitCountLessThanOrEqual(10, 7)\n  1\n  >>> digitCountLessThanOrEqual(10, 8)\n  1\n  >>> digitCountLessThanOrEqual(10, 9)\n  1\n  >>> digitCountLessThanOrEqual(10, 10)\n  1\n  >>> digitCountLessThanOrEqual(10, 11)\n  1\n  >>> digitCountLessThanOrEqual(10, 12)\n  1\n  >>> digitCountLessThanOrEqual(10, 13)\n  1\n  >>> digitCountLessThanOrEqual(10, 14)\n  1\n  >>> digitCountLessThanOrEqual(10, 15)\n  1\n  >>> digitCountLessThanOrEqual(10, 16)\n  1\n  >>> digitCountLessThanOrEqual(10, 17)\n  1\n  >>> digitCountLessThanOrEqual(10, 18)\n  1\n  >>> digitCountLessThanOrEqual(10, 19)\n  1\n  >>> digitCountLessThanOrEqual(10, 20)\n  1\n  >>> digitCountLessThanOrEqual(10, 21)\n  1\n  >>> digitCountLessThanOrEqual(10, 22)\n  1\n  >>> digitCountLessThanOrEqual(10, 23)\n  1\n  >>> digitCountLessThanOrEqual(10, 24)\n  1\n  >>> digitCountLessThanOrEqual(10, 25)\n  1\n  >>> digitCountLessThanOrEqual(10, 26)\n  1\n  >>> digitCountLessThanOrEqual(10, 27)\n  1\n  >>> digitCountLessThanOrEqual(10, 28)\n  1\n  >>> digitCountLessThanOrEqual(10, 29)\n  1", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  return arr;\n};\n\n/*\n  You are given an array arr of positive integers. \n  Your task is to find and return the index of the first occurrence of \n  the number 3 in the array. \n  If the number 3 is not present in the array, return -1.\n  Examples:\n  arr = [1, 2, 3, 3]\n  index = 3\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [1, 2, 3, 3]\n  index = -1\n  arr = [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits with 2 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith2Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(2);\n};\n\n/*Given a positive integer n, return the sum of its digits with 3 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith3Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(3);\n};\n\n/*Given a positive integer n, return the sum of its digits with 4 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith4Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(4);\n};\n\n/*Given a positive integer n, return the sum of its digits with 5 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith5Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(5);\n};\n\n/*Given a positive integer n, return the sum of its digits with 6 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith6Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(6);\n};\n\n/*Given a positive integer n, return the sum of its digits with 7 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith7Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(7);\n};\n\n/*Given a positive integer n, return the sum of its digits with 8 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith8Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(8);\n};\n\n/*Given a positive integer n, return the sum of its digits with 9 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith9Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(9);\n};\n\n/*Given a positive integer n, return the sum of its digits with 10 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith10Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(10);\n};\n\n/*Given a positive integer n, return the sum of its digits with 11 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith11Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(11);\n};\n\n/*Given a positive integer n, return the sum of its digits with 12 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith12Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(12);\n};\n\n/*Given a positive integer n, return the sum of its digits with 13 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith13Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(13);\n};\n\n/*Given a positive integer n, return the sum of its digits with 14 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith14Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(14);\n};\n\n/*Given a positive integer n, return the sum of its digits with 15 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith15Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum.toFixed(15);\n};\n\n/*Given a positive integer n, return the sum of its digits with 16 decimal places.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumWith16Decimal = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10;\n    n /= 10;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let hasNesting = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    } else if (char === '[' && stack.length > 0) {\n      stack.push(char);\n    } else if (char === ']' && stack.length > 0) {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return hasNesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let hasNesting = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    } else if (char === '[' && stack.length > 0) {\n      stack.push(char);\n    } else if (char === ']' && stack.length > 0) {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return hasNesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let hasNesting = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    } else if (char === '[' && stack.length > 0) {\n      stack.push(char);\n    } else if (char === ']' && stack.length > 0) {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return hasNesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let hasNesting = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    } else if (char === '[' && stack.length > 0) {\n      stack.push(char);\n    } else if (char === ']' && stack.length > 0) {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return hasNesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let hasNesting = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    } else if (char === '[' && stack.length > 0) {\n      stack.push(char);\n    } else if (char === ']' && stack.length > 0) {\n      closingBrackets++;\n      if (stack.length === 0) {\n        hasNesting = true;\n      }\n      stack.pop();\n    }\n  }\n\n  return hasNesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsLetter = lastChar.match(/[a-z]/i);\n  const lastCharIsNotWord = lastChar.match(/[^a-z]/i);\n  return lastCharIsLetter &&!lastCharIsNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharVowel(\"apple pie\") ➞ false\n  determineIfConcludingCharVowel(\"apple pi e\") ➞ true\n  determineIfConcludingCharVowel(\"apple pi e \") ➞ false\n  determineIfConcludingCharVowel(\"\") ➞ false\n  */\nconst determineIfConcludingCharVowel = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsVowel = lastChar.match(/[aeiou]/i);\n  return lastCharIsVowel;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a consonant, and false otherwise.\n  Note: \"consonant\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConsonant(\"apple pie\") ➞ false\n  determineIfConcludingCharConsonant(\"apple pi e\") ➞ true\n  determineIfConcludingCharConsonant(\"apple pi e \") ➞ false\n  determineIfConcludingCharConsonant(\"\") ➞ false\n  */\nconst determineIfConcludingCharConsonant = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsConsonant = lastChar.match(/[b-df-hj-np-tv-z]/i);\n  return lastCharIsConsonant;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharNumber(\"apple pie\") ➞ false\n  determineIfConcludingCharNumber(\"apple pi e\") ➞ true\n  determineIfConcludingCharNumber(\"apple pi e \") ➞ false\n  determineIfConcludingCharNumber(\"\") ➞ false\n  */\nconst determineIfConcludingCharNumber = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsNumber = lastChar.match(/\\d/i);\n  return lastCharIsNumber;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Note: \"special\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharSpecial(\"apple pie\") ➞ false\n  determineIfConcludingCharSpecial(\"apple pi e\") ➞ true\n  determineIfConcludingCharSpecial(\"apple pi e \") ➞ false\n  determineIfConcludingCharSpecial(\"\") ➞ false\n  */\nconst determineIfConcludingCharSpecial = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsSpecial = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  return lastCharIsSpecial;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character, and false otherwise.\n  Note: \"punctuation\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharPunctuation(\"apple pie\") ➞ false\n  determineIfConcludingCharPunctuation(\"apple pi e\") ➞ true\n  determineIfConcludingCharPunctuation(\"apple pi e \") ➞ false\n  determineIfConcludingCharPunctuation(\"\") ➞ false\n  */\nconst determineIfConcludingCharPunctuation = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsPunctuation = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  return lastCharIsPunctuation;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Note: \"symbol\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharSymbol(\"apple pie\") ➞ false\n  determineIfConcludingCharSymbol(\"apple pi e\") ➞ true\n  determineIfConcludingCharSymbol(\"apple pi e \") ➞ false\n  determineIfConcludingCharSymbol(\"\") ➞ false\n  */\nconst determineIfConcludingCharSymbol = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsSymbol = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  return lastCharIsSymbol;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharWord(\"apple pie\") ➞ false\n  determineIfConcludingCharWord(\"apple pi e\") ➞ true\n  determineIfConcludingCharWord(\"apple pi e \") ➞ false\n  determineIfConcludingCharWord(\"\") ➞ false\n  */\nconst determineIfConcludingCharWord = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsWord = lastChar.match(/[a-z]+/i);\n  return lastCharIsWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  determine", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst can", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\" || b === \".0\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"Infinity\" || b === \"Infinity\") return null\n  if (a === \"-Infinity\" || b === \"-Infinity\") return null\n  if (a === \"NaN\" || b === \"NaN\") return null\n  if (a === b) return null\n  if (a > b) return a\n  if (b > a) return b\n  if (a < b) return b\n  if (b < a) return a\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\" || b === \".0\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"Infinity\" || b === \"Infinity\") return null\n  if (a === \"-Infinity\" || b === \"-Infinity\") return null\n  if (a === \"NaN\" || b === \"NaN\") return null\n  if (a > b) return a\n  if (b > a) return b\n  if (a < b) return b\n  if (b < a) return a\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareThree(1, 2.5) ➞ null\n  compareThree(1, \"2,3\") ➞ null\n  compareThree(\"5,1\", \"6\") ➞ null\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\" || b === \".0\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"Infinity\" || b === \"Infinity\") return null\n  if (a === \"-Infinity\" || b === \"-Infinity\") return null\n  if (a === \"NaN\" || b === \"NaN\") return null\n  if (a > b) return a\n  if (b > a) return b\n  if (a < b) return b\n  if (b < a) return a\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFour(1, 2.5) ➞ null\n  compareFour(1, \"2,3\") ➞ null\n  compareFour(\"5,1\", \"6\") ➞ null\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\" || b === \".0\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"Infinity\" || b === \"Infinity\") return null\n  if (a === \"-Infinity\" || b === \"-Infinity\") return null\n  if (a === \"NaN\" || b === \"NaN\") return null\n  if (a > b) return a\n  if (b > a) return b\n  if (a < b) return b\n  if (b < a) return a\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFive(1, 2.5) ➞ null\n  compareFive(1, \"2,3\") ➞ null\n  compareFive(\"5,1\", \"6\") ➞ null\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\" || b === \".0\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"Infinity\" || b === \"Infinity\") return null\n  if (a === \"-Infinity\" || b === \"-Infinity\") return null\n  if (a === \"NaN\" || b === \"NaN\") return null\n  if (a > b) return a\n  if (b > a) return b\n  if (a < b) return b\n  if (b < a) return a\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumEven === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOdd(4) == false\n  isAdequateToSumOdd(6) == false\n  isAdequateToSumOdd(8) == true\n  */\nconst isAdequateToSumOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 1) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumOdd === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isAdequateToSumNegative(4) == false\n  isAdequateToSumNegative(6) == false\n  isAdequateToSumNegative(8) == true\n  */\nconst isAdequateToSumNegative = (n) => {\n  const sumNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumNegative === -n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even and 4 negative numbers\n  Example\n  isAdequateToSumEvenAndNegative(4) == false\n  isAdequateToSumEvenAndNegative(6) == false\n  isAdequateToSumEvenAndNegative(8) == true\n  */\nconst isAdequateToSumEvenAndNegative = (n) => {\n  const sumEvenAndNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    if (i % 2 === 1) {\n      acc += -parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumEvenAndNegative === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and 4 negative numbers\n  Example\n  isAdequateToSumOddAndNegative(4) == false\n  isAdequateToSumOddAndNegative(6) == false\n  isAdequateToSumOddAndNegative(8) == true\n  */\nconst isAdequateToSumOddAndNegative = (n) => {\n  const sumOddAndNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 1) {\n      acc += parseInt(curr);\n    }\n    if (i % 2 === 0) {\n      acc += -parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumOddAndNegative === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even and 4 positive odd numbers\n  Example\n  isAdequateToSumEvenAndOdd(4) == false\n  isAdequateToSumEvenAndOdd(6) == false\n  isAdequateToSumEvenAndOdd(8) == true\n  */\nconst isAdequateToSumEvenAndOdd = (n) => {\n  const sumEvenAndOdd = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    if (i % 2 === 1) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumEvenAndOdd === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and 4 negative numbers\n  Example\n  isAdequateToSumOddAndNegative(4) == false\n  isAdequateToSumOddAndNegative(6) == false\n  isAdequateToSumOddAndNegative(8) == true\n  */\nconst isAdequateToSumOddAndNegative = (n) => {\n  const sumOddAndNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 1) {\n      acc += parseInt(curr);\n    }\n    if (i % 2 === 0) {\n      acc += -parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumOddAndNegative === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isAdequateToSumNegative(4) == false\n  isAdequateToSumNegative(6) == false\n  isAdequateToSumNegative(8) == true\n  */\nconst isAdequateToSumNegative = (n) => {\n  const sumNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumNegative === -n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const sumEven = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumEven === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOdd(4) == false\n  isAdequateToSumOdd(6) == false\n  isAdequateToSumOdd(8) == true\n  */\nconst isAdequateToSumOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 1) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumOdd === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isAdequateToSumNegative(4) == false\n  isAdequateToSumNegative(6) == false\n  isAdequateToSumNegative(8) == true\n  */\nconst isAdequateToSumNegative = (n) => {\n  const sumNegative = n.toString().split('').reduce((acc, curr, i) => {\n    if (i % 2 === 0) {\n      acc += parseInt(curr);\n    }\n    return acc;\n  }, 0);\n  return sumNegative === -n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even and 4 negative numbers\n  Example\n  isAdequateToSumEvenAndNegative(4) == false\n  isAdequateTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return extraFactorial(n);\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial2(5)\n  120\n*/\nconst factorial2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial3(5)\n  120\n*/\nconst factorial3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial4(5)\n  120\n*/\nconst factorial4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial5(5)\n  120\n*/\nconst factorial5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial6(5)\n  120\n*/\nconst factorial6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial7(5)\n  120\n*/\nconst factorial7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial8(5)\n  120\n*/\nconst factorial8 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial9(5)\n  120\n*/\nconst factorial9 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial10(5)\n  120\n*/\nconst factorial10 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial11(5)\n  120\n*/\nconst factorial11 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial12(5)\n  120\n*/\nconst factorial12 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial13(5)\n  120\n*/\nconst factorial13 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial14(5)\n  120\n*/\nconst factorial14 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial15(5)\n  120\n*/\nconst factorial15 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial16(5)\n  120\n*/\nconst factorial16 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial17(5)\n  120\n*/\nconst factorial17 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial18(5)\n  120\n*/\nconst factorial18 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial19(5)\n  120\n*/\nconst factorial19 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial20(5)\n  120\n*/\nconst factorial20 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial21(5)\n  120\n*/\nconst factorial21 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.\n  For example:\n  >>> factorial22(5)\n  120\n*/\nconst factorial22 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n!.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.substr(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(0, currentSuffix.length + 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstring = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive underscores with spaces \n  \n  repairUnderscore(\"Example\") == \"Example\"\n  repairUnderscore(\"Example_1\") == \"Example_1\"\n  repairUnderscore(\"_Example_2\") == \"_Example_2\"\n  repairUnderscore(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairUnderscore = (text) => {\n  return text.replace(/_{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive dashes with spaces \n  \n  repairDash(\"Example\") == \"Example\"\n  repairDash(\"Example_1\") == \"Example_1\"\n  repairDash(\"_Example_2\") == \"_Example_2\"\n  repairDash(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairDash = (text) => {\n  return text.replace(/-{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive periods with spaces \n  \n  repairPeriod(\"Example\") == \"Example\"\n  repairPeriod(\"Example_1\") == \"Example_1\"\n  repairPeriod(\"_Example_2\") == \"_Example_2\"\n  repairPeriod(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairPeriod = (text) => {\n  return text.replace(/\\.{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive colons with spaces \n  \n  repairColon(\"Example\") == \"Example\"\n  repairColon(\"Example_1\") == \"Example_1\"\n  repairColon(\"_Example_2\") == \"_Example_2\"\n  repairColon(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairColon = (text) => {\n  return text.replace(/:{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive semicolons with spaces \n  \n  repairSemiColon(\"Example\") == \"Example\"\n  repairSemiColon(\"Example_1\") == \"Example_1\"\n  repairSemiColon(\"_Example_2\") == \"_Example_2\"\n  repairSemiColon(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairSemiColon = (text) => {\n  return text.replace(/;{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive commas with spaces \n  \n  repairComma(\"Example\") == \"Example\"\n  repairComma(\"Example_1\") == \"Example_1\"\n  repairComma(\"_Example_2\") == \"_Example_2\"\n  repairComma(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairComma = (text) => {\n  return text.replace(/,{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive slashes with spaces \n  \n  repairSlash(\"Example\") == \"Example\"\n  repairSlash(\"Example_1\") == \"Example_1\"\n  repairSlash(\"_Example_2\") == \"_Example_2\"\n  repairSlash(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairSlash = (text) => {\n  return text.replace(/\\/{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive question marks with spaces \n  \n  repairQuestionMark(\"Example\") == \"Example\"\n  repairQuestionMark(\"Example_1\") == \"Example_1\"\n  repairQuestionMark(\"_Example_2\") == \"_Example_2\"\n  repairQuestionMark(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairQuestionMark = (text) => {\n  return text.replace(/?{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive exclamation marks with spaces \n  \n  repairExclamationMark(\"Example\") == \"Example\"\n  repairExclamationMark(\"Example_1\") == \"Example_1\"\n  repairExclamationMark(\"_Example_2\") == \"_Example_2\"\n  repairExclamationMark(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairExclamationMark = (text) => {\n  return text.replace(/!{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive ampersands with spaces \n  \n  repairAmpersand(\"Example\") == \"Example\"\n  repairAmpersand(\"Example_1\") == \"Example_1\"\n  repairAmpersand(\"_Example_2\") == \"_Example_2\"\n  repairAmpersand(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairAmpersand = (text) => {\n  return text.replace(/&{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive asterisks with spaces \n  \n  repairAsterisk(\"Example\") == \"Example\"\n  repairAsterisk(\"Example_1\") == \"Example_1\"\n  repairAsterisk(\"_Example_2\") == \"_Example_2\"\n  repairAsterisk(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairAsterisk = (text) => {\n  return text.replace(/*{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive parentheses with spaces \n  \n  repairParenthese(\"Example\") == \"Example\"\n  repairParenthese(\"Example_1\") == \"Example_1\"\n  repairParenthese(\"_Example_2\") == \"_Example_2\"\n  repairParenthese(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairParenthese = (text) => {\n  return text.replace(/\\(+{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive brackets with spaces \n  \n  repairBracket(\"Example\") == \"Example\"\n  repairBracket(\"Example_1\") == \"Example_1\"\n  repairBracket(\"_Example_2\") == \"_Example_2\"\n  repairBracket(\"_Example_3\") == \"_Example_3\"\n  */\nconst repairBracket = (text) => {\n  return text.replace(/[\\{\\(]+{2,}/g, \" \")\n}\n\n/*\n  Given a string text, \n  replace all consecutive curly brackets with spaces \n  \n  repairCurlyBracket(\"Example\") == \"Example\"\n  repairCurlyBracket(\"Example_1\") == \"Example_1\"\n  repairCurlyBracket(\"_Example_2\") == \"_Example_2\"\n  repairCurlyBracket", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.split('');\n  const file_name = file_name.filter(char => char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z');\n  const file_name = file_name.join('');\n  if (file_name.length <= 3) {\n    return 'No';\n  }\n  if (file_name.includes('.')) {\n    return 'No';\n  }\n  if (file_name[0].length <= 1) {\n    return 'No';\n  }\n  if (file_name.includes('exe') || file_name.includes('dll')) {\n    return 'Yes';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.split('');\n  const file_name = file_name.filter(char => char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z');\n  const file_name = file_name.join('');\n  if (file_name.length <= 3) {\n    return 'No';\n  }\n  if (file_name.includes('.')) {\n    return 'No';\n  }\n  if (file_name[0].length <= 1) {\n    return 'No';\n  }\n  if (file_name.includes('exe') || file_name.includes('dll')) {\n    return 'Yes';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.split('');\n  const file_name = file_name.filter(char => char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z');\n  const file_name = file_name.join('');\n  if (file_name.length <= 3) {\n    return 'No';\n  }\n  if (file_name.includes('.')) {\n    return 'No';\n  }\n  if (file_name[0].length <= 1) {\n    return 'No';\n  }\n  if (file_name.includes('exe') || file_name.includes('dll')) {\n    return 'Yes';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.split('');\n  const file_name = file_name.filter(char => char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z');\n  const file_name = file_name.join('');\n  if (file_name.length <= 3) {\n    return 'No';\n  }\n  if (file_name.includes('.')) {\n    return 'No';\n  }\n  if (file_name[0].length <= 1) {\n    return 'No';\n  }\n  if (file_name.includes('exe') || file_name.includes('dll')) {\n    return 'Yes';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.split('');\n  const file_name = file_name.filter(char => char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z');\n  const file_name = file_name.join('');\n  if (file_name", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeProduct = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the product of the entries if the \n  entry is a multiple of 3 and will return the product of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeProductOf = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum *= lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum *= lst[i] * lst[i];\n    } else {\n      sum *= lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOfOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOfOfOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOfOfOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOfOfOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the sum of the entries if the \n  entry is a multiple of 3 and will return the sum of the entries if the entry is a multiple of 4 and not a multiple of 3. \n  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the \n  product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst summarizeSumOfOfOf = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word);\n    if (primes.includes(prime)) {\n      return word;\n    }\n    primes.push(prime);\n  }\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test Cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10\", \"10/-1\"));\nconsole.log(simplify(\"1/5\", \"5/0\"));\nconsole.log(simplify(\"1/6\", \"2/0\"));\nconsole.log(simplify(\"7/10\", \"10/0\"));\nconsole.log(simplify(\"1/5\", \"5/-1\"));\nconsole.log(simplify(\"1/6\", \"2/-1\"));\nconsole.log(simplify(\"7/10", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = digits.reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (!map.has(sum)) {\n      map.set(sum, []);\n    }\n    map.get(sum).push(i);\n  }\n  return Array.from(map.values()).sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sumArray([10, 20, 30, 40]) => 60\n  sumArray([10, 20, 30, 40, 50, 60]) => 110\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  productArray([10, 20, 30, 40]) => 600\n  productArray([10, 20, 30, 40, 50, 60]) => 3600\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. \n  For example:\n  maxArray([10, 20, 30, 40]) => 40\n  maxArray([10, 20, 30, 40, 50, 60]) => 60\n  */\nconst maxArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. \n  For example:\n  minArray([10, 20, 30, 40]) => 10\n  minArray([10, 20, 30, 40, 50, 60]) => 10\n  */\nconst minArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  sumSquaresArray([10, 20, 30, 40]) => 1400\n  sumSquaresArray([10, 20, 30, 40, 50, 60]) => 2600\n  */\nconst sumSquaresArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += Math.pow(nums[i], 2);\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  productSquaresArray([10, 20, 30, 40]) => 800\n  productSquaresArray([10, 20, 30, 40, 50, 60]) => 1600\n  */\nconst productSquaresArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= Math.pow(nums[i], 2);\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. \n  For example:\n  maxSquaresArray([10, 20, 30, 40]) => 400\n  maxSquaresArray([10, 20, 30, 40, 50, 60]) => 600\n  */\nconst maxSquaresArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. \n  For example:\n  minSquaresArray([10, 20, 30, 40]) => 100\n  minSquaresArray([10, 20, 30, 40, 50, 60]) => 100\n  */\nconst minSquaresArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the cubes of the elements in the array.\n  For example:\n  sumCubesArray([10, 20, 30, 40]) => 140000\n  sumCubesArray([10, 20, 30, 40, 50, 60]) => 240000\n  */\nconst sumCubesArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += Math.pow(nums[i], 3);\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the cubes of the elements in the array.\n  For example:\n  productCubesArray([10, 20, 30, 40]) => 80000\n  productCubesArray([10, 20, 30, 40, 50, 60]) => 160000\n  */\nconst productCubesArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= Math.pow(nums[i], 3);\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. \n  For example:\n  maxCubesArray([10, 20, 30, 40]) => 40\n  maxCubesArray([10, 20, 30, 40, 50, 60]) => 60\n  */\nconst maxCubesArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. \n  For example:\n  minCubesArray([10, 20, 30, 40]) => 10\n  minCubesArray([10, 20, 30, 40, 50, 60]) => 10\n  */\nconst minCubesArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the first and last elements in the array.\n  For example:\n  sumFirstLast([10, 20, 30, 40]) => 30\n  sumFirstLast([10, 20, 30, 40, 50, 60]) => 60\n  */\nconst sumFirstLast = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the first and last elements in the array.\n  For example:\n  productFirstLast([10, 20, 30, 40]) => 60\n  productFirstLast([10, 20, 30, 40, 50, 60]) => 120\n  */\nconst productFirstLast = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// another\n\n/*\n  You are given an integer array nums. You have to find out how many triplets \n  (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: nums = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are 3 triples (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n      (1, 3, 7), (3, 7, 13), (7, 13, 21), (13, 21, 34), (21, 34, 55), (34, 55, 89), (55, 89, 141), (89, 141, 233)\n      \n  Note:\n      1 ≤ nums.length ≤ 1000\n      -10^9 ≤ nums[i] ≤ 10^9\n      -10^9 ≤ a[i] ≤ 10^9\n  \n  Follow up:\n      Could you do it in O(n) runtime?\n*/\nconst catchMaxTriples = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 0; i < nums.length; i++) {\n    a[i] = nums[i] * nums[i] - nums[i] + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// another\n\n/*\n  You are given an integer array nums. You have to find out how many triplets \n  (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: nums = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are 3 triples (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n      (1, 3, 7), (3, 7, 13), (7, 13, 21), (13, 21, 34), (21, 34, 55), (34, 55, 89), (55, 89, 141), (89, 141, 233)\n      \n  Note:\n      1 ≤ nums.length ≤ 1000\n      -10^9 ≤ nums[i] ≤ 10^9\n      -10^9 ≤ a[i] ≤ 10^9\n  \n  Follow up:\n      Could you do it in O(n) runtime?\n*/\nconst catchMaxTriples = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 0; i < nums.length; i++) {\n    a[i] = nums[i] * nums[i] - nums[i] + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// another\n\n/*\n  You are given an integer array nums. You have to find out how many triplets \n  (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: nums = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are 3 triples (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n      (1, 3, 7), (3, 7, 13), (7, 13, 21), (13, 21, 34), (21, 34, 55), (34, 55, 89), (55, 89, 141), (89, 141, 233)\n      \n  Note:\n      1 ≤ nums.length ≤ 1000\n      -10^9 ≤ nums[i] ≤ 10^9\n      -10^9 ≤ a[i] ≤ 10^9\n  \n  Follow up:\n      Could you do it in O(n) runtime?\n*/\nconst catchMaxTriples = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 0; i < nums.length; i++) {\n    a[i] = nums[i] * nums[i] - nums[i] + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// another\n\n/*\n  You are given an integer array nums. You have to find out how many triplets \n  (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: nums = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are 3 triples (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n      (1, 3, 7), (3, 7, 13), (7, 13, 21), (13, 21, 34), (21, 34, 55), (34, 55, 89), (55, 89, 141), (89, 141, 233)\n      \n  Note:\n      1 ≤ nums.length ≤ 1000\n      -10^9 ≤ nums[i] ≤ 10^9\n      -10^9 ≤ a[i] ≤ 10^9\n  \n  Follow up:\n      Could you do it in O(n) runtime?\n*/\nconst catchMaxTriples = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 0; i < nums.length; i++) {\n    a[i] = nums[i] * nums[i] - nums[i] + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// another\n\n/*\n  You are given an integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  const orbit1 = orbits[planets.indexOf(planet1)];\n  const orbit2 = orbits[planets.indexOf(planet2)];\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n      Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  return [...orbits.filter(([planet]) => distance <= 1)];\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  const orbit1 = orbits[planets.indexOf(planet1)];\n  const orbit2 = orbits[planets.indexOf(planet2)];\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n      Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  return [...orbits.filter(([planet]) => distance <= 1)];\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  const orbit1 = orbits[planets.indexOf(planet1)];\n  const orbit2 = orbits[planets.indexOf(planet2)];\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n      Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  return [...orbits.filter(([planet]) => distance <= 1)];\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  const orbit1 = orbits[planets.indexOf(planet1)];\n  const orbit2 = orbits[planets.indexOf(planet2)];\n  const distance = Math.sqrt(\n    Math.pow(orbit1[0] - orbit2[0], 2) +\n      Math.pow(orbit1[1] - orbit2[1], 2)\n  );\n  return [...orbits.filter(([planet]) => distance <= 1)];\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (newList.indexOf(word) === -1) {\n      newList.push(word);\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  return Array.from(Array(n).keys()).map(i => i + 1).join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedIn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + Math.pow(val, 2);\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares / lst.length;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map((score, index) => score === guess[index]? 0 : Math.abs(score - guess[index]));\n  return gameScores;\n};\n\n// test case\nconst testCases = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 1],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 3],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 7],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 8],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 9],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 10],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 11],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 12],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 13],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 14],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 15],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 16],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 17],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 18],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 19],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 20],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 21],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 22],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 23],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 24],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 25],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 26],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 27],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 28],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 29],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 30],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 31],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 32],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 33],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 34],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 35],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 36],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 37],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 38],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 39],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 40],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 41],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 42],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 43],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 44],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 45],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 46],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 47],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 48],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 49],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 50],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 51],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 52],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 53],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 54],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 55],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 56],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 57],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 58],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 59],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 60],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 61],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 62],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 63],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 64],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 65],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 66],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 67],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 68],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 69],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 70],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 71],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 72],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 73],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 74],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 75],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 76],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 77],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 78],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 79],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 80],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 81],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 82],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 83],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 84", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strength = 0;\n  let strongest = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength_of_extension = cap.length - sm.length;\n    if (strength_of_extension > strength) {\n      strength = strength_of_extension;\n      strongest = extension;\n    }\n  }\n  return `${class_name}.${strongest}`;\n};\n\n/*\n  Write a function that returns the number of times a string occurs in a given string.\n  If the string does not occur in the given string, return -1.\n  Example:\n  countStringOccurrences('abracadabra', 'abra') === 3\n  countStringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countStringOccurrences = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === search_string) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences2 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences3 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences4 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences5 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences6 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences7 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences8 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abracadabra', 'abrara') === -1\n*/\nconst countSubstringOccurrences9 = (string, search_string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(search_string, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of times a substring occurs in a given string.\n  If the substring does not occur in the given string, return -1.\n  Example:\n  countSubstringOccurrences('abracadabra', 'abra') === 3\n  countSubstringOccurrences('abrac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given a string of length N. Your task is to find out if there is a substring in the given string which has length exactly K. \n  subStringCheck(\"abcabc\", 2) => true\n  subStringCheck(\"abcabc\", 3) => false\n  subStringCheck(\"abcabc\", 4) => true\n  subStringCheck(\"abcabc\", 5) => false\n  subStringCheck(\"abcabc\", 6) => true\n  subStringCheck(\"abcabc\", 7) => false\n  subStringCheck(\"abcabc\", 8) => true\n  subStringCheck(\"abcabc\", 9) => false\n  subStringCheck(\"abcabc\", 10) => true\n  subStringCheck(\"abcabc\", 11) => false\n  subStringCheck(\"abcabc\", 12) => true\n  subStringCheck(\"abcabc\", 13) => false\n  subStringCheck(\"abcabc\", 14) => true\n  subStringCheck(\"abcabc\", 15) => false\n  subStringCheck(\"abcabc\", 16) => true\n  subStringCheck(\"abcabc\", 17) => false\n  subStringCheck(\"abcabc\", 18) => true\n  subStringCheck(\"abcabc\", 19) => false\n  subStringCheck(\"abcabc\", 20) => true\n  subStringCheck(\"abcabc\", 21) => false\n  subStringCheck(\"abcabc\", 22) => true\n  subStringCheck(\"abcabc\", 23) => false\n  subStringCheck(\"abcabc\", 24) => true\n  subStringCheck(\"abcabc\", 25) => false\n  subStringCheck(\"abcabc\", 26) => true\n  subStringCheck(\"abcabc\", 27) => false\n  subStringCheck(\"abcabc\", 28) => true\n  subStringCheck(\"abcabc\", 29) => false\n  subStringCheck(\"abcabc\", 30) => true\n  subStringCheck(\"abcabc\", 31) => false\n  subStringCheck(\"abcabc\", 32) => true\n  subStringCheck(\"abcabc\", 33) => false\n  subStringCheck(\"abcabc\", 34) => true\n  subStringCheck(\"abcabc\", 35) => false\n  subStringCheck(\"abcabc\", 36) => true\n  subStringCheck(\"abcabc\", 37) => false\n  subStringCheck(\"abcabc\", 38) => true\n  subStringCheck(\"abcabc\", 39) => false\n  subStringCheck(\"abcabc\", 40) => true\n  subStringCheck(\"abcabc\", 41) => false\n  subStringCheck(\"abcabc\", 42) => true\n  subStringCheck(\"abcabc\", 43) => false\n  subStringCheck(\"abcabc\", 44) => true\n  subStringCheck(\"abcabc\", 45) => false\n  subStringCheck(\"abcabc\", 46) => true\n  subStringCheck(\"abcabc\", 47) => false\n  subStringCheck(\"abcabc\", 48) => true\n  subStringCheck(\"abcabc\", 49) => false\n  subStringCheck(\"abcabc\", 50) => true\n  subStringCheck(\"abcabc\", 51) => false\n  subStringCheck(\"abcabc\", 52) => true\n  subStringCheck(\"abcabc\", 53) => false\n  subStringCheck(\"abcabc\", 54) => true\n  subStringCheck(\"abcabc\", 55) => false\n  subStringCheck(\"abcabc\", 56) => true\n  subStringCheck(\"abcabc\", 57) => false\n  subStringCheck(\"abcabc\", 58) => true\n  subStringCheck(\"abcabc\", 59) => false\n  subStringCheck(\"abcabc\", 60) => true\n  subStringCheck(\"abcabc\", 61) => false\n  subStringCheck(\"abcabc\", 62) => true\n  subStringCheck(\"abcabc\", 63) => false\n  subStringCheck(\"abcabc\", 64) => true\n  subStringCheck(\"abcabc\", 65) => false\n  subStringCheck(\"abcabc\", 66) => true\n  subStringCheck(\"abcabc\", 67) => false\n  subStringCheck(\"abcabc\", 68) => true\n  subStringCheck(\"abcabc\", 69) => false\n  subStringCheck(\"abcabc\", 70) => true\n  subStringCheck(\"abcabc\", 71) => false\n  subStringCheck(\"abcabc\", 72) => true\n  subStringCheck(\"abcabc\", 73) => false\n  subStringCheck(\"abcabc\", 74) => true\n  subStringCheck(\"abcabc\", 75) => false\n  subStringCheck(\"abcabc\", 76) => true\n  subStringCheck(\"abcabc\", 77) => false\n  subStringCheck(\"abcabc\", 78) => true\n  subStringCheck(\"abcabc\", 79) => false\n  subStringCheck(\"abcabc\", 80) => true\n  subStringCheck(\"abcabc\", 81) => false\n  subStringCheck(\"abcabc\", 82) => true\n  subStringCheck(\"abcabc\", 83) => false\n  subStringCheck(\"abcabc\", 84) => true\n  subStringCheck(\"abcabc\", 85) => false\n  subStringCheck(\"abcabc\", 86) => true\n  subStringCheck(\"abcabc\", 87) => false\n  subStringCheck(\"abcabc\", 88) => true\n  subStringCheck(\"abcabc\", 89) => false\n  subStringCheck(\"abcabc\", 90) => true\n  subStringCheck(\"abcabc\", 91) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequencies.\n\n   Example:\n      countCharacters(“Hello World”) ==> (2, {“l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (1, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d”: 1})\n      countCharacters(“Hello World”) ==> (0, {“H”: 1, “e”: 1, “l”: 1, “o”: 1, “W”: 1, “r”: 1, “d", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toLowerCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, break it down into an array of its digits,\n  reverse them and convert them into a positive integer in reverse order.\n  Throw an exception if any input is not valid.\n\n  Examples:\n  >>> intToRaw(0) == []\n  >>> intToRaw(1234) == [1, 2, 3, 4]\n  >>> intToRaw(12345) == [4, 3, 2, 1]\n  >>> intToRaw(123456) == [3, 2, 1]\n  >>> intToRaw(1234567) == [2, 1, 3, 4, 6]\n  >>> intToRaw(12345678) == [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intToRaw(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123) == [8, 7, 6, 5, 4, 3, 2, 1, 0, 6, 5, 4, 3, 2, 1]\n  >>> intTo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveAverage([\"name\"]) === \"name\"\n  receiveAverage([]) === 0\n  */\nconst receiveAverage = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        sum += words[i].length;\n        count++;\n      }\n    }\n  }\n  return sum / count;\n};\n\n/*Write a function that accepts a list of strings and returns their sum.\n  If the list is empty, return 0.\n\n  receiveSum([\"name\"]) === \"name\"\n  receiveSum([]) === 0\n  */\nconst receiveSum = (words) => {\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        sum += words[i].length;\n      }\n    }\n  }\n  return sum;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMedian([\"name\"]) === \"name\"\n  receiveMedian([]) === 0\n  */\nconst receiveMedian = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        sum += words[i].length;\n        count++;\n      }\n    }\n  }\n  if (count % 2 === 0) {\n    return sum / 2;\n  }\n  return sum / 2 - sum / 2;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMode([\"name\"]) === \"name\"\n  receiveMode([]) === 0\n  */\nconst receiveMode = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMedian([\"name\"]) === \"name\"\n  receiveMedian([]) === 0\n  */\nconst receiveMedian = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMode([\"name\"]) === \"name\"\n  receiveMode([]) === 0\n  */\nconst receiveMode = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMedian([\"name\"]) === \"name\"\n  receiveMedian([]) === 0\n  */\nconst receiveMedian = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMode([\"name\"]) === \"name\"\n  receiveMode([]) === 0\n  */\nconst receiveMode = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMedian([\"name\"]) === \"name\"\n  receiveMedian([]) === 0\n  */\nconst receiveMedian = (words) => {\n  let mode = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      mode = words[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0.\n\n  receiveMode([\"name\"]) === \"name\"\n  receiveMode([]) === 0\n  */\nconst receiveMode = (words) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.reduce((count, character) => {\n    return count + (character.match(/[a-z]/i)? 0 : 1);\n  }, 0);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = [];\n\n  for (let i = 0; i < operandLength; i++) {\n    const currentOperand = operandList[i];\n    const currentOperator = operatorList[i];\n    const currentOperandValue = parseInt(currentOperand);\n    const currentOperatorValue = parseInt(currentOperator);\n\n    switch (currentOperator) {\n      case '+':\n        result.push(currentOperandValue + currentOperandValue);\n        break;\n      case '-':\n        result.push(currentOperandValue - currentOperandValue);\n        break;\n      case '*':\n        result.push(currentOperandValue * currentOperandValue);\n        break;\n      case '/':\n        result.push(currentOperandValue / currentOperandValue);\n        break;\n      case '**':\n        result.push(Math.pow(currentOperandValue, currentOperandValue));\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n\n  return result[0];\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = [];\n\n  for (let i = 0; i < operandLength; i++) {\n    const currentOperand = operandList[i];\n    const currentOperator = operatorList[i];\n    const currentOperandValue = parseInt(currentOperand);\n    const currentOperatorValue = parseInt(currentOperator);\n\n    switch (currentOperator) {\n      case '+':\n        result.push(currentOperandValue + currentOperandValue);\n        break;\n      case '-':\n        result.push(currentOperandValue - currentOperandValue);\n        break;\n      case '*':\n        result.push(currentOperandValue * currentOperandValue);\n        break;\n      case '/':\n        result.push(currentOperandValue / currentOperandValue);\n        break;\n      case '**':\n        result.push(Math.pow(currentOperandValue, currentOperandValue));\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n\n  return result[0];\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = [];\n\n  for (let i = 0; i < operandLength; i++) {\n    const currentOperand = operandList[i];\n    const currentOperator = operatorList[i];\n    const currentOperandValue = parseInt(currentOperand);\n    const currentOperatorValue = parseInt(currentOperator);\n\n    switch (currentOperator) {\n      case '+':\n        result.push(currentOperandValue + currentOperandValue);\n        break;\n      case '-':\n        result.push(currentOperandValue - currentOperandValue);\n        break;\n      case '*':\n        result.push(currentOperandValue * currentOperandValue);\n        break;\n      case '/':\n        result.push(currentOperandValue / currentOperandValue);\n        break;\n      case '**':\n        result.push(Math.pow(currentOperandValue, currentOperandValue));\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n\n  return result[0];\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = [];\n\n  for (let i = 0; i < operandLength; i++) {\n    const currentOperand = operandList[i];\n    const currentOperator = operatorList[i];\n    const currentOperandValue = parseInt(currentOperand);\n    const currentOperatorValue = parseInt(currentOperator);\n\n    switch (currentOperator) {\n      case '+':\n        result.push(currentOperandValue + currentOperandValue);\n        break;\n      case '-':\n        result.push(currentOperandValue - currentOperandValue);\n        break;\n      case '*':\n        result.push(currentOperandValue * currentOperandValue);\n        break;\n      case '/':\n        result.push(currentOperandValue / currentOperandValue);\n        break;\n      case '**':\n        result.push(Math.pow(currentOperandValue, currentOperandValue));\n        break;\n      default:\n        console.log('Invalid operator');\n    }\n  }\n\n  return result[0];\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Write a function that returns the number of occurrences of the given character in s.\n  Examples\n  count(\"aba\", \"a\") == 2\n  count(\"aba\", \"b\") == 1\n  count(\"aba\", \"c\") == 0\n  count(\"aba\", \"z\") == 0\n  count(\"aba\", \"A\") == 1\n  count(\"aba\", \"B\") == 1\n  count(\"aba\", \"C\") == 1\n  count(\"aba\", \"D\") == 1\n  count(\"aba\", \"E\") == 1\n  count(\"aba\", \"F\") == 1\n  count(\"aba\", \"G\") == 1\n  count(\"aba\", \"H\") == 1\n  count(\"aba\", \"I\") == 1\n  count(\"aba\", \"J\") == 1\n  count(\"aba\", \"K\") == 1\n  count(\"aba\", \"L\") == 1\n  count(\"aba\", \"M\") == 1\n  count(\"aba\", \"N\") == 1\n  count(\"aba\", \"O\") == 1\n  count(\"aba\", \"P\") == 1\n  count(\"aba\", \"Q\") == 1\n  count(\"aba\", \"R\") == 1\n  count(\"aba\", \"S\") == 1\n  count(\"aba\", \"T\") == 1\n  count(\"aba\", \"U\") == 1\n  count(\"aba\", \"V\") == 1\n  count(\"aba\", \"W\") == 1\n  count(\"aba\", \"X\") == 1\n  count(\"aba\", \"Y\") == 1\n  count(\"aba\", \"Z\") == 1\n  count(\"aba\", \"a\") == 1\n  count(\"aba\", \"b\") == 1\n  count(\"aba\", \"c\") == 1\n  count(\"aba\", \"d\") == 1\n  count(\"aba\", \"e\") == 1\n  count(\"aba\", \"f\") == 1\n  count(\"aba\", \"g\") == 1\n  count(\"aba\", \"h\") == 1\n  count(\"aba\", \"i\") == 1\n  count(\"aba\", \"j\") == 1\n  count(\"aba\", \"k\") == 1\n  count(\"aba\", \"l\") == 1\n  count(\"aba\", \"m\") == 1\n  count(\"aba\", \"n\") == 1\n  count(\"aba\", \"o\") == 1\n  count(\"aba\", \"p\") == 1\n  count(\"aba\", \"q\") == 1\n  count(\"aba\", \"r\") == 1\n  count(\"aba\", \"s\") == 1\n  count(\"aba\", \"t\") == 1\n  count(\"aba\", \"u\") == 1\n  count(\"aba\", \"v\") == 1\n  count(\"aba\", \"w\") == 1\n  count(\"aba\", \"x\") == 1\n  count(\"aba\", \"y\") == 1\n  count(\"aba\", \"z\") == 1\n  count(\"aba\", \"A\") == 1\n  count(\"aba\", \"B\") == 1\n  count(\"aba\", \"C\") == 1\n  count(\"aba\", \"D\") == 1\n  count(\"aba\", \"E\") == 1\n  count(\"aba\", \"F\") == 1\n  count(\"aba\", \"G\") == 1\n  count(\"aba\", \"H\") == 1\n  count(\"aba\", \"I\") == 1\n  count(\"aba\", \"J\") == 1\n  count(\"aba\", \"K\") == 1\n  count(\"aba\", \"L\") == 1\n  count(\"aba\", \"M\") == 1\n  count(\"aba\", \"N\") == 1\n  count(\"aba\", \"O\") == 1\n  count(\"aba\", \"P\") == 1\n  count(\"aba\", \"Q\") == 1\n  count(\"aba\", \"R\") == 1\n  count(\"aba\", \"S\") == 1\n  count(\"aba\", \"T\") == 1\n  count(\"aba\", \"U\") == 1\n  count(\"aba\", \"V\") == 1\n  count(\"aba\", \"W\") == 1\n  count(\"aba\", \"X\") == 1\n  count(\"aba\", \"Y\") == 1\n  count(\"aba\", \"Z\") == 1\n  count(\"aba\", \"a\") == 1\n  count(\"aba\", \"b\") == 1\n  count(\"aba\", \"c\") == 1\n  count(\"aba\", \"d\") == 1\n  count(\"aba\", \"e\") == 1\n  count(\"aba\", \"f\") == 1\n  count(\"aba\", \"g\") == 1\n  count(\"aba\", \"h\") == 1\n  count(\"aba\", \"i\") == 1\n  count(\"aba\", \"j\") == 1\n  count(\"aba\", \"k\") == 1\n  count(\"aba\", \"l\") == 1\n  count(\"aba\", \"m\") == 1\n  count(\"aba\", \"n\") == 1\n  count(\"aba\", \"o\") == 1\n  count(\"aba\", \"p\") == 1\n  count(\"aba\", \"q\") == 1\n  count(\"aba\", \"r\") == 1\n  count(\"aba\", \"s\") == 1\n  count(\"aba\", \"t\") == 1\n  count(\"aba\", \"u\") == 1\n  count(\"aba\", \"v\") == 1\n  count(\"aba\", \"w\") == 1\n  count(\"aba\", \"x\") == 1\n  count(\"aba\", \"y\") == 1\n  count(\"aba\", \"z\") == 1\n  count(\"aba\", \"A\") == 1\n  count(\"aba\", \"B\") == 1\n  count(\"aba\", \"C\") == 1\n  count(\"aba\", \"D\") == 1\n  count(\"aba\", \"E\") == 1\n  count(\"aba\", \"F\") == 1\n  count(\"aba\", \"G\") == 1\n  count(\"aba\", \"H\") == 1\n  count(\"aba\", \"I\") == 1\n  count(\"aba\", \"J\") == 1\n  count(\"aba\", \"K\") == 1\n  count(\"aba\", \"L\") == 1\n  count(\"aba\", \"M\") == 1\n  count(\"aba\", \"N\") == 1\n  count(\"aba\", \"O\") == 1\n  count(\"aba\", \"P\") == 1\n  count(\"aba\", \"Q\") == 1\n  count(\"aba\", \"R\") == 1\n  count(\"aba\", \"S\") == 1\n  count(\"aba\", \"T\") == 1\n  count(\"aba\", \"U\") == 1\n  count(\"aba\", \"V\") == 1\n  count(\"aba\", \"W\") == 1\n  count(\"aba\", \"X\") == 1\n  count(\"aba\", \"Y\") == 1\n  count(\"aba\", \"Z\") == 1\n  count(\"aba\", \"a\") == 1\n  count(\"aba\", \"b\") == 1\n  count(\"aba\", \"c\") == 1\n  count(\"aba\", \"d\") == 1\n  count(\"aba\", \"e\") == 1\n  count(\"aba\", \"f\") == 1\n  count(\"aba\", \"g\") == 1\n  count(\"aba\", \"h\") == 1\n  count(\"aba\", \"i\") == 1\n  count(\"aba\", \"j\") == 1\n  count(\"aba\", \"k\") == 1\n  count(\"aba\", \"l\") == 1\n  count(\"aba\", \"m\") == 1\n  count(\"aba\", \"n\") == 1\n  count(\"aba\", \"o\") == 1\n  count(\"aba\", \"p\") == 1\n  count(\"aba\", \"q\") == 1\n  count(\"aba\", \"r\") == 1\n  count(\"aba\", \"s\") == 1\n  count(\"aba\", \"t\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToHex = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase64 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base64')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase64('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase32 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base32')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase32('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase16 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base16')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase16('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase10 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base10')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase10('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase8 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base8')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase8('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase6 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base6')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase6('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase5 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base5')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase4 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base4')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase4('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase3 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base3')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToBase3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToBase2 = (instrument) => {\n  if (instrument === '') {\n    return null\n  }\n\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(instrument)\n  return md5sum.digest('base2')\n}\n\n/*\n  Given an instrument 'instrument', return a string representation of its md5 hash equivalent string.\n  If 'instrument' is an empty string, return null.\n\n  >>> bowedStringedIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const evenDigits = a.toString().split('')\n  const oddDigits = b.toString().split('')\n  const evenDigitCount = evenDigits.length\n  const oddDigitCount = oddDigits.length\n  const evenDigitArray = []\n  const oddDigitArray = []\n  let evenDigitIndex = 0\n  let oddDigitIndex = 0\n\n  while (evenDigitIndex < evenDigitCount && oddDigitIndex < oddDigitCount) {\n    if (parseInt(evenDigits[evenDigitIndex]) > parseInt(oddDigits[oddDigitIndex])) {\n      oddDigitArray.push(oddDigits[oddDigitIndex])\n      oddDigitIndex++\n    } else {\n      evenDigitArray.push(evenDigits[evenDigitIndex])\n      evenDigitIndex++\n    }\n  }\n\n  while (evenDigitIndex < evenDigitCount) {\n    evenDigitArray.push(evenDigits[evenDigitIndex])\n    evenDigitIndex++\n  }\n\n  while (oddDigitIndex < oddDigitCount) {\n    oddDigitArray.push(oddDigits[oddDigitIndex])\n    oddDigitIndex++\n  }\n\n  return evenDigitArray\n}\n\n/*\n  Given a positive integer n, return the sum of its digits in the form of a string.\n\n  For example:\n  renderNumber(9) => '9'\n  renderNumber(10) => '10'\n  renderNumber(12) => '12'\n  renderNumber(16) => '16'\n  renderNumber(19) => '19'\n  renderNumber(20) => '20'\n  renderNumber(100) => '100'\n  renderNumber(101) => '101'\n  renderNumber(1000) => '1000'\n  renderNumber(1001) => '1001'\n  renderNumber(1002) => '1002'\n  renderNumber(1003) => '1003'\n  renderNumber(1004) => '1004'\n  renderNumber(1005) => '1005'\n  renderNumber(1006) => '1006'\n  renderNumber(1007) => '1007'\n  renderNumber(1008) => '1008'\n  renderNumber(1009) => '1009'\n  renderNumber(1010) => '1010'\n  renderNumber(1011) => '1011'\n  renderNumber(1012) => '1012'\n  renderNumber(1013) => '1013'\n  renderNumber(1014) => '1014'\n  renderNumber(1015) => '1015'\n  renderNumber(1016) => '1016'\n  renderNumber(1017) => '1017'\n  renderNumber(1018) => '1018'\n  renderNumber(1019) => '1019'\n  renderNumber(1020) => '1020'\n  renderNumber(1021) => '1021'\n  renderNumber(1022) => '1022'\n  renderNumber(1023) => '1023'\n  renderNumber(1024) => '1024'\n  renderNumber(1025) => '1025'\n  renderNumber(1026) => '1026'\n  renderNumber(1027) => '1027'\n  renderNumber(1028) => '1028'\n  renderNumber(1029) => '1029'\n  renderNumber(1030) => '1030'\n  renderNumber(1031) => '1031'\n  renderNumber(1032) => '1032'\n  renderNumber(1033) => '1033'\n  renderNumber(1034) => '1034'\n  renderNumber(1035) => '1035'\n  renderNumber(1036) => '1036'\n  renderNumber(1037) => '1037'\n  renderNumber(1038) => '1038'\n  renderNumber(1039) => '1039'\n  renderNumber(1040) => '1040'\n  renderNumber(1041) => '1041'\n  renderNumber(1042) => '1042'\n  renderNumber(1043) => '1043'\n  renderNumber(1044) => '1044'\n  renderNumber(1045) => '1045'\n  renderNumber(1046) => '1046'\n  renderNumber(1047) => '1047'\n  renderNumber(1048) => '1048'\n  renderNumber(1049) => '1049'\n  renderNumber(1050) => '1050'\n  renderNumber(1051) => '1051'\n  renderNumber(1052) => '1052'\n  renderNumber(1053) => '1053'\n  renderNumber(1054) => '1054'\n  renderNumber(1055) => '1055'\n  renderNumber(1056) => '1056'\n  renderNumber(1057) => '1057'\n  renderNumber(1058) => '1058'\n  renderNumber(1059) => '1059'\n  renderNumber(1060) => '1060'\n  renderNumber(1061) => '1061'\n  renderNumber(1062) => '1062'\n  renderNumber(1063) => '1063'\n  renderNumber(1064) => '1064'\n  renderNumber(1065) => '1065'\n  renderNumber(1066) => '1066'\n  renderNumber(1067) => '1067'\n  renderNumber(1068) => '1068'\n  renderNumber(1069) => '1069'\n  renderNumber(1070) => '1070'\n  renderNumber(1071) => '1071'\n  renderNumber(1072) => '1072'\n  renderNumber(1073) => '1073'\n  renderNumber(1074) => '1074'\n  renderNumber(1075) => '1075'\n  renderNumber(1076) => '1076'\n  renderNumber(1077) => '1077'\n  renderNumber(1078) => '1078'\n  renderNumber(1079) => '1079'\n  renderNumber(1080) => '1080'\n  renderNumber(1081) => '1081'\n  renderNumber(1082) => '1082'\n  renderNumber(1083) => '1083'\n  renderNumber(1084) => '1084'\n  renderNumber(1085) => '1085'\n  renderNumber(1086) => '1086'\n  renderNumber(1087) => '1087'\n  renderNumber(1088) => '1088'\n  renderNumber(1089) => '1089'\n  renderNumber(1090) => '1090'\n  renderNumber(1091) => '1091'\n  renderNumber(1092) => '1092'\n  renderNumber(1093) => '1093'\n  renderNumber(1094) => '1094'\n  renderNumber(1095) => '1095'\n  renderNumber(1096) => '1096'\n  renderNumber(1097) => '1097'\n  renderNumber(1098) => '1098'\n  renderNumber(1099) => '1099'\n  renderNumber(1100) => '1100'\n  renderNumber(1101) => '1101'\n  renderNumber(1102) => '1102'\n  renderNumber(1103) => '1103'\n  renderNumber(1104) => '1104'\n  renderNumber(1105) => '1105'\n  renderNumber(1106) => '1106'\n  renderNumber(1107) => '1107'\n  renderNumber(1108) => '1108'\n  renderNumber(1109) => '1109'\n  renderNumber(1110) => '1110'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_length = 2;\n    } else if (music_note === '.|') {\n      music_beats_length = 1;\n    } else {\n      throw new Error('Unknown note'+ music_note);\n    }\n    music_beats.push(music_beats_length);\n  }\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_length = 2;\n    } else if (music_note === '.|') {\n      music_beats_length = 1;\n    } else {\n      throw new Error('Unknown note'+ music_note);\n    }\n    music_beats.push(music_beats_length);\n  }\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_length = 2;\n    } else if (music_note === '.|') {\n      music_beats_length = 1;\n    } else {\n      throw new Error('Unknown note'+ music_note);\n    }\n    music_beats.push(music_beats_length);\n  }\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_length = 2;\n    } else if (music_note === '.|') {\n      music_beats_length = 1;\n    } else {\n      throw new Error('Unknown note'+ music_note);\n    }\n    music_beats.push(music_beats_length);\n  }\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_length = 2;\n    } else if (music_note === '.|') {\n      music_beats_length = 1;\n    } else {\n      throw new Error('Unknown note'+ music_note);\n    }\n    music_beats.push(music_beats_length);\n  }\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    if (music_note === 'o') {\n      music_beats_length = 4;\n    } else if (music_note === 'o|') {\n      music_beats_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++\n      i = string.indexOf(substring, i) + 1\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores.\n  >>> makeUnderscore('  foo')\n  'foo'\n  >>> makeUnderscore('foo bar')\n  'foo_bar'\n  >>> makeUnderscore('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscore('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscore = (string) => {\n  return string.replace(/\\s+/g, '_')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all non-alphanumeric characters removed.\n  >>> makeUnderscoreAndRemove('  foo')\n  'foo'\n  >>> makeUnderscoreAndRemove('foo bar')\n  'foo_bar'\n  >>> makeUnderscoreAndRemove('foo bar baz')\n  'foo_bar_baz'\n  >>> makeUnderscoreAndRemove('foo bar baz qux')\n  'foo_bar_baz_qux'\n  */\nconst makeUnderscoreAndRemove = (string) => {\n  return string.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]+/g, '')\n}\n\n/* Given a string, return a new string with all spaces replaced with underscores and all ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWords = wordArray.sort();\n  return sortedWords;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of all the words in the string in alphabetical order.\n  >>> sortWords('one two three four')\n  ['one', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(decimalPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    }\n    if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifference", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnit = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;\n};\n\n/**\n * Given a number and a range, return a number that falls within the range\n * but is also a multiple of range\n * >>> roundToMultiple(2.5, 0.5)\n  2.5\n */\nconst roundToUnitMultipleMultipleMultipleMultipleMultipleMultipleMultipleMultiple = (number, range) => {\n  const multiple = range * 2;\n  return Math.round(number / multiple) * multiple;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0, 5.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNulls(['a', 3.14, 5])\n  [null, null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNone([])\n  []\n  >>> filterNone([null, null])\n  [null, null]\n  >>> filterNone([null, null, null, null, null, null])\n  [null, null, null, null, null, null]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty([null, null])\n  []\n  >>> filterEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterEmpty = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotEmpty([])\n  []\n  >>> filterNotEmpty([null, null])\n  []\n  >>> filterNotEmpty([null, null, null, null, null, null])\n  [null, null, null, null, null, null]\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNone([])\n  []\n  >>> filterNotNone([null, null])\n  []\n  >>> filterNotNone([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNone = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotEmpty([])\n  []\n  >>> filterNotEmpty([null, null])\n  []\n  >>> filterNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotEmpty([])\n  []\n  >>> filterNotNotEmpty([null, null])\n  []\n  >>> filterNotNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotNone([])\n  []\n  >>> filterNotNotNone([null, null])\n  []\n  >>> filterNotNotNone([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotNone = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotEmpty([])\n  []\n  >>> filterNotEmpty([null, null])\n  []\n  >>> filterNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotEmpty([])\n  []\n  >>> filterNotNotEmpty([null, null])\n  []\n  >>> filterNotNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotNone([])\n  []\n  >>> filterNotNotNone([null, null])\n  []\n  >>> filterNotNotNone([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotNone = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotEmpty([])\n  []\n  >>> filterNotEmpty([null, null])\n  []\n  >>> filterNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotEmpty([])\n  []\n  >>> filterNotNotEmpty([null, null])\n  []\n  >>> filterNotNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotNone([])\n  []\n  >>> filterNotNotNone([null, null])\n  []\n  >>> filterNotNotNone([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotNone = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotEmpty([])\n  []\n  >>> filterNotEmpty([null, null])\n  []\n  >>> filterNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for nulls\n  >>> filterNotNotEmpty([])\n  []\n  >>> filterNotNotEmpty([null, null])\n  []\n  >>> filterNotNotEmpty([null, null, null, null, null, null])\n  []\n  */\nconst filterNotNotEmpty = (values) => {\n  return values.filter(value => value!== null);\n};\n\n/**\n * Filter given list of any python values only for null", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i)\n  }\n  return length\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'a')\n  0\n  >>> strfind('abc', 'z')\n  -1\n  */\nconst strfind = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrfind('abc', 'b')\n  3\n  >>> strrfind('abc', 'a')\n  0\n  >>> strrfind('abc', 'z')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindex('abc', 'b')\n  3\n  >>> strrindex('abc', 'a')\n  0\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strrindexof('abc', 'b')\n  3\n  >>> strrindexof('abc', 'a')\n  0\n  >>> strrindexof('abc', 'z')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let maxDiv = n\n  let maxDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      maxDiv = i\n      maxDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return maxDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDiv = n\n  let minDiv2 = n\n\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      minDiv = i\n      minDiv2 = Math.sqrt(i)\n    }\n  }\n\n  return minDiv\n}\n\n/* Given a number n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateLessThanOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => b - a);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 1, 2, 2])\n  [1, 2]\n  */\nconst getRidOfDuplicateExactlyOnce = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers].sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements lef", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[a-z]/g, char => char.toUpperCase())\n   .replace(/[A-Z]/g, char => char.toLowerCase());\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string\n   .split('')\n   .map(char => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character capitalized and each word capitalized.\n * >>> capitalizeAndCapitalize('hello')\n * 'Hello World'\n */\nconst capitalizeAndCapitalize = (string) => {\n  return string\n   .split(' ')\n   .map(word => capitalize(word))\n   .join(' '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeWhiteSpaceAndReplaceWithSingleSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpaceAndReplaceWithSingle", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, 6]\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 3, 9, 123, 1]\n  */\nconst catchNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> catchNumber([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> catchNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst catchNumber = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> catchString(['hello', 'world'])\n  ['hello', 'world']\n  >>> catchString(['hello', 'world', '!'])\n  ['hello', 'world', '!']\n  */\nconst catchString = (l) => {\n  return l.filter((x) => typeof x ==='string');\n};\n\n/*Return only booleans in the list.\n  >>> catchBoolean([true, false])\n  [true, false]\n  >>> catchBoolean([false, true])\n  [false, true]\n  */\nconst catchBoolean = (l) => {\n  return l.filter((x) => typeof x === 'boolean');\n};\n\n/*Return only objects in the list.\n  >>> catchObject([{a: 1}, {a: 2}, {a: 3}])\n  [{a: 1}, {a: 2}, {a: 3}]\n  >>> catchObject([{a: 1}, {a: 2}, {a: 3}, {a: 4}])\n  [{a: 1}, {a: 2}, {a: 3}, {a: 4}]\n  */\nconst catchObject = (l) => {\n  return l.filter((x) => typeof x === 'object');\n};\n\n/*Return only arrays in the list.\n  >>> catchArray([[1, 2], [3, 4], [5, 6]])\n  [[1, 2], [3, 4], [5, 6]]\n  >>> catchArray([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[1, 2], [3, 4], [5, 6], [7, 8]]\n  */\nconst catchArray = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only functions in the list.\n  >>> catchFunction([() => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  >>> catchFunction([() => {}, () => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  */\nconst catchFunction = (l) => {\n  return l.filter((x) => typeof x === 'function');\n};\n\n/*Return only nulls in the list.\n  >>> catchNull([null, null, null])\n  [null, null, null]\n  >>> catchNull([null, null, null, null])\n  [null, null, null, null]\n  */\nconst catchNull = (l) => {\n  return l.filter((x) => x === null);\n};\n\n/*Return only undefines in the list.\n  >>> catchUndefined([undefined, undefined, undefined])\n  [undefined, undefined, undefined]\n  >>> catchUndefined([undefined, undefined, undefined, undefined])\n  [undefined, undefined, undefined, undefined]\n  */\nconst catchUndefined = (l) => {\n  return l.filter((x) => x === undefined);\n};\n\n/*Return only NaNs in the list.\n  >>> catchNaN([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> catchNaN([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst catchNaN = (l) => {\n  return l.filter((x) => isNaN(x));\n};\n\n/*Return only dates in the list.\n  >>> catchDate([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> catchDate([new Date(), new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date(), new Date()]\n  */\nconst catchDate = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only functions in the list.\n  >>> catchFunction([() => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  >>> catchFunction([() => {}, () => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  */\nconst catchFunction = (l) => {\n  return l.filter((x) => typeof x === 'function');\n};\n\n/*Return only nulls in the list.\n  >>> catchNull([null, null, null])\n  [null, null, null]\n  >>> catchNull([null, null, null, null])\n  [null, null, null, null]\n  */\nconst catchNull = (l) => {\n  return l.filter((x) => x === null);\n};\n\n/*Return only undefines in the list.\n  >>> catchUndefined([undefined, undefined, undefined])\n  [undefined, undefined, undefined]\n  >>> catchUndefined([undefined, undefined, undefined, undefined])\n  [undefined, undefined, undefined, undefined]\n  */\nconst catchUndefined = (l) => {\n  return l.filter((x) => x === undefined);\n};\n\n/*Return only NaNs in the list.\n  >>> catchNaN([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> catchNaN([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst catchNaN = (l) => {\n  return l.filter((x) => isNaN(x));\n};\n\n/*Return only dates in the list.\n  >>> catchDate([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> catchDate([new Date(), new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date(), new Date()]\n  */\nconst catchDate = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only functions in the list.\n  >>> catchFunction([() => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  >>> catchFunction([() => {}, () => {}, () => {}, () => {}])\n  [[() => {}, () => {}, () => {}]]\n  */\nconst catchFunction = (l) => {\n  return l.filter((x) => typeof x === 'function');\n};\n\n/*Return only nulls in the list.\n  >>> catchNull([null, null, null])\n  [null, null, null]\n  >>> catchNull([null, null, null, null])\n  [null, null, null, null]\n  */\nconst catchNull = (l) => {\n  return l.filter((x) => x === null);\n};\n\n/*Return only undefines in the list.\n  >>> catchUndefined([undefined, undefined, undefined])\n  [undefined, undefined, undefined]\n  >>> catchUndefined([undefined, undefined, undefined, undefined])\n  [undefined, undefined, undefined, undefined]\n  */\nconst catchUndefined = (l) => {\n  return l.filter((x) => x === undefined);\n};\n\n/*Return only NaNs in the list.\n  >>> catchNaN([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> catchNaN([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst catchNaN = (l) => {\n  return l.filter((x) => isNaN(x));\n};\n\n/*Return only dates in the list.\n  >>> catchDate([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> catchDate([new Date(), new Date(), new Date", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst is", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      found = true;\n      break;\n    }\n    if (found) {\n      break;\n    }\n    x += xs[i];\n  }\n  return x;\n}\n\n/*\n  findMax finds maximum value from list of numbers.\n  >>> round(findMax([10, 20, 30]), 2) # f(x) = 20\n  20.0\n  >>> round(findMax([10, 20, 30, 40]), 2) # f(x) = 40\n  40.0\n  >>> round(findMax([10, 20, 30, 40, 50]), 2) # f(x) = 50\n  50.0\n  >>> round(findMax([10, 20, 30, 40, 50, 60]), 2) # f(x) = 60\n  60.0\n  >>> round(findMax([10, 20, 30, 40, 50, 60, 70]), 2) # f(x) = 70\n  70.0\n  >>> round(findMax([10, 20, 30, 40, 50, 60, 70, 80]), 2) # f(x) = 80\n  80.0\n  >>> round(findMax([10, 20, 30, 40, 50, 60, 70, 80, 90]), 2) # f(x) = 90\n  90.0\n  >>> round(findMax([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), 2) # f(x) = 100\n  100.0\n  */\nconst findMax = (xs) => {\n  let max = xs[0];\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n}\n\n/*\n  findMin finds minimum value from list of numbers.\n  >>> round(findMin([10, 20, 30]), 2) # f(x) = 10\n  10.0\n  >>> round(findMin([10, 20, 30, 40]), 2) # f(x) = 20\n  20.0\n  >>> round(findMin([10, 20, 30, 40, 50]), 2) # f(x) = 30\n  30.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60]), 2) # f(x) = 40\n  40.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60, 70]), 2) # f(x) = 50\n  50.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60, 70, 80]), 2) # f(x) = 60\n  60.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60, 70, 80, 90]), 2) # f(x) = 70\n  70.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), 2) # f(x) = 80\n  80.0\n  >>> round(findMin([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]), 2) # f(x) = 110\n  110.0\n  */\nconst findMin = (xs) => {\n  let min = xs[0];\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n}\n\n/*\n  findRoot finds root of function f(x) = x at point x.\n  >>> round(findRoot([10, 20, 30]), 2) # f(x) = 10\n  10.0\n  >>> round(findRoot([10, 20, 30, 40]), 2) # f(x) = 20\n  20.0\n  >>> round(findRoot([10, 20, 30, 40, 50]), 2) # f(x) = 30\n  30.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60]), 2) # f(x) = 40\n  40.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60, 70]), 2) # f(x) = 50\n  50.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60, 70, 80]), 2) # f(x) = 60\n  60.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60, 70, 80, 90]), 2) # f(x) = 70\n  70.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), 2) # f(x) = 80\n  80.0\n  >>> round(findRoot([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]), 2) # f(x) = 110\n  110.0\n  */\nconst findRoot = (xs) => {\n  let root = xs[0];\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      break;\n    }\n    root = Math.pow(root, 1 / xs[i]);\n  }\n  return root;\n}\n\n/*\n  findRoots finds roots of function f(x) = x at point x.\n  >>> round(findRoots([10, 20, 30]), 2) # f(x) = 10\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40]), 2) # f(x) = 20\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50]), 2) # f(x) = 30\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60]), 2) # f(x) = 40\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60, 70]), 2) # f(x) = 50\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60, 70, 80]), 2) # f(x) = 60\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60, 70, 80, 90]), 2) # f(x) = 70\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]), 2) # f(x) = 80\n  [-1.0, 1.0]\n  >>> round(findRoots([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]), 2) # f(x) = 110\n  [-1.0, 1.0]\n  */\nconst findRoots = (xs) => {\n  let roots = [];\n  let root = xs[0];\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      break;\n    }\n    roots.push(root);\n    root = Math.pow(root, 1 / xs[i]);\n  }\n  return roots;\n}\n\n/*\n  findCubic finds cubic root of function f(x) = x at point x.\n  >>> round(findCubic([10, 20, 30]), 2) # f(x) = 10\n  10.0\n  >>> round(findCubic([10, 20, 30, 40]), 2) # f(x) = 20\n  20.0\n  >>> round(findCubic([10, 20, 30, 40, 50]), 2) # f(x) = 30\n  30.0\n  >>> round(findC", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "<|endoftext|>/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst sorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicates = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemoved = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSortedAndDuplicatesRemoved = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSortedAndDuplicatesRemoved = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  return u;\n};\n\n/*Return unique elements in a list with duplicates removed\n  >>> uniqueWithDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicatesSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSortedAndDuplicatesRemovedSortedAndDuplicatesRemoved = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) u.push(a[i]);\n  }\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n  u.sort();\n  u = [...new Set(u)];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  return Math.max(...l)\n}\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElement = (l) => {\n  return Math.min(...l)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      l[evenIndex] = l[oddIndex];\n      evenIndex++;\n    } else {\n      l[oddIndex] = l[evenIndex];\n      oddIndex++;\n    }\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 6) {\n    groups.push(s.slice(i, i + 6));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 7) {\n    groups.push(s.slice(i, i + 7));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 8) {\n    groups.push(s.slice(i, i + 8));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 9) {\n    groups.push(s.slice(i, i + 9));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ten characters.\n  */\nconst encodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 10); i++) {\n    groups.push(s.slice(10 * i, Math.min((10 * i + 10), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 10)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "<|endoftext|>/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  fibonacci returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  */\nconst fibonacci = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacciPrime(1)\n  1\n  >>> fibonacciPrime(2)\n  1\n  >>> fibonacciPrime(3)\n  2\n  >>> fibonacciPrime(4)\n  3\n  >>> fibonacciPrime(5)\n  5\n  >>> fibonacciPrime(6)\n  8\n  >>> fibonacciPrime(7)\n  13\n  >>> fibonacciPrime(8)\n  21\n  >>> fibonacciPrime(9)\n  34\n  >>> fibonacciPrime(10)\n  55\n  >>> fibonacciPrime(11)\n  89\n  */\nconst fibonacciPrime = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) {\n      return c;\n    }\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime2 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacciPrime2(1)\n  1\n  >>> fibonacciPrime2(2)\n  1\n  >>> fibonacciPrime2(3)\n  2\n  >>> fibonacciPrime2(4)\n  3\n  >>> fibonacciPrime2(5)\n  5\n  >>> fibonacciPrime2(6)\n  8\n  >>> fibonacciPrime2(7)\n  13\n  >>> fibonacciPrime2(8)\n  21\n  >>> fibonacciPrime2(9)\n  34\n  >>> fibonacciPrime2(10)\n  55\n  >>> fibonacciPrime2(11)\n  89\n  */\nconst fibonacciPrime2 = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) {\n      return c;\n    }\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime3 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacciPrime3(1)\n  1\n  >>> fibonacciPrime3(2)\n  1\n  >>> fibonacciPrime3(3)\n  2\n  >>> fibonacciPrime3(4)\n  3\n  >>> fibonacciPrime3(5)\n  5\n  >>> fibonacciPrime3(6)\n  8\n  >>> fibonacciPrime3(7)\n  13\n  >>> fibonacciPrime3(8)\n  21\n  >>> fibonacciPrime3(9)\n  34\n  >>> fibonacciPrime3(10)\n  55\n  >>> fibonacciPrime3(11)\n  89\n  */\nconst fibonacciPrime3 = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) {\n      return c;\n    }\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime4 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacciPrime4(1)\n  1\n  >>> fibonacciPrime4(2)\n  1\n  >>> fibonacciPrime4(3)\n  2\n  >>> fibonacciPrime4(4)\n  3\n  >>> fibonacciPrime4(5)\n  5\n  >>> fibonacciPrime4(6)\n  8\n  >>> fibonacciPrime4(7)\n  13\n  >>> fibonacciPrime4(8)\n  21\n  >>> fibonacciPrime4(9)\n  34\n  >>> fibonacciPrime4(10)\n  55\n  >>> fibonacciPrime4(11)\n  89\n  */\nconst fibonacciPrime4 = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) {\n      return c;\n    }\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime5 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacciPrime5(1)\n  1\n  >>> fibonacciPrime5(2)\n  1\n  >>> fibonacciPrime5(3)\n  2\n  >>> fibonacciPrime5(4)\n  3\n  >>> fibonacciPrime5(5)\n  5\n  >>> fibonacciPrime5(6)\n  8\n  >>> fibonacciPrime5(7)\n  13\n  >>> fibonacciPrime5(8)\n  21\n  >>> fibonacciPrime5(9)\n  34\n  >>> fibonacciPrime5(10)\n  55\n  >>> fibonacciPrime5(11)\n  89\n  */\nconst fibonacciPrime5 = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) {\n      return c;\n    }\n  }\n  return b;\n};\n\n/*\n  fibonacciPrime6 returns n-th number that is a Fibonacci number and it's also pri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "<|endoftext|>/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero7 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero8 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero9 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero10 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero11 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero12 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero13 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero14 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero15 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero16 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero17 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero18 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero19 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero20 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero21 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero22 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero23 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero24 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero25 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero26 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\nconst tripleTotalToZero27 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n// returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].speed &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].speed\n      ) {\n        collisions++;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 20, 5, 30, 5, 40, 5]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 20, 5, 30, 5, 40, 5]\n  */\nconst divMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 20, 5, 30, 5, 40, 5]\n  */\nconst divMultDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivMultList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultDivMultList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst divMultDivMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivDivDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultDivDivList([1, 2, 3])\n  [1, 2, 1]\n  >>> divMultDivDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst divMultDivDivDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivMultDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivMultDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivMultDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultDivMultDivList([1, 2, 3])\n  [3, 6, 9]\n  >>> divMultDivMultDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst divMultDivMultDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivDivMultList([1, 2, 3])\n  [3, 6, 9]\n  >>> multDivDivMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivDivMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3 and then multiplied by 2.\n  >>> divMultDivDivMultList([1, 2, 3])\n  [3, 6, 9]\n  >>> divMultDivDivMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 123]\n  */\nconst multDivDivDivMultList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3 / 2 / 2 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3 and then divided by 2.\n  >>> multDivDivDivMultDivList([1, 2, 3])\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "<|endoftext|>/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  const n = l.length\n  if (n === 0) return false\n  if (n === 1) return true\n  if (l.some((e) => e < 0)) return false\n  if (l.some((e) => e > 0)) return false\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  intersect to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  if (base < 1 || base > 10) {\n    throw new Error('Base must be between 1 and 10')\n  }\n  let str = x.toString(base)\n  while (str.length < base) {\n    str = `0${str}`\n  }\n  return str\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst variety = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> variety(8, 3)\n  '22'\n  >>> variety(8, 2)\n  '1000'\n  >>> variety(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varietyString(8, 2)\n  '1000'\n  >>> varietyString(7, 2)\n  '111'\n  */\nconst varietyString = (x, base) => {\n  return varietyBase(parseInt(x, 10), base)\n}\n\n/*\n  Convert number x to string representation in base base using varietyBase.\n  >>> varietyString(8, 3)\n  '22'\n  >>> varie", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow((h / 2), 2));\n};\n\n/*Given length of a side and high return area for a parallelogram.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the nth element of the Fibbonacci sequence using recursion.\n  fib(n) -> fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4).\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  9497558\n  >>> fib(36)\n  14930352\n  >>> fib(37)\n  24157817\n  >>> fib(38)\n  39088169\n  >>> fib(39)\n  63245986\n  >>> fib(40)\n  102334155\n  >>> fib(41)\n  165580141\n  >>> fib(42)\n  267914296\n  >>> fib(43)\n  433494437\n  >>> fib(44)\n  701408733\n  >>> fib(45)\n  1134903170\n  >>> fib(46)\n  1836311903\n  >>> fib(47)\n  2971215073\n  >>> fib(48)\n  4807526976\n  >>> fib(49)\n  7778742049\n  >>> fib(50)\n  12586269025\n  >>> fib(51)\n  20365011074\n  >>> fib(52)\n  32951280099\n  >>> fib(53)\n  49258992002\n  >>> fib(54)\n  97706801331\n  >>> fib(55)\n  1548008755920\n  >>> fib(56)\n  250473078196\n  >>> fib(57)\n  4052739537881\n  >>> fib(58)\n  655747031984\n  >>> fib(59)\n  10610209857739\n  >>> fib(60)\n  171676801775548\n  >>> fib(61)\n  26791429687119\n  >>> fib(62)\n  4334944370042\n  >>> fib(63)\n  70140873347401\n  >>> fib(64)\n  113490317002853\n  >>> fib(65)\n  1836311903100661\n  >>> fib(66)\n  2971215073361830\n  >>> fib(67)\n  4807526976656480\n  >>> fib(68)\n  7778742049288420\n  >>> fib(69)\n  12586269025644800\n  >>> fib(70)\n  20365011074383080\n  >>> fib(71)\n  3295128009908700\n  >>> fib(72)\n  4925899200283500\n  >>> fib(73)\n  9770680133106580\n  >>> fib(74)\n  15480087559203360\n  >>> fib(75)\n  25047307819646680\n  >>> fib(76)\n  4052739537881660\n  >>> fib(77)\n  65574703198428800\n  >>> fib(78)\n  10610209857739560\n  >>> fib(79)\n  17167680177554840\n  >>> fib(80)\n  26791429687119200\n  >>> fib(81)\n  43349443700426400\n  >>> fib(82)\n  70140873347401480\n  >>> fib(83)\n  113490317002853680\n  >>> fib(84)\n  183631190310066160\n  >>> fib(85)\n  297121507336183080\n  >>> fib(86)\n  480752697665648080\n  >>> fib(87)\n  777874204928842080\n  >>> fib(88)\n  1258626902564480080\n  >>> fib(89)\n  2036501107438308080\n  >>> fib(90)\n  329512800990870080\n  >>> fib(91)\n  492589920028350080\n  >>> fib(92)\n  977068013310658080\n  >>> fib(93)\n  1548008755920336000\n  >>> fib(94)\n  2504730781964668080\n  >>> fib(95)\n  405273953788166080\n  >>> fib(96)\n  655747031984288000\n  >>> fib(97)\n  1061020985773956080\n  >>> fib(98)\n  1716768017755484000\n  >>> fib(99)\n  267914296871192000\n  >>> fib(100)\n  4334944", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 1) return sorted[len / 2 - 1];\n  return sorted[(len - 1) / 2];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted[i + 1] || 0;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  if (l.length === 0) return NaN;\n  const sorted = l.slice().sort((a, b) => a - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p - 1) % p;\n};\n\n/**\n * Returns true if n is a power of 2, false otherwise.\n * Returns false if n is not a power of 2.\n * Returns true for n equal to 0, false otherwise.\n * Returns true for n equal to 1, false otherwise.\n * Returns true for n equal to 2, false otherwise.\n * Returns true for n equal to 3, false otherwise.\n * Returns true for n equal to 4, false otherwise.\n * Returns true for n equal to 5, false otherwise.\n * Returns true for n equal to 6, false otherwise.\n * Returns true for n equal to 7, false otherwise.\n * Returns true for n equal to 8, false otherwise.\n * Returns true for n equal to 9, false otherwise.\n * Returns true for n equal to 10, false otherwise.\n * Returns true for n equal to 11, false otherwise.\n * Returns true for n equal to 12, false otherwise.\n * Returns true for n equal to 13, false otherwise.\n * Returns true for n equal to 14, false otherwise.\n * Returns true for n equal to 15, false otherwise.\n * Returns true for n equal to 16, false otherwise.\n * Returns true for n equal to 17, false otherwise.\n * Returns true for n equal to 18, false otherwise.\n * Returns true for n equal to 19, false otherwise.\n * Returns true for n equal to 20, false otherwise.\n * Returns true for n equal to 21, false otherwise.\n * Returns true for n equal to 22, false otherwise.\n * Returns true for n equal to 23, false otherwise.\n * Returns true for n equal to 24, false otherwise.\n * Returns true for n equal to 25, false otherwise.\n * Returns true for n equal to 26, false otherwise.\n * Returns true for n equal to 27, false otherwise.\n * Returns true for n equal to 28, false otherwise.\n * Returns true for n equal to 29, false otherwise.\n * Returns true for n equal to 30, false otherwise.\n * Returns true for n equal to 31, false otherwise.\n * Returns true for n equal to 32, false otherwise.\n * Returns true for n equal to 33, false otherwise.\n * Returns true for n equal to 34, false otherwise.\n * Returns true for n equal to 35, false otherwise.\n * Returns true for n equal to 36, false otherwise.\n * Returns true for n equal to 37, false otherwise.\n * Returns true for n equal to 38, false otherwise.\n * Returns true for n equal to 39, false otherwise.\n * Returns true for n equal to 40, false otherwise.\n * Returns true for n equal to 41, false otherwise.\n * Returns true for n equal to 42, false otherwise.\n * Returns true for n equal to 43, false otherwise.\n * Returns true for n equal to 44, false otherwise.\n * Returns true for n equal to 45, false otherwise.\n * Returns true for n equal to 46, false otherwise.\n * Returns true for n equal to 47, false otherwise.\n * Returns true for n equal to 48, false otherwise.\n * Returns true for n equal to 49, false otherwise.\n * Returns true for n equal to 50, false otherwise.\n * Returns true for n equal to 51, false otherwise.\n * Returns true for n equal to 52, false otherwise.\n * Returns true for n equal to 53, false otherwise.\n * Returns true for n equal to 54, false otherwise.\n * Returns true for n equal to 55, false otherwise.\n * Returns true for n equal to 56, false otherwise.\n * Returns true for n equal to 57, false otherwise.\n * Returns true for n equal to 58, false otherwise.\n * Returns true for n equal to 59, false otherwise.\n * Returns true for n equal to 60, false otherwise.\n * Returns true for n equal to 61, false otherwise.\n * Returns true for n equal to 62, false otherwise.\n * Returns true for n equal to 63, false otherwise.\n * Returns true for n equal to 64, false otherwise.\n * Returns true for n equal to 65, false otherwise.\n * Returns true for n equal to 66, false otherwise.\n * Returns true for n equal to 67, false otherwise.\n * Returns true for n equal to 68, false otherwise.\n * Returns true for n equal to 69, false otherwise.\n * Returns true for n equal to 70, false otherwise.\n * Returns true for n equal to 71, false otherwise.\n * Returns true for n equal to 72, false otherwise.\n * Returns true for n equal to 73, false otherwise.\n * Returns true for n equal to 74, false otherwise.\n * Returns true for n equal to 75, false otherwise.\n * Returns true for n equal to 76, false otherwise.\n * Returns true for n equal to 77, false otherwise.\n * Returns true for n equal to 78, false otherwise.\n * Returns true for n equal to 79, false otherwise.\n * Returns true for n equal to 80, false otherwise.\n * Returns true for n equal to 81, false otherwise.\n * Returns true for n equal to 82, false otherwise.\n * Returns true for n equal to 83, false otherwise.\n * Returns true for n equal to 84, false otherwise.\n * Returns true for n equal to 85, false otherwise.\n * Returns true for n equal to 86, false otherwise.\n * Returns true for n equal to 87, false otherwise.\n * Returns true for n equal to 88, false otherwise.\n * Returns true for n equal to 89, false otherwise.\n * Returns true for n equal to 90, false otherwise.\n * Returns true for n equal to 91, false otherwise.\n * Returns true for n equal to 92, false otherwise.\n * Returns true for n equal to 93, false otherwise.\n * Returns true for n equal to 94, false otherwise.\n * Returns true for n equal to 95, false otherwise.\n * Returns true for n equal to 96, false otherwise.\n * Returns true for n equal to 97, false otherwise.\n * Returns true for n equal to 98, false otherwise.\n * Returns true for n equal to 99, false otherwise.\n * Returns true for n equal to 100, false otherwise.\n * Returns true for n equal to 101, false otherwise.\n * Returns true for n equal to 102, false otherwise.\n * Returns true for n equal to 103, false otherwise.\n * Returns true for n equal to 104, false otherwise.\n * Returns true for n equal to 105, false otherwise.\n * Returns true for n equal to 106, false otherwise.\n * Returns true for n equal to 107, false otherwise.\n * Returns true for n equal to 108, false otherwise.\n * Returns true for n equal to 109, false otherwise.\n * Returns true for n equal to 110, false otherwise.\n * Returns true for n equal to 111, false otherwise.\n * Returns true for n equal to 112, false otherwise.\n * Returns true for n equal to 113, false otherwise.\n * Returns true for n equal to 114, false otherwise.\n * Returns true for n equal to 115, false otherwise.\n * Returns true for n equal to 116, false otherwise.\n * Returns true for n equal to 117, false otherwise.\n * Returns true for n equal to 118, false otherwise.\n * Returns true for n equal to 119, false otherwise.\n * Returns true for n equal to 120, false otherwise.\n * Returns true for n equal to 121, false otherwise.\n * Returns true for n equal to 122, false otherwise.\n * Returns true for n equal to 123, false otherwise.\n * Returns true for n equal to 124, false otherwise.\n * Returns true for n equal to 125, false otherwise.\n * Returns true for n equal to 126, false otherwise.\n * Returns true for n equal to 127, false otherwise.\n * Returns true for n equal to 128, false otherwise.\n * Returns true for n equal to 129, false otherwise.\n * Returns true for n equal to 130, false otherwise.\n * Returns true for n equal to 131, false otherwise.\n * Returns true for n equal to 132, false otherwise.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  const length = numbers.length;\n  while (i < length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given an input string and a list of characters, return a string where each character in each input string is replaced with the character at the same position in the input string.\n * \n * Examples:\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"Hell Wrd\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HellWrd\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWrd\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * output: \"HelloWorld\"\n * \n * input: \"Hello World\"\n * characters: [\"H\", \"e\", \"l\", \"l\", \"o\"]\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 7 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 4 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "<|endoftext|>/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd')\n  'zbc'\n  */\nconst checkIfVowel = (text) => {\n  let rid = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i).match(/[aeiou]/)) {\n      rid = rid + text.charAt(i);\n    }\n  }\n  return rid;\n};\n\n/*\n  checkIfVowel is a function that takes string and returns string with vowels removed.\n  >>> checkIfVowel('')\n  ''\n  >>> checkIfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> checkIfVowel('abcdef')\n  'bcdf'\n  >>> checkIfVowel('aaaaa')\n  'aaaaa'\n  >>> checkIfVowel('aaBAA')\n  'BAA'\n  >>> checkIfVowel('zbcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV2 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorwayV3([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorwayV3([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorwayV3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorwayV3([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorwayV3([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorwayV3 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV3([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV3([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV3([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV3 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV3([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV3([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV3([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV4 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorwayV4([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorwayV4([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorwayV4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorwayV4([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorwayV4([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorwayV4 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV4([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV4([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV4([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV4 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV4([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV4([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV4([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV5 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorwayV5([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorwayV5([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorwayV5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorwayV5([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorwayV5([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorwayV5 = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV5([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV5([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV5([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorwaysV5 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorwaysV5([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorwaysV5([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorwaysV5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n  return res;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([1,3,5,7,9])\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibs = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(fib(arr[i]));\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if the given string has any non-whitespace characters in it.\n */\nconst hasNonWhitespace = (str) => {\n  return str.match(/[^\\s]+/g);\n};\n\n/**\n * Returns true if the given string has any whitespace characters in it.\n */\nconst hasWhitespace = (str) => {\n  return str.match(/\\S+/g);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumeric = (str) => {\n  return str.match(/[^\\W\\d]+/g);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumeric = (str) => {\n  return str.match(/\\w\\d/g);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlphanumericOrWhitespace = (str) => {\n  return hasAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericOrWhitespace = (str) => {\n  return hasNonAlphanumeric(str) || hasWhitespace(str);\n};\n\n/**\n * Returns true if the given string has any alphanumeric characters in it.\n */\nconst hasAlph", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "<|endoftext|>/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let flat = true;\n  for (let i = 0; i < l.length; i++) {\n    if (flat) {\n      flat = l[i] <= l[i + 1];\n    } else {\n      flat = l[i] < l[i + 1];\n    }\n  }\n  return flat;\n};\n\n/*Return true is list elements are increasing or decreasing.\n  >>> increasing([1, 2, 4, 20])\n  true\n  >>> increasing([1, 20, 4, 10])\n  false\n  >>> increasing([4, 1, 0, -10])\n  true\n  */\nconst increasing = (l) => {\n  let increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (increasing) {\n      increasing = l[i] <= l[i + 1];\n    } else {\n      increasing = l[i] > l[i + 1];\n    }\n  }\n  return increasing;\n};\n\n/*Return true is list elements are decreasing or increasing.\n  >>> decreasing([1, 2, 4, 20])\n  true\n  >>> decreasing([1, 20, 4, 10])\n  false\n  >>> decreasing([4, 1, 0, -10])\n  true\n  */\nconst decreasing = (l) => {\n  let decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (decreasing) {\n      decreasing = l[i] <= l[i + 1];\n    } else {\n      decreasing = l[i] < l[i + 1];\n    }\n  }\n  return decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  true\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  >>> strictly_increasing([4, 1, 10, 0])\n  false\n  >>> strictly_increasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] <= l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  true\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  >>> strictly_decreasing([4, 1, 10, 0])\n  false\n  >>> strictly_decreasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] <= l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  true\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  >>> strictly_decreasing([4, 1, 10, 0])\n  false\n  >>> strictly_decreasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] <= l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  true\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  >>> strictly_increasing([4, 1, 10, 0])\n  false\n  >>> strictly_increasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] <= l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  true\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  >>> strictly_decreasing([4, 1, 10, 0])\n  false\n  >>> strictly_decreasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] <= l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  true\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  >>> strictly_decreasing([4, 1, 10, 0])\n  false\n  >>> strictly_decreasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] <= l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  true\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  >>> strictly_increasing([4, 1, 10, 0])\n  false\n  >>> strictly_increasing([4, 1, 10, -10])\n  false\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] <= l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "<|endoftext|>/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique fine elements for two lists.\n  >>> fine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> fine([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst fine = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i]) && set2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 121, 653]\n  >>> unique([5, 3, 2, 8], [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallChoiceFactor(13195)\n  3\n  >>> smallChoiceFactor(2048)\n  2\n  */\nconst smallChoiceFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorCount(13195)\n  2\n  >>> factorCount(2048)\n  3\n  */\nconst factorCount = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorCountDesc(13195)\n  3\n  >>> factorCountDesc(2048)\n  2\n  */\nconst factorCountDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupes(13195)\n  2\n  >>> factorCountWithDupes(2048)\n  3\n  */\nconst factorCountWithDupes = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in descending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048)\n  2\n  */\nconst factorCountWithDupesDesc = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i += 2;\n  }\n  return count;\n};\n\n/*Return the number of factors of n in ascending order with duplicates. Assume n > 1 and is not a prime.\n  >>> factorCountWithDupesDesc(13195)\n  3\n  >>> factorCountWithDupesDesc(2048", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    } else if (char ==='') {\n      paren_level++;\n    }\n  }\n\n  return paren_stack;\n};\n\nconst isBalanced = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString2 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString3 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString4 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString5 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString6 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString7 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString8 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString9 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString10 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString11 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString12 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString13 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString14 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString15 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString16 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString17 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString18 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString19 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString20 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString21 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString22 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString23 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString24 = (paren_string) => {\n  const paren_stack = parseNestedParens(paren_string);\n  const max_level = paren_stack.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return paren_stack.length === max_level;\n};\n\nconst isBalancedString25", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "<|endoftext|>/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the first element of an array.\n *\n * @param {Array} arr The array to return the first element of.\n * @return {*} The first element of the array.\n */\nconst first = (arr) => {\n  return arr[0];\n};\n\n/**\n * A function that returns the last element of an array.\n *\n * @param {Array} arr The array to return the last element of.\n * @return {*} The last element of the array.\n */\nconst last = (arr) => {\n  return arr[arr.length - 1];\n};\n\n/**\n * A function that returns the index of the first element of an array.\n *\n * @param {Array} arr The array to return the index of first element of.\n * @param {*} item The element to search for.\n * @return {number} The index of the first element of the array.\n */\nconst indexOf = (arr, item) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * A function that returns the index of the last element of an array.\n *\n * @param {Array} arr The array to return the index of last element of.\n * @param {*} item The element to search for.\n * @return {number} The index of the last element of the array.\n */\nconst lastIndexOf = (arr, item) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst all = (arr) => {\n  return arr.length === 0? [] : arr;\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst compact = (arr) => {\n  return arr.filter(Boolean);\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst unique = (arr) => {\n  return arr.filter(function (item, index, self) {\n    return self.indexOf(item) === index;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst flatten = (arr) => {\n  return arr.reduce((acc, val) => acc.concat(Array.isArray(val)? flatten(val) : val), []);\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst uniqueBy = function (arr, fn) {\n  const seen = new Set();\n  return arr.filter(item => {\n    const key = fn(item);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst uniqueWith = (arr, fn) => {\n  const seen = new Set();\n  return arr.filter(item => {\n    const key = fn(item);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortBy = function (arr, fn) {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return -1;\n    }\n    if (aKey > bKey) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortWith = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return -1;\n    }\n    if (aKey > bKey) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortByDescending = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return 1;\n    }\n    if (aKey > bKey) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortWithDescending = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return 1;\n    }\n    if (aKey > bKey) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortByKey = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return -1;\n    }\n    if (aKey > bKey) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortWithKey = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return -1;\n    }\n    if (aKey > bKey) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortByKeyDescending = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = fn(b);\n    if (aKey < bKey) {\n      return 1;\n    }\n    if (aKey > bKey) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/**\n * A function that returns an array of all the elements from an array.\n *\n * @param {Array} arr The array to return all elements of.\n * @return {Array} The array of all the elements of the array.\n */\nconst sortWithKeyDescending = (arr, fn) => {\n  return arr.slice().sort((a, b) => {\n    const aKey = fn(a);\n    const bKey = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i += 1) {\n    const bracket = brackets[i];\n    if (bracket === '(') {\n      stack.push(bracket);\n    } else if (bracket === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== bracket) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', '()'];\n  const invalidStrings = ['Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.'];\n  return validStrings.indexOf(str) >= 0 || invalidStrings.indexOf(str) >= 0;\n};\n\n/**\n * Check whether a string is valid or not.\n * Valid strings are 'true', 'false', 'null', 'undefined', 'NaN', '[]', '{}', '\"\"', and '()'.\n * Invalid strings are 'Infinity', 'NaN', 'undefined', '(', ')', '[', ']', '{', '}', '\"\"', and ''.\n */\nconst isValid = (str) => {\n  const validStrings = ['true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let deriv = [];\n  for (let i = 1; i < xs.length; i++) {\n    deriv.push(xs[i] - xs[i - 1]);\n  }\n  return deriv;\n};\n\n/* Return sum of all elements in array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Return product of all elements in array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* Return mean of all elements in array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.6\n  */\nconst mean = (xs) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* Return median of all elements in array.\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (xs) => {\n  let mid = Math.floor(xs.length / 2);\n  if (xs.length % 2 === 0) {\n    return xs[mid];\n  } else {\n    return (xs[mid - 1] + xs[mid]) / 2;\n  }\n};\n\n/* Return mode of all elements in array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return xs[maxCountIndex];\n};\n\n/* Return standard deviation of all elements in array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  let mean = xs.mean();\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(variance);\n};\n\n/* Return sum of squares of all elements in array.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquares = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 2);\n  }\n  return sum;\n};\n\n/* Return sum of cubes of all elements in array.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubes = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += Math.pow(xs[i], 3);\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array squared.\n  >>> sumSquares([1, 2, 3, 4, 5])\n  5025\n  */\nconst sumSquared = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* Return sum of all elements in array cubed.\n  >>> sumCubes([1, 2, 3, 4, 5])\n  285\n  */\nconst sumCubed = (xs) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes in an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,4,9])\n  25\n  >>> squareSum([1,4,9,16])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25,36])\n  490\n  >>> squareSum([1,4,9,16,25,36,49])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990,1059])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990,1059,1136])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990,1059,1136,1215])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990,1059,1136,1215,1302])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,192,225,256,289,324,361,398,445,490,564,623,672,739,801,860,929,990,1059,1136,1215,1302,1373])\n  490\n  >>> squareSum([1,4,9,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "<|endoftext|>/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  if (shift === 0) return str; // shift === 0\n  const digits = str.split('');\n  for (let i = 0; i < shift; i++) {\n    digits[i] = digits[i + shift];\n  }\n  return digits.reverse().join('');\n};\n\n/**\n * Round a number to a given precision\n * @param {number} num\n * @param {number} precision\n * @returns {number}\n */\nconst round = (num, precision) => {\n  const factor = Math.pow(10, precision);\n  return Math.round(num * factor) / factor;\n};\n\n/**\n * Round a number to a given precision\n * @param {number} num\n * @param {number} precision\n * @returns {number}\n */\nconst roundTo = (num, precision) => {\n  const factor = Math.pow(10, precision);\n  return Math.round(num / factor) * factor;\n};\n\n/**\n * Check if a number is even\n * @param {number} num\n * @returns {boolean}\n */\nconst isEven = num => num % 2 === 0;\n\n/**\n * Check if a number is odd\n * @param {number} num\n * @returns {boolean}\n */\nconst isOdd = num => num % 2!== 0;\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime2 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime3 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime4 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime5 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime6 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime7 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime8 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime9 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime10 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime11 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime12 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime13 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime14 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime15 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime16 = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n * Check if a number is prime\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAll = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char > 64 && char < 91) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumAllLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char < 97 && char > 64) sum += char;\n    if (char < 97 && char > 64) sum += char;\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apple", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const evenValues = arr\n   .map((n) => n % 2)\n   .filter((n) => n!== 0)\n   .sort((a, b) => a - b)\n  const smallestEvenValue = evenValues[0]\n  const smallestIndex = evenValues.findIndex((n) => n === smallestEvenValue)\n  return smallestIndex === -1? [] : [smallestEvenValue, smallestIndex]\n}\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOdds = (arr) => {\n  const oddValues = arr\n   .map((n) => n % 2)\n   .filter((n) => n!== 0)\n   .sort((a, b) => b - a)\n  const smallestOddValue = oddValues[0]\n  const smallestIndex = oddValues.findIndex((n) => n === smallestOddValue)\n  return smallestIndex === -1? [] : [smallestOddValue, smallestIndex]\n}\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOddsIndex = (arr) => {\n  const oddValues = arr\n   .map((n) => n % 2)\n   .filter((n) => n!== 0)\n   .sort((a, b) => b - a)\n  const smallestOddValue = oddValues[0]\n  const smallestIndex = oddValues.findIndex((n) => n === smallestOddValue)\n  return smallestIndex === -1? [] : [smallestOddValue, smallestIndex]\n}\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOddsIndexAndValue = (arr) => {\n  const oddValues = arr\n   .map((n) => n % 2)\n   .filter((n) => n!== 0)\n   .sort((a, b) => b - a)\n  const smallestOddValue = oddValues[0]\n  const smallestIndex = oddValues.findIndex((n) => n === smallestOddValue)\n  return smallestIndex === -1? [] : [smallestOddValue, smallestIndex]\n}\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n      max = i;\n      freq = 1;\n    }\n  }\n  return freq > lst.length? -1 : max;\n};\n\n/*\n  You are given a list of positive integers. Return the sum of all integers in the list, including the\n  integers in the list itself.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of positive integers. Return the product of all integers in the list, including the\n  integers in the list itself.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of integers and a number k. Return the first k integers in the list that add up to a\n  number equal to a given number k. For example, given the list [10, 15, 3, 7] and k of 7, you should return\n  the first two values in the list that add up to 7. Since the list contains at least two elements, the first\n  two elements are the first two values in the list that add up to 7.\n  Examples:\n      firstK([10, 15, 3, 7], 7) == [10, 15]\n      firstK([10, 15, 3, 7], 10) == [10, 15, 3]\n      firstK([10, 15, 3, 7], 15) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 16) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 18) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 19) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 20) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 21) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 22) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 23) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 24) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 25) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 26) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 27) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 28) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 29) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 30) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 31) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 32) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 33) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 34) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 35) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 36) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 37) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 38) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 39) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 40) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 41) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 42) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 43) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 44) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 45) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 46) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 47) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 48) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 49) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 50) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 51) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 52) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 53) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 54) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 55) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 56) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 57) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 58) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 59) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 60) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 61) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 62) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 63) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 64) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 65) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 66) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 67) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 68) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 69) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 70) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 71) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 72) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 73) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 74) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 75) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 76) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 77) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 78) == [10, 15, 3, 7]\n      firstK([10, 15, 3, 7], 79) == [10, 15, 3, 7]\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given a string, return string with each letter capitalized.\n  Capitalization only applies to first letter of each word.\n\n  Examples:\n  capitalize('hello') == 'Hello'\n  capitalize('hello world') == 'Hello World'\n  capitalize('hello   world') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World'\n  capitalize('hello   world ') == 'Hello World", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1;\n  const b2 = b1 + c1;\n  const c2 = c1 + a1;\n  return a2 > b2 && a2 > c2? a2 : b2 > c2? b2 : c2;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  if (q.length <= 1) return true;\n  if (q.length <= w) return true;\n  if (q.length <= w) return true;\n  const maxWeight = q.reduce((acc, curr) => acc + curr, 0);\n  const sumOfElements = q.reduce((acc, curr) => acc + curr, 0);\n  return sumOfElements <= maxWeight;\n};\n\n// ==========================================\n// === PART 2: SOLVING THE RISK FACTORS ===\n// ==========================================\n\n// In this section, you will write the function maxRiskFactor, which takes in a list of integers and returns the maximum risk factor of any palindromic sublist of that list.\n// Risk factors are defined as follows:\n// Risk factors are the largest possible risk factor of a palindromic sublist of a list of integers. For example, the maximum risk factor of the list [4, 9, 9, 4, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 6\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  smallChange([1, 2, 3, 2, 1]) == 1\n  smallChange([1,2,3]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  if (len === len2) {\n    return lst1\n  }\n  if (len < len2) {\n    return lst1\n  }\n  return lst2\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') ➞ 'olleh'\n  reversed('hello') �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split('');\n  let hexNumArr2 = [];\n  let hexNumArr3 = [];\n  let hexNumArr4 = hexNumArr.map((item) => {\n    if (item === 'A') {\n      hexNumArr2.push(2);\n    } else if (item === 'B') {\n      hexNumArr2.push(3);\n    } else if (item === 'C') {\n      hexNumArr2.push(5);\n    } else if (item === 'D') {\n      hexNumArr2.push(7);\n    } else if (item === 'E') {\n      hexNumArr2.push(11);\n    } else if (item === 'F') {\n      hexNumArr2.push(13);\n    }\n    return hexNumArr2;\n  });\n  let hexNumArr5 = hexNumArr4.map((item) => {\n    if (item === 2) {\n      hexNumArr3.push(2);\n    } else if (item === 3) {\n      hexNumArr3.push(3);\n    } else if (item === 5) {\n      hexNumArr3.push(5);\n    } else if (item === 7) {\n      hexNumArr3.push(7);\n    } else if (item === 11) {\n      hexNumArr3.push(11);\n    } else if (item === 13) {\n      hexNumArr3.push(13);\n    } else if (item === 17) {\n      hexNumArr3.push(17);\n    } else if (item === 19) {\n      hexNumArr3.push(19);\n    } else if (item === 23) {\n      hexNumArr3.push(23);\n    } else if (item === 29) {\n      hexNumArr3.push(29);\n    } else if (item === 31) {\n      hexNumArr3.push(31);\n    } else if (item === 37) {\n      hexNumArr3.push(37);\n    } else if (item === 41) {\n      hexNumArr3.push(41);\n    } else if (item === 43) {\n      hexNumArr3.push(43);\n    } else if (item === 47) {\n      hexNumArr3.push(47);\n    } else if (item === 53) {\n      hexNumArr3.push(53);\n    } else if (item === 59) {\n      hexNumArr3.push(59);\n    } else if (item === 61) {\n      hexNumArr3.push(61);\n    } else if (item === 67) {\n      hexNumArr3.push(67);\n    } else if (item === 71) {\n      hexNumArr3.push(71);\n    } else if (item === 73) {\n      hexNumArr3.push(73);\n    } else if (item === 79) {\n      hexNumArr3.push(79);\n    } else if (item === 83) {\n      hexNumArr3.push(83);\n    } else if (item === 89) {\n      hexNumArr3.push(89);\n    } else if (item === 97) {\n      hexNumArr3.push(97);\n    } else if (item === 101) {\n      hexNumArr3.push(101);\n    } else if (item === 103) {\n      hexNumArr3.push(103);\n    } else if (item === 107) {\n      hexNumArr3.push(107);\n    } else if (item === 109) {\n      hexNumArr3.push(109);\n    } else if (item === 113) {\n      hexNumArr3.push(113);\n    } else if (item === 127) {\n      hexNumArr3.push(127);\n    }\n    return hexNumArr3;\n  });\n  let hexNumArr6 = hexNumArr5.map((item) => {\n    if (item === 2) {\n      hexNumArr3.push(2);\n    } else if (item === 3) {\n      hexNumArr3.push(3);\n    } else if (item === 5) {\n      hexNumArr3.push(5);\n    } else if (item === 7) {\n      hexNumArr3.push(7);\n    } else if (item === 11) {\n      hexNumArr3.push(11);\n    } else if (item === 13) {\n      hexNumArr3.push(13);\n    } else if (item === 17) {\n      hexNumArr3.push(17);\n    } else if (item === 19) {\n      hexNumArr3.push(19);\n    } else if (item === 23) {\n      hexNumArr3.push(23);\n    } else if (item === 29) {\n      hexNumArr3.push(29);\n    } else if (item === 31) {\n      hexNumArr3.push(31);\n    } else if (item === 37) {\n      hexNumArr3.push(37);\n    } else if (item === 41) {\n      hexNumArr3.push(41);\n    } else if (item === 43) {\n      hexNumArr3.push(43);\n    } else if (item === 47) {\n      hexNumArr3.push(47);\n    } else if (item === 53) {\n      hexNumArr3.push(53);\n    } else if (item === 59) {\n      hexNumArr3.push(59);\n    } else if (item === 61) {\n      hexNumArr3.push(61);\n    } else if (item === 67) {\n      hexNumArr3.push(67);\n    } else if (item === 71) {\n      hexNumArr3.push(71);\n    } else if (item === 73) {\n      hexNumArr3.push(73);\n    } else if (item === 79) {\n      hexNumArr3.push(79);\n    } else if (item === 83) {\n      hexNumArr3.push(83);\n    } else if (item === 89) {\n      hexNumArr3.push(89);\n    } else if (item === 97) {\n      hexNumArr3.push(97);\n    } else if (item === 101) {\n      hexNumArr3.push(101);\n    } else if (item === 103) {\n      hexNumArr3.push(103);\n    } else if (item === 107) {\n      hexNumArr3.push(107);\n    } else if (item === 109) {\n      hexNumArr3.push(109);\n    } else if (item === 113) {\n      hexNumArr3.push(113);\n    } else if (item === 127) {\n      hexNumArr3.push(127);\n    }\n    return hexNumArr3;\n  });\n  let hexNumArr7 = hexNumArr6.map((item) => {\n    if (item === 2) {\n      hexNumArr3.push(2);\n    } else if (item === 3) {\n      hexNumArr3.push(3);\n    } else if (item === 5) {\n      hexNumArr3.push(5);\n    } else if (item === 7) {\n      hexNumArr3.push(7);\n    } else if (item === 11) {\n      hexNumArr3.push(11);\n    } else if (item === 13) {\n      hexNumArr3.push(13);\n    } else if (item === 17) {\n      hexNumArr3.push(17);\n    } else if (item === 19) {\n      hexNumArr3.push(19);\n    } else if (item === 23) {\n      hexNumArr3.push(23);\n    } else if (item === 29) {\n      hexNumArr3.push(29);\n    } else if (item === 31) {\n      hexNumArr3.push(31);\n    } else if (item === 37) {\n      hexNumArr3.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let remainder;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = decimal / 2;\n    binary = remainder + binary;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  Examples:\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  countChars('abracadabra') // returns \"aabbccddeeff\"\n  */\nconst countChars = (str) => {\n  let charCounts = {};\n  for (let i = 0; i < str.length; i++) {\n    charCounts[str[i]] = charCounts[str[i]]? charCounts[str[i]] + 1 : 1;\n  }\n  let charCountString = '';\n  for (let char in charCounts) {\n    charCountString += char;\n  }\n  return charCountString;\n};\n\n/*\n  Write a function that will take a string and return a string where each character is the\n  number of times that character appears in the string.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    const nextNumber = numbers[i + 1];\n    sum += currentNumber * nextNumber;\n    product *= currentNumber;\n  }\n  return [sum, product];\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex2 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex3 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex4 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex5 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex6 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex7 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex8 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex9 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex10 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex11 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex12 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex13 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex14 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex15 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex16 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex17 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex18 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex19 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex20 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex21 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n// Given a list of integers, return a new list containing all the integers in the original list except the one at index position\nconst removeAtIndex22 = (numbers, index) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i!== index) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => true\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters(a) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n  isOnlyLetters() => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abz) => false\n  isOnlyLetters(z) => false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((acc, val) => acc + val, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesDiff = gradesSum - gradesAverage;\n\n  const gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade - gradesAverage).toFixed(2) + '+';\n    }\n    if (grade > gradesAverage && grade <= gradesSum) {\n      return (grade - gradesAverage).toFixed(2) + '-';\n    }\n    if (grade > gradesSum) {\n      return (grade - gradesSum).toFixed(2) + '0';\n    }\n  });\n\n  return gradesLetter;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the even numbers in that array. For example, [1, 2, 3] returns [1, 3].\n*/\nconst evenNumbers = (arr) => {\n  return arr.filter(x => x % 2 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the odd numbers in that array. For example, [1, 2, 3] returns [1, 3].\n*/\nconst oddNumbers = (arr) => {\n  return arr.filter(x => x % 2!== 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 7 in that array. For example, [1, 2, 3] returns\n  [1, 3, 7].\n*/\nconst divisibleBy7 = (arr) => {\n  return arr.filter(x => x % 7 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 in that array. For example, [1, 2, 3] returns\n  [1, 3, 9].\n*/\nconst divisibleBy3 = (arr) => {\n  return arr.filter(x => x % 3 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 5 in that array. For example, [1, 2, 3] returns\n  [1, 3, 5].\n*/\nconst divisibleBy5 = (arr) => {\n  return arr.filter(x => x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 7 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And7 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 7 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 5 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And5 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 7 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And7And5 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 7 === 0 && x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And5 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0 && x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And7 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0 && x % 7 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And7And5 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0 && x % 7 === 0 && x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And7And5And3 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0 && x % 7 === 0 && x % 5 === 0 && x % 3 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And7And5And3And5 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % 3 === 0 && x % 7 === 0 && x % 5 === 0 && x % 3 === 0 && x % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 30 and divisible by 3 in that array. For\n  example, [1, 2, 3] returns [1, 3, 30].\n*/\nconst divisibleBy30And3And7And5And3And7 = (arr) => {\n  return arr.filter(x => x % 30 === 0 && x % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let primeNumbers = []\n  let primeNumbersLength = []\n  let primeNumbersLengthLength = []\n  let primeNumbersLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = []\n  let primeNumbersLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of trailing zeroes in n.\n*/\nconst countTrailingZeroes = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of leading zeroes in n.\n*/\nconst countLeadingZeroes = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 2.\n*/\nconst countDigitsInBase2 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 8.\n*/\nconst countDigitsInBase8 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 8;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 16.\n*/\nconst countDigitsInBase16 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 16;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given integer in base 10.\n*/\nconst countDigitsInBase10 = (n) => {\n  let count = 0;\n  while (n!== 0) {\n    n /= 10;\n    count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let even = []\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0){\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst lend2 = (lst) => {\n  let odd = []\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 1){\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt = (lst, index) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== index){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt2([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt2 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt3([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt3 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 1){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt4([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt4 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 2){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt5([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt5 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 3){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt6([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt6 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 4){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt7([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt7 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 5){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt8([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt8 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 6){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt9([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt9 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 7){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt10([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt10 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 8){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt11([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt11 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 9){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt12([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt12 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 10){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt13([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt13 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 11){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the list except the element at index index..\n\n\n  Examples:\n      removeAt14([4, 2, 6, 7], 2) ==> [4, 6, 7]\n  */\nconst removeAt14 = (lst) => {\n  let newList = []\n  for(let i = 0; i < lst.length; i++){\n    if(i!== lst.length - 12){\n      newList.push(lst[i])\n    }\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. return a new list that is the concatenation of all elements in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => a - b);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const chars = word.split('');\n    chars.sort((a, b) => b - a);\n    return chars.join('');\n  });", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const result = [];\n  const rows = lst.map(row => row.map(x => [x, x]));\n  const sortedRows = sortRows(rows);\n  const sortedRowsReversed = sortRowsReversed(sortedRows);\n  const sortedRowsReversedRows = sortedRowsReversed.map(row => row.map(x => [x, x]));\n  \n  sortedRowsReversedRows.forEach((row, i) => {\n    const sortedRow = sortRow(row);\n    const sortedRowReversed = sortRowReversed(sortedRow);\n    \n    const sortedRowReversedRow = sortedRowReversed.map(row => row.map(x => [x, x]));\n    \n    sortedRowReversedRow.forEach((row, j) => {\n      const sortedRowReversedRow = sortRowReversed(row);\n      const sortedRowReversedRowReversed = sortRowReversed(sortedRowReversedRow);\n      \n      const sortedRowReversedRowReversedRow = sortedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n      \n      sortedRowReversedRowReversedRow.forEach((row, k) => {\n        const sortedRowReversedRowReversedRow = sortRowReversed(row);\n        const sortedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRow);\n        \n        const sortedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n        \n        sortedRowReversedRowReversedRowReversedRow.forEach((row, l) => {\n          const sortedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n          const sortedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRow);\n          \n          const sortedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n          \n          sortedRowReversedRowReversedRowReversedRowReversedRow.forEach((row, m) => {\n            const sortedRowReversedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n            const sortedRowReversedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRowReversedRow);\n            \n            const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n            \n            sortedRowReversedRowReversedRowReversedRowReversedRowReversedRow.forEach((row, n) => {\n              const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n              const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRowReversedRowReversedRow);\n              \n              const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n              \n              sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow.forEach((row, o) => {\n                const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n                const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow);\n                \n                const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n                \n                sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow.forEach((row, p) => {\n                  const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n                  const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed);\n                  \n                  const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed.map(row => row.map(x => [x, x]));\n                  \n                  sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow.forEach((row, q) => {\n                    const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortRowReversed(row);\n                    const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed = sortRowReversed(sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed);\n                    \n                    const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversed;\n                    \n                    const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow;\n                    \n                    const sortedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRowReversedRow = sortedRowReversedRowReversedRowReversedRowReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  // Your code here\n  const sum = array.reduce((acc, val) => acc + val, 0);\n  const isOdd = (sum % 2 === 1);\n  const isEven = (sum % 2 === 0);\n  if (isOdd) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\nexport { sortArray };\n</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a tags=javascript,arrays,sorting |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays,sorting |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,arrays,sorting |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let isOdd = (sum % 2 === 1);\n  let isEven = (sum % 2 === 0);\n  if (isOdd) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b - a);\n  }\n  return arr;\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 6]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays,sorting |>\n<code>\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return newString;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt('hi') returns 'lm'\n  encryptDecrypt('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt('gf') returns 'kj'\n  encryptDecrypt('et') returns 'ix'\n  */\nconst encryptDecrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt2 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt2('hi') returns 'lm'\n  encryptDecrypt2('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt2('gf') returns 'kj'\n  encryptDecrypt2('et') returns 'ix'\n  */\nconst encryptDecrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt3 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt3('hi') returns 'lm'\n  encryptDecrypt3('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt3('gf') returns 'kj'\n  encryptDecrypt3('et') returns 'ix'\n  */\nconst encryptDecrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt4 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt4('hi') returns 'lm'\n  encryptDecrypt4('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt4('gf') returns 'kj'\n  encryptDecrypt4('et') returns 'ix'\n  */\nconst encryptDecrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt5 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt5('hi') returns 'lm'\n  encryptDecrypt5('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt5('gf') returns 'kj'\n  encryptDecrypt5('et') returns 'ix'\n  */\nconst encryptDecrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt6 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt6('hi') returns 'lm'\n  encryptDecrypt6('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt6('gf') returns 'kj'\n  encryptDecrypt6('et') returns 'ix'\n  */\nconst encryptDecrypt6 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2);\n  }\n  return newString;\n};\n\n/*Create a function encryptDecrypt7 that takes a string as an argument and\n  returns a string encrypted or decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt7('hi') returns 'lm'\n  encryptDecrypt7('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt7('gf') returns 'kj'\n  encryptDecrypt7('et') returns 'ix'\n  */\nconst encryptDecrypt7 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n  }\n  return newString;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n      currentIndex = i;\n    }\n  }\n  while (currentIndex < numbers.length - 1) {\n    if (numbers[currentIndex + 1] > currentMax) {\n      currentMax = numbers[currentIndex + 1];\n      currentIndex = currentIndex + 1;\n    } else {\n      result.push(currentMax);\n      currentMax = numbers[currentIndex];\n      currentIndex = currentIndex + 1;\n    }\n  }\n  result.push(currentMax);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolledMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n      currentIndex = i;\n    }\n  }\n  while (currentIndex < numbers.length - 1) {\n    if (numbers[currentIndex + 1] < currentMin) {\n      currentMin = numbers[currentIndex + 1];\n      currentIndex = currentIndex + 1;\n    } else {\n      result.push(currentMin);\n      currentMin = numbers[currentIndex];\n      currentIndex = currentIndex + 1;\n    }\n  }\n  result.push(currentMin);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolledAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolledMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolledVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolledVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length));\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolledVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n    sum = currentSum;\n    currentSum = numbers[i];\n    currentIndex = i;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  const [first, second] = lst;\n  return second < first? second : first;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains all the integers up to and including the first non-repeating integer. \n  \n  containsAll([1, 2, 3, 4, 5], 1) -> true\n  containsAll([1, 2, 3, 4, 5], 2) -> true\n  containsAll([1, 2, 3, 4, 5], 3) -> true\n  containsAll([1, 2, 3, 4, 5], 4) -> true\n  containsAll([1, 2, 3, 4, 5], 5) -> true\n  containsAll([1, 2, 3, 4, 5], 6) -> false\n  containsAll([1, 2, 3, 4, 5], 7) -> false\n  containsAll([1, 2, 3, 4, 5], 8) -> false\n  containsAll([1, 2, 3, 4, 5], 9) -> false\n  containsAll([1, 2, 3, 4, 5], 10) -> false\n  containsAll([1, 2, 3, 4, 5], 11) -> false\n  containsAll([1, 2, 3, 4, 5], 12) -> false\n  containsAll([1, 2, 3, 4, 5], 13) -> false\n  containsAll([1, 2, 3, 4, 5], 14) -> false\n  containsAll([1, 2, 3, 4, 5], 15) -> false\n  containsAll([1, 2, 3, 4, 5], 16) -> false\n  containsAll([1, 2, 3, 4, 5], 17) -> false\n  containsAll([1, 2, 3, 4, 5], 18) -> false\n  containsAll([1, 2, 3, 4, 5], 19) -> false\n  containsAll([1, 2, 3, 4, 5], 20) -> false\n  containsAll([1, 2, 3, 4, 5], 21) -> false\n  containsAll([1, 2, 3, 4, 5], 22) -> false\n  containsAll([1, 2, 3, 4, 5], 23) -> false\n  containsAll([1, 2, 3, 4, 5], 24) -> false\n  containsAll([1, 2, 3, 4, 5], 25) -> false\n  containsAll([1, 2, 3, 4, 5], 26) -> false\n  containsAll([1, 2, 3, 4, 5], 27) -> false\n  containsAll([1, 2, 3, 4, 5], 28) -> false\n  containsAll([1, 2, 3, 4, 5], 29) -> false\n  containsAll([1, 2, 3, 4, 5], 30) -> false\n  containsAll([1, 2, 3, 4, 5], 31) -> false\n  containsAll([1, 2, 3, 4, 5], 32) -> false\n  containsAll([1, 2, 3, 4, 5], 33) -> false\n  containsAll([1, 2, 3, 4, 5], 34) -> false\n  containsAll([1, 2, 3, 4, 5], 35) -> false\n  containsAll([1, 2, 3, 4, 5], 36) -> false\n  containsAll([1, 2, 3, 4, 5], 37) -> false\n  containsAll([1, 2, 3, 4, 5], 38) -> false\n  containsAll([1, 2, 3, 4, 5], 39) -> false\n  containsAll([1, 2, 3, 4, 5], 40) -> false\n  containsAll([1, 2, 3, 4, 5], 41) -> false\n  containsAll([1, 2, 3, 4, 5], 42) -> false\n  containsAll([1, 2, 3, 4, 5], 43) -> false\n  containsAll([1, 2, 3, 4, 5], 44) -> false\n  containsAll([1, 2, 3, 4, 5], 45) -> false\n  containsAll([1, 2, 3, 4, 5], 46) -> false\n  containsAll([1, 2, 3, 4, 5], 47) -> false\n  containsAll([1, 2, 3, 4, 5], 48) -> false\n  containsAll([1, 2, 3, 4, 5], 49) -> false\n  containsAll([1, 2, 3, 4, 5], 50) -> false\n  containsAll([1, 2, 3, 4, 5], 51) -> false\n  containsAll([1, 2, 3, 4, 5], 52) -> false\n  containsAll([1, 2, 3, 4, 5], 53) -> false\n  containsAll([1, 2, 3, 4, 5], 54) -> false\n  containsAll([1, 2, 3, 4, 5], 55) -> false\n  containsAll([1, 2, 3, 4, 5], 56) -> false\n  containsAll([1, 2, 3, 4, 5], 57) -> false\n  containsAll([1, 2, 3, 4, 5], 58) -> false\n  containsAll([1, 2, 3, 4, 5], 59) -> false\n  containsAll([1, 2, 3, 4, 5], 60) -> false\n  containsAll([1, 2, 3, 4, 5], 61) -> false\n  containsAll([1, 2, 3, 4, 5], 62) -> false\n  containsAll([1, 2, 3, 4, 5], 63) -> false\n  containsAll([1, 2, 3, 4, 5], 64) -> false\n  containsAll([1, 2, 3, 4, 5], 65) -> false\n  containsAll([1, 2, 3, 4, 5], 66) -> false\n  containsAll([1, 2, 3, 4, 5], 67) -> false\n  containsAll([1, 2, 3, 4, 5], 68) -> false\n  containsAll([1, 2, 3, 4, 5], 69) -> false\n  containsAll([1, 2, 3, 4, 5], 70) -> false\n  containsAll([1, 2, 3, 4, 5], 71) -> false\n  containsAll([1, 2, 3, 4, 5], 72) -> false\n  containsAll([1, 2, 3, 4, 5], 73) -> false\n  containsAll([1, 2, 3, 4, 5], 74) -> false\n  containsAll([1, 2, 3, 4, 5], 75) -> false\n  containsAll([1, 2, 3, 4, 5], 76) -> false\n  containsAll([1, 2, 3, 4, 5], 77) -> false\n  containsAll([1, 2, 3, 4, 5], 78) -> false\n  containsAll([1, 2, 3, 4, 5], 79) -> false\n  containsAll([1, 2, 3, 4, 5], 80) -> false\n  containsAll([1, 2, 3, 4, 5], 81) -> false\n  containsAll([1, 2, 3, 4, 5], 82) -> false\n  containsAll([1, 2, 3, 4, 5], 83) -> false\n  containsAll([1, 2, 3, 4, 5], 84) -> false\n  containsAll([1, 2, 3, 4, 5], 85) -> false\n  containsAll([1, 2, 3, 4, 5], 86) -> false\n  containsAll([1, 2, 3, 4, 5], 87) -> false\n  containsAll([1, 2, 3, 4, 5], 88) -> false\n  containsAll([1, 2, 3, 4, 5], 89) -> false\n  containsAll([1, 2, 3, 4, 5], 90) -> false\n  containsAll([1, 2, 3, 4, 5], 91) -> false\n  containsAll([1, 2, 3, 4, 5], 92) -> false\n  containsAll([1, 2, 3, 4, 5], 93) -> false\n  containsAll([1, 2, 3, 4, 5], 94) -> false\n  containsAll([1, 2, 3, 4, 5], 95) -> false\n  containsAll([1, 2, 3, 4, 5], 96) -> false\n  containsAll([1, 2, 3, 4, 5], 97) -> false\n  containsAll([1, 2, 3, 4, 5], 98) -> false\n  containsAll([1, 2, 3, 4, 5], 99) -> false\n  containsAll([1, 2, 3, 4, 5], 100) -> false\n  containsAll([1, 2, 3, 4, 5], 101) -> false\n  containsAll([1, 2, 3, 4, 5], 102) -> false\n  containsAll([1, 2, 3, 4, 5], 103) -> false\n  containsAll([1, 2, 3, 4, 5], 104) -> false\n  containsAll([1, 2, 3, 4, 5], 105) -> false\n  containsAll([1, 2, 3, 4, 5], 106) -> false\n  containsAll([1, 2, 3, 4, 5], 107) -> false\n  containsAll([1, 2, 3, 4, 5], 108) -> false\n  containsAll([1, 2, 3, 4, 5], 109) -> false\n  containsAll([1, 2, 3, 4, 5], 110) -> false\n  containsAll([1, 2, 3, 4, 5], 111) -> false\n  containsAll([1, 2, 3, 4, 5], 112) -> false\n  containsAll([1, 2, 3, 4, 5], 113) -> false\n  containsAll([1, 2, 3, 4, 5], 114) -> false\n  containsAll([1, 2, 3, 4, 5], 115) -> false\n  containsAll([1, 2, 3, 4, 5], 116) -> false\n  containsAll([1, 2, 3, 4, 5], 117) -> false\n  containsAll([1, 2, 3, 4, 5], 118) -> false\n  containsAll([1, 2, 3, 4, 5], 119) -> false\n  containsAll([1, 2, 3, 4, 5], 120) -> false\n  containsAll([1, 2, 3, 4, 5], 121) -> false\n  containsAll([1, 2, 3, 4, 5], 122) -> false\n  containsAll([1, 2, 3, 4, 5], 123) -> false\n  containsAll([1, 2, 3, 4, 5], 124) -> false\n  containsAll([1, 2, 3, 4, 5], 125) -> false\n  containsAll([1, 2, 3, 4, 5], 126) -> false\n  containsAll([1, 2, 3, 4, 5], 127) -> false\n  containsAll([1, 2, 3, 4, 5], 128) -> false\n  containsAll([1, 2, 3, 4, 5], 129) -> false\n  containsAll([1, 2, 3, 4, 5], 130) -> false\n  containsAll([1, 2, 3, 4, 5], 131) -> false\n  containsAll([1, 2, 3, 4, 5], 132) -> false\n  containsAll([1, 2, 3, 4, 5], 133) -> false\n  containsAll([1, 2, 3, 4, 5], 134) -> false\n  containsAll([1, 2, 3, 4, 5], 135) -> false\n  containsAll([1, 2, 3, 4, 5], 136) -> false\n  containsAll([1, 2, 3, 4, 5], 137) -> false\n  containsAll([1, 2, 3, 4, 5], 138) -> false\n  contains", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anyNonInt(5, 2, 7) ➞ true\n  anyNonInt(3, 2, 2) ➞ false\n  anyNonInt(3, -2, 1) ➞ true\n  anyNonInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonInt(5, 2, 7) ➞ true\n  anyNonInt(3, 2, 2) ➞ false\n  anyNonInt(3, -2, 1) ➞ true\n  anyNonInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns false in any other cases.\n  Examples\n  anyNonNegativeInt(5, 2, 7) ➞ true\n  anyNonNegativeInt(3, 2, 2) ➞ false\n  anyNonNegativeInt(3, -2, 1) ➞ true\n  anyNonNegativeInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegativeInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative integers.\n  Returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      encodedMessage += letter\n      continue\n    }\n    \n    let letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n    letterIndex = letterIndex % 26\n    letterIndex = letterIndex + 2\n    \n    encodedMessage += String.fromCharCode(letterIndex + 65)\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of its sum.\n\n  Examples:\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13,17] the output should be 2\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47] the output should be 7\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49] the output should be 11\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59] the output should be 13\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67] the output should be 17\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79] the output should be 19\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89] the output should be 23\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97] the output should be 29\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 31\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 33\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,8", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerDownTo(5) => [2,3]\n  considerDownTo(11) => [2,3,5,7]\n  considerDownTo(0) => []\n  considerDownTo(20) => [2,3,5,7,11,13,17,19]\n  considerDownTo(1) => []\n  considerDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerDownTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum\n  of all the integers in the array.\n  for example:\n  sumOfArray([2,3,5,7]) => 15\n  sumOfArray([2,3,5,7,11,13,17]) => 23\n  sumOfArray([2,3,5,7,11,13,17,19]) => 29\n  sumOfArray([2,3,5,7,11,13,17,19,23,29]) => 55\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37]) => 59\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) => 61\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => 103\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]) => 1041\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]) => 1041\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum\n  of all the integers in the array.\n  for example:\n  sumOfArray([2,3,5,7]) => 15\n  sumOfArray([2,3,5,7,11,13,17]) => 23\n  sumOfArray([2,3,5,7,11,13,17,19,23,29]) => 55\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37]) => 59\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) => 61\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => 103\n  sumOfArray([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  let product = 0;\n  \n  if(a > 0 && b > 0) {\n    product = a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= b % 10;\n    product *= a % 10;\n    product *= ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 2\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b' || s[i] === 'C' || s[i] === 'c' || s[i] === 'D' || s[i] === 'd' || s[i] === 'E' || s[i] === 'e' || s[i] === 'F' || s[i] === 'f' || s[i] === 'G' || s[i] === 'g' || s[i] === 'H' || s[i] === 'h' || s[i] === 'I' || s[i] === 'i' || s[i] === 'J' || s[i] === 'j' || s[i] === 'K' || s[i] === 'k' || s[i] === 'L' || s[i] === 'l' || s[i] === 'M' || s[i] ==='m' || s[i] === 'N' || s[i] === 'n' || s[i] === 'O' || s[i] === 'o' || s[i] === 'P' || s[i] === 'p' || s[i] === 'Q' || s[i] === 'q' || s[i] === 'R' || s[i] === 'r' || s[i] === 'S' || s[i] ==='s' || s[i] === 'T' || s[i] === 't' || s[i] === 'U' || s[i] === 'u' || s[i] === 'V' || s[i] === 'v' || s[i] === 'W' || s[i] === 'w' || s[i] === 'X' || s[i] === 'x' || s[i] === 'Y' || s[i] === 'y' || s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerVowels('aBCdEf') returns 3\n  considerVowels('abcdefg') returns 0\n  considerVowels('dBBE') returns 0\n  */\nconst considerVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b' || s[i] === 'C' || s[i] === 'c' || s[i] === 'D' || s[i] === 'd' || s[i] === 'E' || s[i] === 'e' || s[i] === 'F' || s[i] === 'f' || s[i] === 'G' || s[i] === 'g' || s[i] === 'H' || s[i] === 'h' || s[i] === 'I' || s[i] === 'i' || s[i] === 'J' || s[i] === 'j' || s[i] === 'K' || s[i] === 'k' || s[i] === 'L' || s[i] === 'l' || s[i] === 'M' || s[i] ==='m' || s[i] === 'N' || s[i] === 'n' || s[i] === 'O' || s[i] === 'o' || s[i] === 'P' || s[i] === 'p' || s[i] === 'Q' || s[i] === 'q' || s[i] === 'R' || s[i] === 'r' || s[i] === 'S' || s[i] ==='s' || s[i] === 'T' || s[i] === 't' || s[i] === 'U' || s[i] === 'u' || s[i] === 'V' || s[i] === 'v' || s[i] === 'W' || s[i] === 'w' || s[i] === 'X' || s[i] === 'x' || s[i] === 'Y' || s[i] === 'y' || s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  considerVowelsOdd('aBCdEf') returns 2\n  considerVowelsOdd('abcdefg') returns 0\n  considerVowelsOdd('dBBE') returns 0\n  */\nconst considerVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonantsOdd('aBCdEf') returns 0\n  considerConsonantsOdd('abcdefg') returns 0\n  considerConsonantsOdd('dBBE') returns 0\n  */\nconst considerConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b' || s[i] === 'C' || s[i] === 'c' || s[i] === 'D' || s[i] === 'd' || s[i] === 'E' || s[i] === 'e' || s[i] === 'F' || s[i] === 'f' || s[i] === 'G' || s[i] === 'g' || s[i] === 'H' || s[i] === 'h' || s[i] === 'I' || s[i] === 'i' || s[i] === 'J' || s[i] === 'j' || s[i] === 'K' || s[i] === 'k' || s[i] === 'L' || s[i] === 'l' || s[i] === 'M' || s[i] ==='m' || s[i] === 'N' || s[i] === 'n' || s[i] === 'O' || s[i] === 'o' || s[i] === 'P' || s[i] === 'p' || s[i] === 'Q' || s[i] === 'q' || s[i] === 'R' || s[i] === 'r' || s[i] === 'S' || s[i] ==='s' || s[i] === 'T' || s[i] === 't' || s[i] === 'U' || s[i] === 'u' || s[i] === 'V' || s[i] === 'v' || s[i] === 'W' || s[i] === 'w' || s[i] === 'X' || s[i] === 'x' || s[i] === 'Y' || s[i] === 'y' || s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  considerVowelsOddEven('aBCdEf') returns 0\n  considerVowelsOddEven('abcdefg') returns 0\n  considerVowelsOddEven('dBBE') returns 0\n  */\nconst considerVowelsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num / 10) * 10\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n  */\nconst closeDecimal = (value) => {\n  const num = parseFloat(value)\n  const rounded = Math.round(num * 100) / 100\n  return parseFloat(rounded)\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeDecimal(\"10\")\n  10\n  >>> closeDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeDecimal(\"14.5\") should\n  return 15.3 and closeDecimal(\"-14.5\") should return -15.3\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
