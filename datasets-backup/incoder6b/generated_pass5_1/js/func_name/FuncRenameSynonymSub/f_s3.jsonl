{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = sortedNumbers.filter((number) => {\n    return Math.abs(number - sortedNumbers[0]) < threshold;\n  });\n  return closestNumbers.length >= 2;\n};\n\n/**\n * Check if given number is in given list of numbers.\n * If given number is in given list of numbers, return true.\n * If given number is not in given list of numbers, return false.\n * If given number is in given list of numbers, but not in the right order, return false.\n * If given number is not in given list of numbers, but in the right order, return true.\n * If given number is in given list of numbers, but not in the right order, but in the right order, return true.\n * If given number is not in given list of numbers, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, return false.\n * If given number is in given list of numbers, but not in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the right order, but in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let paren_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_closed) {\n        group_closed = false;\n        group_open = true;\n        paren_count++;\n      } else {\n        group_open = true;\n        paren_count++;\n      }\n    } else if (char === ')') {\n      if (group_open) {\n        group_open = false;\n        group_closed = true;\n        paren_count--;\n      } else {\n        group_closed = true;\n        paren_count--;\n      }\n    }\n\n    if (group_open && group_closed) {\n      groups.push(paren_string.slice(0, i));\n    }\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string;\n  let longestPalindromeSuffix = string;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharReverseLength = currentCharReverse.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar.slice(0, i);\n      longestPalindromeSuffix = currentChar.slice(i);\n      longestPalindromeSuffixLength = currentCharLength - i;\n      longestPalindromeSuffixReverse = currentCharReverse;\n      longestPalindromeSuffixReverseLength = currentCharReverseLength;\n    }\n    if (currentCharLength < longestPalindromeLength) {\n      longestPalindromeSuffix += currentCharReverse;\n      longestPalindromeSuffixLength += currentCharReverseLength;\n    }\n  }\n  return longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeSuffixReverse;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string;\n  let longestPalindromeSuffix = string;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharReverseLength = currentCharReverse.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar.slice(0, i);\n      longestPalindromeSuffix = currentChar.slice(i);\n      longestPalindromeSuffixLength = currentCharLength - i;\n      longestPalindromeSuffixReverse = currentCharReverse;\n      longestPalindromeSuffixReverseLength = currentCharReverseLength;\n    }\n    if (currentCharLength < longestPalindromeLength) {\n      longestPalindromeSuffix += currentCharReverse;\n      longestPalindromeSuffixLength += currentCharReverseLength;\n    }\n  }\n  return longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeSuffixReverse;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string;\n  let longestPalindromeSuffix = string;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharReverseLength = currentCharReverse.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLength;\n      longestPalindromePrefix = currentChar.slice(0, i);\n      longestPalindromeSuffix = currentChar.slice(i);\n      longestPalindromeSuffixLength = currentCharLength - i;\n      longestPalindromeSuffixReverse = currentCharReverse;\n      longestPalindromeSuffixReverseLength = currentCharReverseLength;\n    }\n    if (currentCharLength < longestPalindromeLength) {\n      longestPalindromeSuffix += currentCharReverse;\n      longestPalindromeSuffixLength += currentCharReverseLength;\n    }\n  }\n  return longestPalindromePrefix + longestPalindromeSuffix + longestPalindromeSuffixReverse;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = string;\n  let longestPalindromeSuffix = string;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharReverseLength = currentCharReverse.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindrome = currentChar;\n      longestPalindrome", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  return s.split(',').map(word => word.trim()).filter(word => word.length > 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the longest word in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length > cur.length? acc : cur;\n  }, []);\n};\n\n/*\n  You will be given an array of words. Your task is to return the shortest word in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur;\n  }, []);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of words in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of unique words in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of characters in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of vowels in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of consonants in the array.\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of words that start with the letter \"a\".\n  \n  For example:\n  bibleArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleArray(\"Hi, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleArray(\"Hi, my name is John, my name is John, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst bibleArray = (arr) => {\n  return arr.reduce((acc, cur) => {\n    return acc.length < cur.length? acc : cur.length;\n  }, 0);\n};\n\n/*\n  You will be given an array of words. Your task is to return the number of word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x / 2, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y / 2);\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n - m) / 2;\n  const binary = sum.toString(2);\n  while (binary.length < n) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6!== 0 && x[i] % 7 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 3!== 0 && x[i] % 4!== 0 && x[i] % 5!== 0 && x[i] % 6!== 0 && x[i] % 7!== 0 && x", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return reversed.map((d, i) => names[d]);\n};\n\n// TESTS\nconst tests = [\n  {\n    name: 'byDuration',\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'],\n  },\n  {\n    name: 'byDuration',\n    arr: [],\n    expected: [],\n  },\n  {\n    name: 'byDuration',\n    arr: [1, -1, 55],\n    expected: ['One'],\n  },\n];\n\n// Run tests\ntests.forEach((t) => {\n  const actual = byDuration(t.arr);\n  console.log(`${t.name}:`);\n  console.log(`  Expected: ${t.expected}`);\n  console.log(`  Actual: ${actual}`);\n  console.log('');\n  expect(actual).toEqual(t.expected);\n});</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, however I believe that my solution should be more efficient since it only sorts the array once.\n<|/ c |>\n<| c |>\nYes, I agree with you. My solution sorts the array twice. My solution also uses `reduce` which is not supported by IE.\n<|/ c |>\n<| c |>\nI see your point about `reduce` not being supported by IE. However, the `reduce` method is not supported by IE either. So, I don't think this solution is worth it for IE.\n<|/ c |>\n<| c |>\nI agree with you. My solution uses `reduce` which is not supported by IE.\n<|/ c |>\n<| c |>\nI see your point about `reduce` not being supported by IE. However, the `reduce` method is not supported by IE either. So, I don't think this solution is worth it for IE.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return reversed.map((d, i) => names[d]);\n};\n\n// TESTS\nconst tests = [\n  {\n    name: 'byDuration',\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'],\n  },\n  {\n    name: 'byDuration',\n    arr: [],\n    expected: [],\n  },\n  {\n    name: 'byDuration',\n    arr: [1, -1, 55],\n    expected: ['One'],\n  },\n];\n\n// Run tests\ntests.forEach((t) => {\n  const actual = byDuration(t.arr);\n  console.log(`${t.name}:`);\n  console.log(`  Expected: ${t.expected}`);\n  console.log(`  Actual: ${actual}`);\n  console.log('');\n  expect(actual).toEqual(t.expected);\n});</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, however I believe that my solution should be more efficient since it only sorts the array once.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return reversed.map((d, i) => names[d]);\n};\n\n// TESTS\nconst tests = [\n  {\n    name: 'byDuration',\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'],\n  },\n  {\n    name: 'byDuration',\n    arr: [],\n    expected: [],\n  },\n  {\n    name: 'byDuration',\n    arr: [1, -1, 55],\n    expected: ['One'],\n  },\n];\n\n// Run tests\ntests.forEach((t) => {\n  const actual = byDuration(t.arr);\n  console.log(`${t.name}:`);\n  console.log(`  Expected: ${t.expected}`);\n  console.log(`  Actual: ${actual}`);\n  console.log('');\n  expect(actual).toEqual(t.expected);\n});</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, however I believe that my solution should be more efficient since it only sorts the array once.\n<|/ c |>\n<| a |>\n<code>\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return reversed.map((d, i) => names[d]);\n};\n\n// TESTS\nconst tests = [\n  {\n    name: 'byDuration',\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'],\n  },\n  {\n    name: 'byDuration',\n    arr: [],\n    expected: [],\n  },\n  {\n    name: 'byDuration',\n    arr: [1, -1, 55],\n    expected: ['One'],\n  },\n];\n\n// Run tests\ntests.forEach((t) => {\n  const actual = byDuration(t.arr);\n  console.log(`${t.name}:`);\n  console.log(`  Expected: ${t.expected}`);\n  console.log(`  Actual: ${actual}`);\n  console.log('');\n  expect(actual).toEqual(t.expected);\n});</code>\n<|/ a dscore=1 tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst byDuration = (arr) => {\n  if (!arr.length) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'E", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(1);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n// TESTS\nconst tests = [\n  [1, []],\n  [2, [1]],\n  [3, [1, 2]],\n  [4, [1, 2, 3]],\n  [5, [1, 2, 3, 4]],\n  [6, [1, 2, 3, 4, 5]],\n  [7, [1, 2, 3, 4, 5, 6]],\n  [8, [1, 2, 3, 4, 5, 6, 7]],\n  [9, [1, 2, 3, 4, 5, 6, 7, 8]],\n  [10, [1, 2, 3, 4, 5, 6, 7, 8, 9]],\n  [11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]],\n  [12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]],\n  [13, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]],\n  [14, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]],\n  [15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]],\n  [16, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]],\n  [17, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]],\n  [18, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]],\n  [19, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]],\n  [20, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]],\n  [21, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]],\n  [22, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]],\n  [23, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]],\n  [24, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]],\n  [25, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]],\n  [26, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]],\n  [27, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]],\n  [28, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]],\n  [29, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]],\n  [30, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]],\n  [31, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]],\n  [32, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]],\n  [33, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]],\n  [34, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]],\n  [35, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]],\n  [36, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]],\n  [37, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]],\n  [38, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]],\n  [39, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]],\n  [40, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]],\n  [41, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]],\n  [42, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]],\n  [43, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]],\n  [44, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]],\n  [45, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]],\n  [46, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]],\n  [47, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]],\n  [48, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]],\n  [49, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]],\n  [50, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]],\n  [51, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]],\n  [52, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]],\n  [53, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = n / 2;\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "<|endoftext|>/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits which takes an array of integers and returns the\n  sum of the digits in the array.\n  >>> sumDigits([]) == 0\n  >>> sumDigits([1, 2, 3]) == 6\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigitsWithSigns takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns([]) == (0, 0)\n  >>> sumDigitsWithSigns([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns2 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns2([]) == (0, 0)\n  >>> sumDigitsWithSigns2([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns2 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns3 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns3([]) == (0, 0)\n  >>> sumDigitsWithSigns3([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns3 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns4 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns4([]) == (0, 0)\n  >>> sumDigitsWithSigns4([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns4 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns5 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns5([]) == (0, 0)\n  >>> sumDigitsWithSigns5([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns5 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns6 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns6([]) == (0, 0)\n  >>> sumDigitsWithSigns6([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns6 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns7 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns7([]) == (0, 0)\n  >>> sumDigitsWithSigns7([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns7 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns8 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns8([]) == (0, 0)\n  >>> sumDigitsWithSigns8([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns8 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns9 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns9([]) == (0, 0)\n  >>> sumDigitsWithSigns9([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns9 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns10 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns10([]) == (0, 0)\n  >>> sumDigitsWithSigns10([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns10 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns11 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns11([]) == (0, 0)\n  >>> sumDigitsWithSigns11([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns11 = (arr) => {\n  let sum = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % 10;\n    sign = arr[i] >= 0? 1 : -1;\n  }\n  return [sum, sign];\n};\n\n/*\n  Write a function sumDigitsWithSigns12 takes an array of integers and returns the\n  sum of the digits in the array and their signs.\n  >>> sumDigitsWithSigns12([]) == (0, 0)\n  >>> sumDigitsWithSigns12([1, 2, 3]) == (6, -1)\n  */\nconst sumDigitsWithSigns12 = (arr) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  let flag = true;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array of N integers. Your task is to determine if there is\n  a pair of integers whose sum is equal to the given integer X. \n  \n  Two integers A and B are said to be equal if A + B = X. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are said to be equal if A + B = X if and only if \n  A + B = X and A + B = X + B and A + B = X + B and A + B = X + B and so on. \n  \n  Two integers A and B are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aBits = parseInt(a, 2);\n  const bBits = parseInt(b, 2);\n  return String.fromCharCode(aBits ^ bBits);\n};\n\n/**\n * Returns true if the given string is a valid bowed-string instrument.\n * A valid bowed-string instrument is one where each character is either\n * a 1 or 0. The string can contain any number of 1s and 0s.\n * >>> bowedStringedInstrumentIsValid('010')\n  true\n  >>> bowedStringedInstrumentIsValid('011')\n  false\n  >>> bowedStringedInstrumentIsValid('001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101')\n  false\n  >>> bowedStringedInstrumentIsValid('01010')\n  false\n  >>> bowedStringedInstrumentIsValid('010100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001000')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010001')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001000')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100010010001001000100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('010100100100010010001001000100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000100100010010001001000100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100010010001001000100100010010001001000100100')\n  false\n  >>> bowedStringedInstrumentIsValid('01010010010001001000100100010010001001000100100010010001001000100100010010001001000100010001')\n  false\n  >>> bowedStringedInstrumentIsValid('0101001001000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  // Your code here\n};\n\n// Run tests\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount = 0;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > currentCount) {\n      currentLetter = key;\n      currentCount = histogram[key];\n    }\n  }\n  return { letter: currentLetter, count: currentCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c) {\n      flag = true;\n      result += s[i];\n    } else {\n      if (flag) {\n        result += s[i];\n      }\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deletion.\n  Example\n  For s = \"abcde\", k = 3, the result should be \"abce\"\n  For s = \"abcde\", k = 1  the result should be \"abcde\"\n  For s = \"abcde\", k = 0  the result should be \"\"\n  For s = \"abcde\", k = 4  the result should be \"\"\n  For s = \"abcde\", k = 5  the result should be \"\"\n  For s = \"abcde\", k = 6  the result should be \"\"\n  For s = \"abcde\", k = 7  the result should be \"\"\n  For s = \"abcde\", k = 8  the result should be \"\"\n  For s = \"abcde\", k = 9  the result should be \"\"\n  For s = \"abcde\", k = 10  the result should be \"\"\n  For s = \"abcde\", k = 11  the result should be \"\"\n  For s = \"abcde\", k = 12  the result should be \"\"\n  For s = \"abcde\", k = 13  the result should be \"\"\n  For s = \"abcde\", k = 14  the result should be \"\"\n  For s = \"abcde\", k = 15  the result should be \"\"\n  For s = \"abcde\", k = 16  the result should be \"\"\n  For s = \"abcde\", k = 17  the result should be \"\"\n  For s = \"abcde\", k = 18  the result should be \"\"\n  For s = \"abcde\", k = 19  the result should be \"\"\n  For s = \"abcde\", k = 20  the result should be \"\"\n  For s = \"abcde\", k = 21  the result should be \"\"\n  For s = \"abcde\", k = 22  the result should be \"\"\n  For s = \"abcde\", k = 23  the result should be \"\"\n  For s = \"abcde\", k = 24  the result should be \"\"\n  For s = \"abcde\", k = 25  the result should be \"\"\n  For s = \"abcde\", k = 26  the result should be \"\"\n  For s = \"abcde\", k = 27  the result should be \"\"\n  For s = \"abcde\", k = 28  the result should be \"\"\n  For s = \"abcde\", k = 29  the result should be \"\"\n  For s = \"abcde\", k = 30  the result should be \"\"\n  For s = \"abcde\", k = 31  the result should be \"\"\n  For s = \"abcde\", k = 32  the result should be \"\"\n  For s = \"abcde\", k = 33  the result should be \"\"\n  For s = \"abcde\", k = 34  the result should be \"\"\n  For s = \"abcde\", k = 35  the result should be \"\"\n  For s = \"abcde\", k = 36  the result should be \"\"\n  For s = \"abcde\", k = 37  the result should be \"\"\n  For s = \"abcde\", k = 38  the result should be \"\"\n  For s = \"abcde\", k = 39  the result should be \"\"\n  For s = \"abcde\", k = 40  the result should be \"\"\n  For s = \"abcde\", k = 41  the result should be \"\"\n  For s = \"abcde\", k = 42  the result should be \"\"\n  For s = \"abcde\", k = 43  the result should be \"\"\n  For s = \"abcde\", k = 44  the result should be \"\"\n  For s = \"abcde\", k = 45  the result should be \"\"\n  For s = \"abcde\", k = 46  the result should be \"\"\n  For s = \"abcde\", k = 47  the result should be \"\"\n  For s = \"abcde\", k = 48  the result should be \"\"\n  For s = \"abcde\", k = 49  the result should be \"\"\n  For s = \"abcde\", k = 50  the result should be \"\"\n  For s = \"abcde\", k = 51  the result should be \"\"\n  For s = \"abcde\", k = 52  the result should be \"\"\n  For s = \"abcde\", k = 53  the result should be \"\"\n  For s = \"abcde\", k = 54  the result should be \"\"\n  For s = \"abcde\", k = 55  the result should be \"\"\n  For s = \"abcde\", k = 56  the result should be \"\"\n  For s = \"abcde\", k = 57  the result should be \"\"\n  For s = \"abcde\", k = 58  the result should be \"\"\n  For s = \"abcde\", k = 59  the result should be \"\"\n  For s = \"abcde\", k = 60  the result should be \"\"\n  For s = \"abcde\", k = 61  the result should be \"\"\n  For s = \"abcde\", k = 62  the result should be \"\"\n  For s = \"abcde\", k = 63  the result should be \"\"\n  For s = \"abcde\", k = 64  the result should be \"\"\n  For s = \"abcde\", k = 65  the result should be \"\"\n  For s = \"abcde\", k = 66  the result should be \"\"\n  For s = \"abcde\", k = 67  the result should be \"\"\n  For s = \"abcde\", k = 68  the result should be \"\"\n  For s = \"abcde\", k = 69  the result should be \"\"\n  For s = \"abcde\", k = 70  the result should be \"\"\n  For s = \"abcde\", k = 71  the result should be \"\"\n  For s = \"abcde\", k = 72  the result should be \"\"\n  For s = \"abcde\", k = 73  the result should be \"\"\n  For s = \"abcde\", k = 74  the result should be \"\"\n  For s = \"abcde\", k = 75  the result should be \"\"\n  For s = \"abcde\", k = 76  the result should be \"\"\n  For s = \"abcde\", k = 77  the result should be \"\"\n  For s = \"abcde\", k = 78  the result should be \"\"\n  For s = \"abcde\", k = 79  the result should be \"\"\n  For s = \"abcde\", k = 80  the result should be \"\"\n  For s = \"abcde\", k = 81  the result should be \"\"\n  For s = \"abcde\", k = 82  the result should be \"\"\n  For s = \"abcde\", k = 83  the result should be \"\"\n  For s = \"abcde\", k = 84  the result should be \"\"\n  For s = \"abcde\", k = 85  the result should be \"\"\n  For s = \"abcde\", k = 86  the result should be \"\"\n  For s = \"abcde\", k = 87  the result should be \"\"\n  For s = \"abcde\", k = 88  the result should be \"\"\n  For s = \"abcde\", k = 89  the result should be \"\"\n  For s = \"abcde\", k = 90  the result should be \"\"\n  For s = \"abcde\", k = 91  the result should be \"\"\n  For s = \"abcde\", k = 92  the result should be \"\"\n  For s = \"abcde\", k = 93  the result should be \"\"\n  For s = \"abcde\", k = 94  the result should be \"\"\n  For s = \"abcde\", k = 95  the result should be \"\"\n  For s = \"abcde\", k = 96  the result should be \"\"\n  For s = \"abcde\", k = 97  the result should be \"\"\n  For s = \"abcde\", k = 98  the result should be \"\"\n  For s = \"abcde\", k = 99  the result should be \"\"\n  For s = \"abcde\", k = 100 the result should be \"\"\n  For s = \"abcde\", k = 101 the result should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOddDigits = str.split(\"\").filter(x => x === \"1\").length;\n    oddCount += numOddDigits;\n  }\n  return [\n    `the number of odd elements ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount2 = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEvenDigits = str.split(\"\").filter(x => x === \"0\").length;\n    evenCount += numEvenDigits;\n  }\n  return [\n    `the number of even elements ${evenCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount3(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount3(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount3 = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEvenDigits = str.split(\"\").filter(x => x === \"0\").length;\n    let numOddDigits = str.split(\"\").filter(x => x === \"1\").length;\n    evenCount += numEvenDigits;\n    oddCount += numOddDigits;\n  }\n  return [\n    `the number of even and odd elements ${evenCount} and ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount4(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount4(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount4 = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEvenDigits = str.split(\"\").filter(x => x === \"0\").length;\n    let numOddDigits = str.split(\"\").filter(x => x === \"1\").length;\n    evenCount += numEvenDigits;\n    oddCount += numOddDigits;\n  }\n  return [\n    `the number of even and odd elements ${evenCount} and ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount5(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount5(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount5 = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEvenDigits = str.split(\"\").filter(x => x === \"0\").length;\n    let numOddDigits = str.split(\"\").filter(x => x === \"1\").length;\n    evenCount += numEvenDigits;\n    oddCount += numOddDigits;\n  }\n  return [\n    `the number of even and odd elements ${evenCount} and ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount6(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount6(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount6 = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numEvenDigits = str.split(\"\").filter(x => x === \"0\").length;\n    let numOddDigits = str.split(\"\").filter(x => x === \"1\").length;\n    evenCount += numEvenDigits;\n    oddCount += numOddDigits;\n  }\n  return [\n    `the number of even and odd elements ${evenCount} and ${oddCount} of the ${lst.length} input.`,\n  ];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curSum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      curSum += nums[j];\n      if (curSum < min) {\n        min = curSum;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minuteSubArraySum([-1, -2, -3]) == 6\n  */\nconst minuteSubArrayMaxSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curSum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      curSum += nums[j];\n      if (curSum > max) {\n        max = curSum;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMaxProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMaxProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMaxProds = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd > max) {\n        max = curProd;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMaxProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMaxProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMaxProds2 = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd > max) {\n        max = curProd;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMinProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMinProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMinProds = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd < min) {\n        min = curProd;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMinProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMinProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMinProds2 = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd < min) {\n        min = curProd;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMaxProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMaxProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMaxProds3 = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd > max) {\n        max = curProd;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMinProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMinProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMinProds3 = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd < min) {\n        min = curProd;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMaxProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMaxProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMaxProds4 = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd > max) {\n        max = curProd;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMinProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMinProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMinProds4 = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd < min) {\n        min = curProd;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMaxProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMaxProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMaxProds5 = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let curProd = 1;\n    for (let j = 0; j < nums.length; j++) {\n      curProd *= nums[j];\n      if (curProd > max) {\n        max = curProd;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMinProds([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMinProds([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayMinProds5 = (nums) => {\n  let min = Number.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < n; i++) {\n    const bucket = [];\n    for (let j = 0; j < m; j++) {\n      bucket.push(0);\n    }\n    buckets.push(bucket);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] ++;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j] > 0) {\n        buckets[i][j] -= 1;\n        count ++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your SoapFill function will be called like this:\n * var result = soapFill(grid, capacity);\n */\n\nconst test1 = [\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n];\nconst test2 = [\n  [0, 0, 1, 1],\n  [0, 0, 0, 0],\n  [1, 1, 1, 1],\n  [0, 1, 1, 1]\n];\nconst test3 = [\n  [0, 0, 0],\n  [0, 0, 0]\n];\nconst test4 = [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0]\n];\nconst test5 = [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((num) => num === 1).length;\n  const decimal = arr.filter((num) => num === 1).reduce((acc, num) => acc + num, 0);\n  return [...arr].sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 1;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      continue;\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'l' || char ==='m' || char === 'n' || char === 'p' || char === 'r') {\n      continue;\n    }\n    if (char ==='s' || char === 't' || char === 'w' || char === 'v' || char === 'z') {\n      continue;\n    }\n    if (char === 'b' || char === 'c' || char === 'd' || char === 'f' || char === 'g' || char === 'h' || char === 'j' || char === 'k' || char === 'l' || char ==='m' || char === 'n' || char === 'p' || char === 'q' || char === 'r' || char ==='s' || char === 't' || char === 'v' || char === 'w' || char === 'x' || char === 'y') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'a') {\n      continue;\n    }\n    if (char === 'e') {\n      continue;\n    }\n    if (char === 'i') {\n      continue;\n    }\n    if (char === 'o') {\n      continue;\n    }\n    if (char === 'u') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'l') {\n      continue;\n    }\n    if (char ==='m') {\n      continue;\n    }\n    if (char === 'n') {\n      continue;\n    }\n    if (char === 'p') {\n      continue;\n    }\n    if (char === 'r') {\n      continue;\n    }\n    if (char ==='s') {\n      continue;\n    }\n    if (char === 't') {\n      continue;\n    }\n    if (char === 'w') {\n      continue;\n    }\n    if (char === 'v') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'b') {\n      continue;\n    }\n    if (char === 'c') {\n      continue;\n    }\n    if (char === 'd') {\n      continue;\n    }\n    if (char === 'f') {\n      continue;\n    }\n    if (char === 'g') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'j') {\n      continue;\n    }\n    if (char === 'k') {\n      continue;\n    }\n    if (char === 'l') {\n      continue;\n    }\n    if (char ==='m') {\n      continue;\n    }\n    if (char === 'n') {\n      continue;\n    }\n    if (char === 'p') {\n      continue;\n    }\n    if (char === 'q') {\n      continue;\n    }\n    if (char === 'r') {\n      continue;\n    }\n    if (char ==='s') {\n      continue;\n    }\n    if (char === 't') {\n      continue;\n    }\n    if (char === 'v') {\n      continue;\n    }\n    if (char === 'w') {\n      continue;\n    }\n    if (char === 'x') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'a') {\n      continue;\n    }\n    if (char === 'e') {\n      continue;\n    }\n    if (char === 'i') {\n      continue;\n    }\n    if (char === 'o') {\n      continue;\n    }\n    if (char === 'u') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'l') {\n      continue;\n    }\n    if (char ==='m') {\n      continue;\n    }\n    if (char === 'n') {\n      continue;\n    }\n    if (char === 'p') {\n      continue;\n    }\n    if (char === 'r') {\n      continue;\n    }\n    if (char ==='s') {\n      continue;\n    }\n    if (char === 't') {\n      continue;\n    }\n    if (char === 'w') {\n      continue;\n    }\n    if (char === 'v') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'b') {\n      continue;\n    }\n    if (char === 'c') {\n      continue;\n    }\n    if (char === 'd') {\n      continue;\n    }\n    if (char === 'f') {\n      continue;\n    }\n    if (char === 'g') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'j') {\n      continue;\n    }\n    if (char === 'k') {\n      continue;\n    }\n    if (char === 'l') {\n      continue;\n    }\n    if (char ==='m') {\n      continue;\n    }\n    if (char === 'n') {\n      continue;\n    }\n    if (char === 'p') {\n      continue;\n    }\n    if (char === 'q') {\n      continue;\n    }\n    if (char === 'r') {\n      continue;\n    }\n    if (char ==='s') {\n      continue;\n    }\n    if (char === 't') {\n      continue;\n    }\n    if (char === 'v') {\n      continue;\n    }\n    if (char === 'w') {\n      continue;\n    }\n    if (char === 'x') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'a') {\n      continue;\n    }\n    if (char === 'e') {\n      continue;\n    }\n    if (char === 'i') {\n      continue;\n    }\n    if (char === 'o') {\n      continue;\n    }\n    if (char === 'u') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'h') {\n      continue;\n    }\n    if (char === 'l') {\n      continue;\n    }\n    if (char ==='m') {\n      continue;\n    }\n    if (char === 'n') {\n      continue;\n    }\n    if (char === 'p') {\n      continue;\n    }\n    if (char === 'q') {\n      continue;\n    }\n    if (char === 'r') {\n      continue;\n    }\n    if (char ==='s') {\n      continue;\n    }\n    if (char === 't') {\n      continue;\n    }\n    if (char === 'v') {\n      continue;\n    }\n    if (char === 'w') {\n      continue;\n    }\n    if (char === 'x') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'z') {\n      continue;\n    }\n    if (char === 'a') {\n      continue;\n    }\n    if (char === 'e') {\n      continue;\n    }\n    if (char === 'i') {\n      continue;\n    }\n    if (char === 'o') {\n      continue;\n    }\n    if (char === 'u') {\n      continue;\n    }\n    if (char === 'y') {\n      continue;\n    }\n    if (char === 'h') {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsArr = vowels.split(\"\")\n  let vowelsArr2 = vowels.split(\"\")\n  let vowelsArr3 = vowels.split(\"\")\n  let vowelsArr4 = vowels.split(\"\")\n  let vowelsArr5 = vowels.split(\"\")\n  let vowelsArr6 = vowels.split(\"\")\n  let vowelsArr7 = vowels.split(\"\")\n  let vowelsArr8 = vowels.split(\"\")\n  let vowelsArr9 = vowels.split(\"\")\n  let vowelsArr10 = vowels.split(\"\")\n  let vowelsArr11 = vowels.split(\"\")\n  let vowelsArr12 = vowels.split(\"\")\n  let vowelsArr13 = vowels.split(\"\")\n  let vowelsArr14 = vowels.split(\"\")\n  let vowelsArr15 = vowels.split(\"\")\n  let vowelsArr16 = vowels.split(\"\")\n  let vowelsArr17 = vowels.split(\"\")\n  let vowelsArr18 = vowels.split(\"\")\n  let vowelsArr19 = vowels.split(\"\")\n  let vowelsArr20 = vowels.split(\"\")\n  let vowelsArr21 = vowels.split(\"\")\n  let vowelsArr22 = vowels.split(\"\")\n  let vowelsArr23 = vowels.split(\"\")\n  let vowelsArr24 = vowels.split(\"\")\n  let vowelsArr25 = vowels.split(\"\")\n  let vowelsArr26 = vowels.split(\"\")\n  let vowelsArr27 = vowels.split(\"\")\n  let vowelsArr28 = vowels.split(\"\")\n  let vowelsArr29 = vowels.split(\"\")\n  let vowelsArr30 = vowels.split(\"\")\n  let vowelsArr31 = vowels.split(\"\")\n  let vowelsArr32 = vowels.split(\"\")\n  let vowelsArr33 = vowels.split(\"\")\n  let vowelsArr34 = vowels.split(\"\")\n  let vowelsArr35 = vowels.split(\"\")\n  let vowelsArr36 = vowels.split(\"\")\n  let vowelsArr37 = vowels.split(\"\")\n  let vowelsArr38 = vowels.split(\"\")\n  let vowelsArr39 = vowels.split(\"\")\n  let vowelsArr40 = vowels.split(\"\")\n  let vowelsArrs41 = vowels.split(\"\")\n  let vowelsArrs42 = vowels.split(\"\")\n  let vowelsArrs43 = vowels.split(\"\")\n  let vowelsArrs44 = vowels.split(\"\")\n  let vowelsArrs45 = vowels.split(\"\")\n  let vowelsArrs46 = vowels.split(\"\")\n  let vowelsArrs47 = vowels.split(\"\")\n  let vowelsArrs48 = vowels.split(\"\")\n  let vowelsArrs49 = vowels.split(\"\")\n  let vowelsArrs50 = vowels.split(\"\")\n  let vowelsArrs51 = vowels.split(\"\")\n  let vowelsArrs52 = vowels.split(\"\")\n  let vowelsArrs53 = vowels.split(\"\")\n  let vowelsArrs54 = vowels.split(\"\")\n  let vowelsArrs55 = vowels.split(\"\")\n  let vowelsArrs56 = vowels.split(\"\")\n  let vowelsArrs57 = vowels.split(\"\")\n  let vowelsArrs58 = vowels.split(\"\")\n  let vowelsArrs59 = vowels.split(\"\")\n  let vowelsArrs60 = vowels.split(\"\")\n  let vowelsArrs61 = vowels.split(\"\")\n  let vowelsArrs62 = vowels.split(\"\")\n  let vowelsArrs63 = vowels.split(\"\")\n  let vowelsArrs64 = vowels.split(\"\")\n  let vowelsArrs65 = vowels.split(\"\")\n  let vowelsArrs66 = vowels.split(\"\")\n  let vowelsArrs67 = vowels.split(\"\")\n  let vowelsArrs68 = vowels.split(\"\")\n  let vowelsArrs69 = vowels.split(\"\")\n  let vowelsArrs70 = vowels.split(\"\")\n  let vowelsArrs71 = vowels.split(\"\")\n  let vowelsArrs72 = vowels.split(\"\")\n  let vowelsArrs73 = vowels.split(\"\")\n  let vowelsArrs74 = vowels.split(\"\")\n  let vowelsArrs75 = vowels.split(\"\")\n  let vowelsArrs76 = vowels.split(\"\")\n  let vowelsArrs77 = vowels.split(\"\")\n  let vowelsArrs78 = vowels.split(\"\")\n  let vowelsArrs79 = vowels.split(\"\")\n  let vowelsArrs80 = vowels.split(\"\")\n  let vowelsArrs81 = vowels.split(\"\")\n  let vowelsArrs82 = vowels.split(\"\")\n  let vowelsArrs83 = vowels.split(\"\")\n  let vowelsArrs84 = vowels.split(\"\")\n  let vowelsArrs85 = vowels.split(\"\")\n  let vowelsArrs86 = vowels.split(\"\")\n  let vowelsArrs87 = vowels.split(\"\")\n  let vowelsArrs88 = vowels.split(\"\")\n  let vowelsArrs89 = vowels.split(\"\")\n  let vowelsArrs90 = vowels.split(\"\")\n  let vowelsArrs91 = vowels.split(\"\")\n  let vowelsArrs92 = vowels.split(\"\")\n  let vowelsArrs93 = vowels.split(\"\")\n  let vowelsArrs94 = vowels.split(\"\")\n  let vowelsArrs95 = vowels.split(\"\")\n  let vowelsArrs96 = vowels.split(\"\")\n  let vowelsArrs97 = vowels.split(\"\")\n  let vowelsArrs98 = vowels.split(\"\")\n  let vowelsArrs99 = vowels.split(\"\")\n  let vowelsArrs100 = vowels.split(\"\")\n  let vowelsArrs101 = vowels.split(\"\")\n  let vowelsArrs102 = vowels.split(\"\")\n  let vowelsArrs103 = vowels.split(\"\")\n  let vowelsArrs104 = vowels.split(\"\")\n  let vowelsArrs105 = vowels.split(\"\")\n  let vowelsArrs106 = vowels.split(\"\")\n  let vowelsArrs107 = vowels.split(\"\")\n  let vowelsArrs108 = vowels.split(\"\")\n  let vowelsArrs109 = vowels.split(\"\")\n  let vowelsArrs110 = vowels.split(\"\")\n  let vowelsArrs111 = vowels.split(\"\")\n  let vowelsArrs112 = vowels.split(\"\")\n  let vowelsArrs113 = vowels.split(\"\")\n  let vowelsArrs114 = vowels.split(\"\")\n  let vowelsArrs115 = vowels.split(\"\")\n  let vowelsArrs116 = vowels.split(\"\")\n  let vowelsArrs117 = vowels.split(\"\")\n  let vowelsArrs118 = vowels.split(\"\")\n  let vowelsArrs119 = vowels.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  let good = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      good = catchParens(lst.slice(i + 1, lst.length));\n    } else if (lst[i] === ')') {\n      good = catchParens(lst.slice(0, i));\n    } else {\n      good = false;\n      break;\n    }\n  }\n  return good;\n};\n\n// Tests\nconsole.log(catchParens(['(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')']));\nconsole.log(catchParens(['(', ')', '(', ')', '(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "<|endoftext|>/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const maxLength = Math.max(...strings.map(s => s.length))\n  return strings.find(s => s.length === maxLength)? strings[0] : null\n}\n\n/* Return the string with the longest common prefix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc', 'ddd'])\n  'a'\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = 0; i < shortestString.length; i++) {\n    const char = shortestString[i]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(0, i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common suffix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = shortestString.length; i > 0; i--) {\n    const char = shortestString[i - 1]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common prefix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = 0; i < shortestString.length; i++) {\n    const char = shortestString[i]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(0, i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common suffix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = shortestString.length; i > 0; i--) {\n    const char = shortestString[i - 1]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common prefix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc', 'ddd'])\n  'a'\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = 0; i < shortestString.length; i++) {\n    const char = shortestString[i]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(0, i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common suffix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = shortestString.length; i > 0; i--) {\n    const char = shortestString[i - 1]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common prefix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc', 'ddd'])\n  'a'\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = 0; i < shortestString.length; i++) {\n    const char = shortestString[i]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(0, i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common suffix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonSuffix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = shortestString.length; i > 0; i--) {\n    const char = shortestString[i - 1]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common prefix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc'])\n  'a'\n  >>> commonPrefix(['a', 'bb', 'ccc', 'ddd'])\n  'a'\n  */\nconst commonPrefix = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const longestString = strings[strings.length - 1]\n  for (let i = 0; i < shortestString.length; i++) {\n    const char = shortestString[i]\n    const otherChar = longestString[i]\n    if (char!== otherChar) {\n      return shortestString.slice(0, i)\n    }\n  }\n\n  return shortestString\n}\n\n/* Return the string with the longest common suffix between all the given strings. Return null if the\n  input list is empty.\n  >>> commonSuffix(['a', 'b', 'c'])\n  'c'\n  >>> commonSuffix(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> commonSuffix(['a', 'bb', 'ccc', 'ddd'])\n  'ddd'\n  */\nconst commonSuffix = (strings) => {\n  if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { maximal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimal = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { minimal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 4]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [5, 3, 6]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { kLargest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 3, 5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { kSmallest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 3, 5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 5, 3, 6]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargestAndSmallest = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { kLargestAndSmallest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest and k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 6, 4, 5]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3, 6]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [1, 5, 3, 6, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestAndLargest = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { kSmallestAndLargest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest and k largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 5, 4, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5, 6, 4, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [5, 6, 4, 3, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallestAndLargestDescending = (arr, k) => {\n  const result = [];\n  const sorted = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport { kSmallestAndLargestDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and k smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 4, 3, 1]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5, 6, 4, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 3\n      Output: [5, 6, 4, 3, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst k", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of strings, return the length of the longest string in the array.\n  \n\n  Examples\n  lengthOfLongestString(['hello', 'world', 'hello']) ==> 5\n  lengthOfLongestString(['hello', 'world']) ==> 5\n  lengthOfLongestString(['hello']) ==> 5\n  lengthOfLongestString([]) ==> 0\n  */\nconst lengthOfLongestString = (arr) => {\n  let maxLength = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > maxLength) {\n      maxLength = arr[i].length;\n    }\n  }\n  return maxLength;\n};\n\n/*Given a non-empty array of strings, return the length of the shortest string in the array.\n  \n\n  Examples\n  lengthOfShortestString(['hello', 'world', 'hello']) ==> 5\n  lengthOfShortestString(['hello', 'world']) ==> 5\n  lengthOfShortestString(['hello']) ==> 5\n  lengthOfShortestString([]) ==> 0\n  */\nconst lengthOfShortestString = (arr) => {\n  let minLength = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length < minLength) {\n      minLength = arr[i].length;\n    }\n  }\n  return minLength;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in reverse order. \n  \n\n  Examples\n  reverseString(['hello', 'world', 'hello']) ==> ['olleh', 'dlrow', 'ohel']\n  reverseString(['hello', 'world']) ==> ['dlrow', 'ohel', 'olleh']\n  reverseString(['hello']) ==> ['olleh', 'dlrow']\n  reverseString([]) ==> []\n  */\nconst reverseString = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").reverse().join(\"\"));\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order. \n  \n\n  Examples\n  sortString(['hello', 'world', 'hello']) ==> ['hello', 'world', 'hello']\n  sortString(['hello', 'world']) ==> ['hello', 'world']\n  sortString(['hello']) ==> ['hello']\n  sortString([]) ==> []\n  */\nconst sortString = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==> ['hello', 'world']\n  uniqueString(['hello']) ==> ['hello']\n  uniqueString([]) ==> []\n  */\nconst uniqueString = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr[i].indexOf(newArr[i]) === newArr[i].lastIndexOf(newArr[i])) {\n      newArr.splice(i, 1);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==> ['hello', 'world']\n  uniqueString(['hello']) ==> ['hello']\n  uniqueString([]) ==> []\n  */\nconst uniqueString2 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr.indexOf(newArr[i]) === newArr.lastIndexOf(newArr[i])) {\n      newArr.splice(i, 1);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==> ['hello', 'world']\n  uniqueString(['hello']) ==> ['hello']\n  uniqueString([]) ==> []\n  */\nconst uniqueString3 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr.indexOf(newArr[i]) === newArr.lastIndexOf(newArr[i])) {\n      newArr.splice(i, 1);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==> ['hello', 'world']\n  uniqueString(['hello']) ==> ['hello']\n  uniqueString([]) ==> []\n  */\nconst uniqueString4 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr.indexOf(newArr[i]) === newArr.lastIndexOf(newArr[i])) {\n      newArr.splice(i, 1);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==> ['hello', 'world']\n  uniqueString(['hello']) ==> ['hello']\n  uniqueString([]) ==> []\n  */\nconst uniqueString5 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\").sort().join(\"\"));\n  }\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr.indexOf(newArr[i]) === newArr.lastIndexOf(newArr[i])) {\n      newArr.splice(i, 1);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with the strings in alphabetical order and \n  with the duplicates removed.\n  \n\n  Examples\n  uniqueString(['hello', 'world', 'hello']) ==> ['hello', 'world']\n  uniqueString(['hello', 'world']) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 29 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst tailElement = (arr, k) => {\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the middle k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 28 # sum of 3 + 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 29 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst tailElement = (arr, k) => {\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the middle k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 28 # sum of 3 + 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 29 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst tailElement = (arr, k) => {\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the middle k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 28 # sum of 3 + 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 29 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst tailElement = (arr, k) => {\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the middle k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 28 # sum of 3 + 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst middleElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let odds = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    odds.push(currentNum);\n  }\n  return odds;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatz = (n) => {\n  let evens = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    evens.push(currentNum);\n  }\n  return evens;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatzReverse(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatzReverse = (n) => {\n  let evens = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    evens.push(currentNum);\n  }\n  return evens.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatzReverse(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatzReverse = (n) => {\n  let odds = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    odds.push(currentNum);\n  }\n  return odds.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatzReverse(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatzReverse = (n) => {\n  let evens = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    evens.push(currentNum);\n  }\n  return evens.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatzReverse(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatzReverse = (n) => {\n  let odds = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n    } else {\n      currentNum = currentNum * 3 + 1;\n    }\n    odds.push(currentNum);\n  }\n  return odds.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthsInYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength2 = dateArrayLength - 1;\n  const daysInMonth2 = daysInMonth[dateArrayLength2];\n  const monthsInYear2 = monthsInYear[dateArrayLength2];\n  const dateArrayLength3 = dateArrayLength2 - 1;\n  const daysInMonth3 = daysInMonth[dateArrayLength3];\n  const monthsInYear3 = monthsInYear[dateArrayLength3];\n  const dateArrayLength4 = dateArrayLength3 - 1;\n  const daysInMonth4 = daysInMonth[dateArrayLength4];\n  const monthsInYear4 = monthsInYear[dateArrayLength4];\n  const dateArrayLength5 = dateArrayLength4 - 1;\n  const daysInMonth5 = daysInMonth[dateArrayLength5];\n  const monthsInYear5 = monthsInYear[dateArrayLength5];\n  const dateArrayLength6 = dateArrayLength5 - 1;\n  const daysInMonth6 = daysInMonth[dateArrayLength6];\n  const monthsInYear6 = monthsInYear[dateArrayLength6];\n  const dateArrayLength7 = dateArrayLength6 - 1;\n  const daysInMonth7 = daysInMonth[dateArrayLength7];\n  const monthsInYear7 = monthsInYear[dateArrayLength7];\n  const dateArrayLength8 = dateArrayLength7 - 1;\n  const daysInMonth8 = daysInMonth[dateArrayLength8];\n  const monthsInYear8 = monthsInYear[dateArrayLength8];\n  const dateArrayLength9 = dateArrayLength8 - 1;\n  const daysInMonth9 = daysInMonth[dateArrayLength9];\n  const monthsInYear9 = monthsInYear[dateArrayLength9];\n  const dateArrayLength10 = dateArrayLength9 - 1;\n  const daysInMonth10 = daysInMonth[dateArrayLength10];\n  const monthsInYear10 = monthsInYear[dateArrayLength10];\n  const dateArrayLength11 = dateArrayLength10 - 1;\n  const daysInMonth11 = daysInMonth[dateArrayLength11];\n  const monthsInYear11 = monthsInYear[dateArrayLength11];\n  const dateArrayLength12 = dateArrayLength11 - 1;\n  const daysInMonth12 = daysInMonth[dateArrayLength12];\n  const monthsInYear12 = monthsInYear[dateArrayLength12];\n  const dateArrayLength13 = dateArrayLength12 - 1;\n  const daysInMonth13 = daysInMonth[dateArrayLength13];\n  const monthsInYear13 = monthsInYear[dateArrayLength13];\n  const dateArrayLength14 = dateArrayLength13 - 1;\n  const daysInMonth14 = daysInMonth[dateArrayLength14];\n  const monthsInYear14 = monthsInYear[dateArrayLength14];\n  const dateArrayLength15 = dateArrayLength14 - 1;\n  const daysInMonth15 = daysInMonth[dateArrayLength15];\n  const monthsInYear15 = monthsInYear[dateArrayLength15];\n  const dateArrayLength16 = dateArrayLength15 - 1;\n  const daysInMonth16 = daysInMonth[dateArrayLength16];\n  const monthsInYear16 = monthsInYear[dateArrayLength16];\n  const dateArrayLength17 = dateArrayLength16 - 1;\n  const daysInMonth17 = daysInMonth[dateArrayLength17];\n  const monthsInYear17 = monthsInYear[dateArrayLength17];\n  const dateArrayLength18 = dateArrayLength17 - 1;\n  const daysInMonth18 = daysInMonth[dateArrayLength18];\n  const monthsInYear18 = monthsInYear[dateArrayLength18];\n  const dateArrayLength19 = dateArrayLength18 - 1;\n  const daysInMonth19 = daysInMonth[dateArrayLength19];\n  const monthsInYear19 = monthsInYear[dateArrayLength19];\n  const dateArrayLength20 = dateArrayLength19 - 1;\n  const daysInMonth20 = daysInMonth[dateArrayLength20];\n  const monthsInYear20 = monthsInYear[dateArrayLength20];\n  const dateArrayLength21 = dateArrayLength20 - 1;\n  const daysInMonth21 = daysInMonth[dateArrayLength21];\n  const monthsInYear21 = monthsInYear[dateArrayLength21];\n  const dateArrayLength22 = dateArrayLength21 - 1;\n  const daysInMonth22 = daysInMonth[dateArrayLength22];\n  const monthsInYear22 = monthsInYear[dateArrayLength22];\n  const dateArrayLength23 = dateArrayLength22 - 1;\n  const daysInMonth23 = daysInMonth[dateArrayLength23];\n  const monthsInYear23 = monthsInYear[dateArrayLength23];\n  const dateArrayLength24 = dateArrayLength23 - 1;\n  const daysInMonth24 = daysInMonth[dateArrayLength24];\n  const monthsInYear24 = monthsInYear[dateArrayLength24];\n  const dateArrayLength25 = dateArrayLength24 - 1;\n  const daysInMonth25 = daysInMonth[dateArrayLength25];\n  const monthsInYear25 = monthsInYear[dateArrayLength25];\n  const dateArrayLength26 = dateArrayLength25 - 1;\n  const daysInMonth26 = daysInMonth[dateArrayLength26];\n  const monthsInYear26 = monthsInYear[dateArrayLength26];\n  const dateArrayLength27 = dateArrayLength26 - 1;\n  const daysInMonth27 = daysInMonth[dateArrayLength27];\n  const monthsInYear27 = monthsInYear[dateArrayLength27];\n  const dateArrayLength28 = dateArrayLength27 - 1;\n  const daysInMonth28 = daysInMonth[dateArrayLength28];\n  const monthsInYear28 = monthsInYear[dateArrayLength28];\n  const dateArrayLength29 = dateArrayLength28 - 1;\n  const daysInMonth29 = daysInMonth[dateArrayLength29];\n  const monthsInYear29 = monthsInYear[dateArrayLength29];\n  const dateArrayLength30 = dateArrayLength29 - 1;\n  const daysInMonth30 = daysInMonth[dateArrayLength30];\n  const monthsInYear30 = monthsInYear[dateArrayLength30];\n  const dateArrayLength31 = dateArrayLength30 - 1;\n  const daysInMonth31 = daysInMonth[dateArrayLength31];\n  const monthsInYear31 = monthsInYear[dateArrayLength31];\n  const dateArrayLength32 = dateArrayLength31 - 1;\n  const daysInMonth32 = daysInMonth[dateArrayLength32];\n  const month", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[a-z]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[a-z]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords3 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[A-Z]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords4 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[A-Z]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with odd order in the\n  alphabet, ord('0') = 1, ord('1') = 2,... ord('9') = 10, ord('a') = 10, ord('b') = 11,\n  ord('c') = 11, ord('d') = 12, ord('e') = 13, ord('f') = 14, ord('g') = 15, ord('h') = 16,\n  ord('i') = 17, ord('j') = 18, ord('k') = 19, ord('l') = 20, ord('m') = 21, ord('n') = 22,\n  ord('o') = 23, ord('p') = 24, ord('q') = 25, ord('r') = 23, ord('s') = 24, ord('t') = 25,\n  ord('u') = 23, ord('v') = 24, ord('w') = 25, ord('x') = 23, ord('y') = 24, ord('z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords5 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[0-9]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with even order in the\n  alphabet, ord('0') = 1, ord('1') = 2,... ord('9') = 10, ord('a') = 10, ord('b') = 11,\n  ord('c') = 11, ord('d') = 12, ord('e') = 13, ord('f') = 14, ord('g') = 15, ord('h') = 16,\n  ord('i') = 17, ord('j') = 18, ord('k') = 19, ord('l') = 20, ord('m') = 21, ord('n') = 22,\n  ord('o') = 23, ord('p') = 24, ord('q') = 25, ord('r') = 23, ord('s') = 24, ord('t') = 25,\n  ord('u') = 23, ord('v') = 24, ord('w') = 25, ord('x') = 23, ord('y') = 24, ord('z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords6 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[0-9]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with even order in the\n  alphabet, ord('0') = 1, ord('1') = 2,... ord('9') = 10, ord('a') = 10, ord('b') = 11,\n  ord('c') = 11, ord('d') = 12, ord('e') = 13, ord('f') = 14, ord('g') = 15, ord('h') = 16,\n  ord('i') = 17, ord('j') = 18, ord('k') = 19, ord('l') = 20, ord('m') = 21, ord('n') = 22,\n  ord('o') = 23, ord('p') = 24, ord('q') = 25, ord('r') = 23, ord('s') = 24, ord('t') = 25,\n  ord('u') = 23, ord('v') = 24, ord('w') = 25, ord('x') = 23, ord('y') = 24, ord('z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords7 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word =>!word.match(/[0-9]/i));\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with odd order in the\n  alphabet, ord('0') = 1, ord('1') = 2,... ord('9') = 10, ord('a') = 10, ord('b') = 11,\n  ord('c') = 11, ord('d') = 12, ord('e') = 13, ord('f')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  // If list is empty, return true\n  if (lst.length === 0) {\n    return true;\n  }\n\n  // If list has only one item, return true\n  if (lst.length === 1) {\n    return true;\n  }\n\n  // If list has more than 1 duplicate, return false\n  if (lst.some((item, index) => {\n    return lst.indexOf(item)!== index;\n  })) {\n    return false;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];\n  })) {\n    return true;\n  }\n\n  // If list has only unique numbers, return true\n  if (lst.every((item, index) => {\n    return item === lst[index];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval1;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval1;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval1;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval1;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval1;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval1;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval1;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval1;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval1;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval1;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval1;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval1;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval1;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval1;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval1;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval1;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval1;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval1;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval1;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval1;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval1;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval1;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval1;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval1;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval1;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval1;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval1;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval1;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval1;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval1;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval1;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval1;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval1;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval1;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval1;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval1;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval1;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval1;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval1;\n  const [start13", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns2 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns3 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns4 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns5 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns6 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns7 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns8 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns9 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns10 = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * product\n    product *= (arr[i] < 0)? 1 : -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  for (let i = 1; i <= k; i++) {\n    lst_A[i] = grid[i - 1][m - 1];\n    lst_B[i] = grid[i - 1][m];\n  }\n  let ans = [];\n  for (let i = 1; i <= k; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (lst_A[i] > lst_B[j]) {\n        lst_A[i] = lst_B[j];\n        lst_B[i] = grid[i][j];\n      }\n    }\n    ans.push(lst_B[i]);\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst secondPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  for (let i = 1; i <= k; i++) {\n    lst_A[i] = grid[i - 1][m - 1];\n    lst_B[i] = grid[i - 1][m];\n  }\n  let ans = [];\n  for (let i = 1; i <= k; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (lst_A[i] < lst_B[j]) {\n        lst_A[i] = lst_B[j];\n        lst_B[i] = grid[i][j];\n      }\n    }\n    ans.push(lst_B[i]);\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst thirdPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  for (let i = 1; i <= k; i++) {\n    lst_A[i] = grid[i - 1][m - 1];\n    lst_B[i] = grid[i - 1][m];\n  }\n  let ans = [];\n  for (let i = 1; i <= k; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (lst_A[i] > lst_B[j]) {\n        lst_A[i] = lst_B[j];\n        lst_B[i] = grid[i][j];\n      }\n    }\n    ans.push(lst_B[i]);\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (b === 0) {\n    return a\n  }\n  return capitalCoarseDivisor(b, Math.floor(a / b))\n}\n\n/**\n * Return the number of digits in an integer.\n * If `integer` is negative, return `0`.\n * If `integer` is zero, return `1`.\n * If `integer` is positive, return `integer`.\n * If `integer` is greater than `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is less than `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is greater than `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is less than `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `NaN`, return `NaN`.\n * If `integer` is `Infinity`, return `Infinity`.\n * If `integer` is `-Infinity`, return `-Infinity`.\n * If `integer` is `0`, return `0`.\n * If `integer` is `-0`, return `-0`.\n * If `integer` is `+Infinity`, return `+Infinity`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN_SAFE_INTEGER`, return `Number.MIN_SAFE_INTEGER`.\n * If `integer` is `Number.MAX_SAFE_INTEGER`, return `Number.MAX_SAFE_INTEGER`.\n * If `integer` is `Number.MIN", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2));\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  return arr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase.\n  Example:\n  input: \"Hello World\"\n  output: \"HELLO WORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"HELLO WORLD\"\n*/\nconst upperCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to lowercase.\n  Example:\n  input: \"Hello World\"\n  output: \"hello world\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hello world\"\n*/\nconst lowerCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst mixedCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst firstChar = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n    if (i === 0) {\n      newStr[i] = newStr[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst firstCharMixedCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n    if (i === 0) {\n      newStr[i] = newStr[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst firstCharMixedCaseFirstChar = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n    if (i === 0) {\n      newStr[i] = newStr[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst firstCharMixedCaseFirstCharMixedCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n    if (i === 0) {\n      newStr[i] = newStr[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello World\" -> \"hELLO wORLD\"\n*/\nconst firstCharMixedCaseFirstCharMixedCaseFirstChar = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n    if (i === 0) {\n      newStr[i] = newStr[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*\n  You are given a string of lowercase English letters only.\n  Your task is to return a new string where all characters have been converted to uppercase and \n  all characters have been converted to lowercase except for the first character in the string.\n  Example:\n  input: \"Hello World\"\n  output: \"hELLO wORLD\"\n  Explanation: \"Hello World\" -> \"Hello World\" -> \"Hello ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst evenDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst evenDigitRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst evenDigitEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst evenDigitOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddEvenEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenOddEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddOddEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenEvenEvenRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitOddEvenOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 0\n  */\nconst digitEvenOddOddRemain = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n    n /= 10;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBracketsCount = string.match(/\\[/g).length;\n  const closingBracketsCount = string.match(/\\]/g).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.floor(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8\n  For lst = [1,3,5,7] the output should be 81\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloorCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 8", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n  return lastChar!== \" \" && lastChar!== \"-\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharVowel(\"apple pie\") ➞ false\n  determineIfConcludingCharVowel(\"apple pi e\") ➞ true\n  determineIfConcludingCharVowel(\"apple pi e \") ➞ false\n  determineIfConcludingCharVowel(\"\") ➞ false\n  */\nconst determineIfConcludingCharVowel = (txt) => {\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n  return lastChar === \"a\" || lastChar === \"e\" || lastChar === \"i\" || lastChar === \"o\" || lastChar === \"u\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a consonant, and false otherwise.\n  Note: \"consonant\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConsonant(\"apple pie\") ➞ false\n  determineIfConcludingCharConsonant(\"apple pi e\") ➞ true\n  determineIfConcludingCharConsonant(\"apple pi e \") ➞ false\n  determineIfConcludingCharConsonant(\"\") ➞ false\n  */\nconst determineIfConcludingCharConsonant = (txt) => {\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n  return lastChar === \"b\" || lastChar === \"c\" || lastChar === \"d\" || lastChar === \"f\" || lastChar === \"g\" || lastChar === \"h\" || lastChar === \"j\" || lastChar === \"k\" || lastChar === \"l\" || lastChar === \"m\" || lastChar === \"n\" || lastChar === \"p\" || lastChar === \"q\" || lastChar === \"r\" || lastChar === \"s\" || lastChar === \"t\" || lastChar === \"v\" || lastChar === \"w\" || lastChar === \"x\" || lastChar === \"z\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharNumber(\"apple pie\") ➞ false\n  determineIfConcludingCharNumber(\"apple pi e\") ➞ true\n  determineIfConcludingCharNumber(\"apple pi e \") ➞ false\n  determineIfConcludingCharNumber(\"\") ➞ false\n  */\nconst determineIfConcludingCharNumber = (txt) => {\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n  return lastChar === \"0\" || lastChar === \"1\" || lastChar === \"2\" || lastChar === \"3\" || lastChar === \"4\" || lastChar === \"5\" || lastChar === \"6\" || lastChar === \"7\" || lastChar === \"8\" || lastChar === \"9\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Note: \"symbol\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharSymbol(\"apple pie\") ➞ false\n  determineIfConcludingCharSymbol(\"apple pi e\") ➞ true\n  determineIfConcludingCharSymbol(\"apple pi e \") ➞ false\n  determineIfConcludingCharSymbol(\"\") ➞ false\n  */\nconst determineIfConcludingCharSymbol = (txt) => {\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n  return lastChar === \"!\" || lastChar === \"?\" || lastChar === \"#\" || lastChar === \"$\" || lastChar === \"%\" || lastChar === \"&\" || lastChar === \"'\" || lastChar === \"(\" || lastChar === \")\" || lastChar === \"*\" || lastChar === \"+\" || lastChar === \"-\" || lastChar === \"/\" || lastChar === \"^\" || lastChar === \"~\" || lastChar === \"=\" || lastChar === \"{\" || lastChar === \"}\" || lastChar === \"~\" || lastChar === \"|\" || lastChar === \"\\\\\" || lastChar === \"<\" || lastChar === \">\" || lastChar === \"?\" || lastChar === \"/\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastChar === \"?\" || lastCh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 0\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 5\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 5\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 5\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 5\n  canStage([1,2,3]) = -1\n  */\nconst can", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [maxVal, minVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [maxVal, minVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [maxVal, minVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxVal) {\n      maxVal = lst[i];\n    }\n    if (lst[i] > minVal) {\n      minVal = lst[i];\n    }\n  }\n  return [minVal, maxVal];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigBigIntegers = (lst) => {\n  let maxVal = null;\n  let minVal = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxVal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".1\") return b\n  if (b === \".1\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \".2\") return b\n  if (b === \".2\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \".3\") return b\n  if (b === \".3\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \".4\") return b\n  if (b === \".4\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \".5\") return b\n  if (b === \".5\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \".6\") return b\n  if (b === \".6\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \".7\") return b\n  if (b === \".7\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \".8\") return b\n  if (b === \".8\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \".9\") return b\n  if (b === \".9\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".1\") return b\n  if (b === \".1\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \".2\") return b\n  if (b === \".2\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \".3\") return b\n  if (b === \".3\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \".4\") return b\n  if (b === \".4\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \".5\") return b\n  if (b === \".5\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \".6\") return b\n  if (b === \".6\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \".7\") return b\n  if (b === \".7\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \".8\") return b\n  if (b === \".8\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \".9\") return b\n  if (b === \".9\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".1\") return b\n  if (b === \".1\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \".2\") return b\n  if (b === \".2\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \".3\") return b\n  if (b === \".3\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \".4\") return b\n  if (b === \".4\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \".5\") return b\n  if (b === \".5\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \".6\") return b\n  if (b === \".6\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \".7\") return b\n  if (b === \".7\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \".8\") return b\n  if (b === \".8\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \".9\") return b\n  if (b === \".9\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".1\") return b\n  if (b === \".1\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \".2\") return b\n  if (b === \".2\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \".3\") return b\n  if (b === \".3\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \".4\") return b\n  if (b === \".4\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \".5\") return b\n  if (b === \".5\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \".6\") return b\n  if (b === \".6\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOdd(4) == false\n  isAdequateToSumOdd(6) == true\n  isAdequateToSumOdd(8) == true\n  */\nconst isAdequateToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isAdequateToSumNegative(4) == false\n  isAdequateToSumNegative(6) == false\n  isAdequateToSumNegative(8) == true\n  */\nconst isAdequateToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumEvenNegative(4) == false\n  isAdequateToSumEvenNegative(6) == false\n  isAdequateToSumEvenNegative(8) == true\n  */\nconst isAdequateToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumOddNegative(4) == false\n  isAdequateToSumOddNegative(6) == true\n  isAdequateToSumOddNegative(8) == true\n  */\nconst isAdequateToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isAdequateToSumPositive(4) == false\n  isAdequateToSumPositive(6) == false\n  isAdequateToSumPositive(8) == false\n  */\nconst isAdequateToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEvenPositive(4) == false\n  isAdequateToSumEvenPositive(6) == false\n  isAdequateToSumEvenPositive(8) == false\n  */\nconst isAdequateToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOddPositive(4) == false\n  isAdequateToSumOddPositive(6) == false\n  isAdequateToSumOddPositive(8) == false\n  */\nconst isAdequateToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isAdequateToSumNegative(4) == false\n  isAdequateToSumNegative(6) == false\n  isAdequateToSumNegative(8) == false\n  */\nconst isAdequateToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumEvenNegative(4) == false\n  isAdequateToSumEvenNegative(6) == false\n  isAdequateToSumEvenNegative(8) == false\n  */\nconst isAdequateToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumOddNegative(4) == false\n  isAdequateToSumOddNegative(6) == false\n  isAdequateToSumOddNegative(8) == false\n  */\nconst isAdequateToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isAdequateToSumPositive(4) == false\n  isAdequateToSumPositive(6) == false\n  isAdequateToSumPositive(8) == false\n  */\nconst isAdequateToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEvenPositive(4) == false\n  isAdequateToSumEvenPositive(6) == false\n  isAdequateToSumEvenPositive(8) == false\n  */\nconst isAdequateToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOddPositive(4) == false\n  isAdequateToSumOddPositive(6) == false\n  isAdequateToSumOddPositive(8) == false\n  */\nconst isAdequateToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of the factorials\n  of the integers in the array.\n*/\nconst sumOfFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of the factorials\n  of the integers in the array.\n*/\nconst productOfFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAllFactorials = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += extraFactorial(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  A function which receives an array of integers and returns the product of all factorials\n  of the integers in the array.\n*/\nconst productOfAllFactorials = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= extraFactorial(arr[i]);\n  }\n  return product;\n};\n\n/*\n  A function which receives an array of integers and returns the sum of all the factorials\n  of the integers in the array.\n*/\nconst sumOfAll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < prefixes.length; j++) {\n      if (prefixes[j] === char) {\n        prefixes.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffix = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    for (let j = 0; j < suffixes.length; j++) {\n      if (suffixes[j] === char) {\n        suffixes.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstring = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    substrings.push(char);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 2)\n  ['ab', 'abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 3)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 4)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 5)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 6)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 7)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 8)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 9)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 10)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 11)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 12)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc', 13)\n  ['abc']\n  */\nconst allSubstring = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    for (let j = 0; j < substrings.length; j++) {\n      if (substrings[j] === char) {\n        substrings.splice(j, 1);\n        break;\n      }\n    }\n    if (substrings.length >= length) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/\\s+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.length > 2) {\n      return match.replace(/[^a-zA-Z0-9]+/g, \"_\");\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  Given a string text, \n  replace all non-alphanumeric characters with an underscore, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then replace all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"_Example_2\"\n  repairNonAlpha(\" Example   3\") == \"_Example-3\"\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.split('.');\n  let file_name = file_name[0];\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      newWords.push(word);\n    } else {\n      newWords.push(word.substr(0, word.length - 1));\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sumArray([15, -73, 14, -15]) => -46\n  sumArray([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array. \n  For example:\n  sumArray([15, -73, 14, -15]) => -46\n  sumArray([33, -2, -3, 45, 21, 109]) => -45\n  sumArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) => -45\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. \n  For example:\n  productArray([15, -73, 14, -15]) => -46\n  productArray([33, -2, -3, 45, 21, 109]) => -45\n  productArray([-7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(catchMaxTriples(5));\n</code>\n<|/ a dscore=0 tags=algorithm,arrays,javascript |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] + i;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map(planet => {\n    const planetOrbits = planets.map(planet2 => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const result = orbits.reduce((acc, cur) => {\n    return acc.concat(cur);\n  }, []);\n  return result.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map(planet => {\n    const planetOrbits = planets.map(planet2 => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const result = orbits.reduce((acc, cur) => {\n    return acc.concat(cur);\n  }, []);\n  return result.sort((a, b) => {\n    return b - a;\n  });\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map(planet => {\n    const planetOrbits = planets.map(planet2 => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const result = orbits.reduce((acc, cur) => {\n    return acc.concat(cur);\n  }, []);\n  return result.sort((a, b) => {\n    return a.distance - b.distance;\n  });\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map(planet => {\n    const planetOrbits = planets.map(planet2 => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const result = orbits.reduce((acc, cur) => {\n    return acc.concat(cur);\n  }, []);\n  return result.sort((a, b) => {\n    return a.distance - b.distance;\n  });\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or plan", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sortedList = lst\n   .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    })\n   .filter((item, index, arr) => {\n      return arr.indexOf(item) === index;\n    });\n  return sortedList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 1 2 3 4 5'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr % 2!== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2]);</code>\n\n<code>\n/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2]);</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2]);</code>\n\n<code>\n/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2]);</code>\n<|/ a tags=javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThank you so much! I appreciate it!\n<|/ c |>\n<| a tags=javascript |>\n<code>\n/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2]);</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n/*I think we all remember that feeling when the result of some long-awaited\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + strongest_extension;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. The\n  extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this format:\n  ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + strongest_extension;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. The\n  extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this format:\n  ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + strongest_extension;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. The\n  extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this format:\n  ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + strongest_extension;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions. The\n  extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this format:\n  ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm;\n    if (strength > strongest) {\n      strongest = strength;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n      bSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n      bSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n      bSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n      bSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      word = \"\";\n    } else {\n      word += str[i];\n    }\n  }\n  return [count, word.length];\n};\n\n/*Given a string, return a tuple that has the number of characters in each word.\n\n   Example:\n      wordCount(\"Hello World\") ==> (4, 5)\n      wordCount(\"Hello World!\") ==> (5, 6)\n      wordCount(\"Hello\") ==> (1, 2)\n      wordCount(\"Hello!\") ==> (1, 2)\n      wordCount(\"\") ==> (0, 0)\n*/\nconst wordCount = (str) => {\n  let count = 0;\n  let word = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number')\n  }\n\n  const roman = Array(number + 1).fill('')\n  roman[0] = `M`\n  roman[1] = `D`\n  roman[2] = `C`\n  roman[3] = `L`\n  roman[4] = `X`\n  roman[5] = `V`\n  roman[6] = `I`\n\n  return roman.map((romanNumber) => {\n    const romanDigit = romanNumber.charAt(0)\n    const romanNumeralValue = romanNumber.slice(1)\n\n    return romanDigitToNumber[romanDigit](romanNumeralValue)\n  }).join('')\n}\n\n/*\n  Given a roman numeral, convert it to an integer,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> romanToInt('vi') -> 5\n  >>> romanToInt('xvi') -> 5\n  >>> romanToInt('vix') -> 5\n  >>> romanToInt('viii') -> 5\n  >>> romanToInt('viiii') -> 5\n  >>> romanToInt('viiiii') -> 5\n  >>> romanToInt('viiiiii') -> 5\n  >>> romanToInt('viiiiiii') -> 5\n  >>> romanToInt('viiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii') -> 5\n  >>> romanToInt('viiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a string and returns the number of unique\n  characters in that string.\n\n  receiveUniqueChars(\"name\") === 3\n  receiveUniqueChars(\"aaaaaaa\") === 6\n  */\nconst receiveUniqueChars = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of words\n  in the string.\n\n  receiveWords(\"name of  string\") === 2\n  receiveWords(\"aaaaaaa\") === 1\n  */\nconst receiveWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of lines\n  in the string.\n\n  receiveLines(\"name of  string\") === 3\n  receiveLines(\"aaaaaaa\") === 1\n  */\nconst receiveLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces.\n\n  receiveNonSpaceChars(\"name of  string\") === 3\n  receiveNonSpaceChars(\"aaaaaaa\") === 6\n  */\nconst receiveNonSpaceChars = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of words\n  in the string that are not spaces.\n\n  receiveNonSpaceWords(\"name of  string\") === 2\n  receiveNonSpaceWords(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of lines\n  in the string that are not spaces.\n\n  receiveNonSpaceLines(\"name of  string\") === 3\n  receiveNonSpaceLines(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces and words in the string that are not spaces.\n\n  receiveNonSpaceCharsAndWords(\"name of  string\") === 3\n  receiveNonSpaceCharsAndWords(\"aaaaaaa\") === 6\n  */\nconst receiveNonSpaceCharsAndWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of lines\n  in the string that are not spaces and words in the string that are not spaces.\n\n  receiveNonSpaceLinesAndWords(\"name of  string\") === 3\n  receiveNonSpaceLinesAndWords(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceLinesAndWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces and lines in the string that are not spaces.\n\n  receiveNonSpaceCharsAndLines(\"name of  string\") === 3\n  receiveNonSpaceCharsAndLines(\"aaaaaaa\") === 6\n  */\nconst receiveNonSpaceCharsAndLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of words\n  in the string that are not spaces and lines in the string that are not spaces.\n\n  receiveNonSpaceWordsAndLines(\"name of  string\") === 2\n  receiveNonSpaceWordsAndLines(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceWordsAndLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces and words in the string that are not spaces.\n\n  receiveNonSpaceCharsAndWordsAndLines(\"name of  string\") === 3\n  receiveNonSpaceCharsAndWordsAndLines(\"aaaaaaa\") === 6\n  */\nconst receiveNonSpaceCharsAndWordsAndLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of lines\n  in the string that are not spaces and words in the string that are not spaces.\n\n  receiveNonSpaceLinesAndWordsAndLines(\"name of  string\") === 3\n  receiveNonSpaceLinesAndWordsAndLines(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceLinesAndWordsAndLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces and lines in the string that are not spaces.\n\n  receiveNonSpaceCharsAndLinesAndWords(\"name of  string\") === 3\n  receiveNonSpaceCharsAndLinesAndWords(\"aaaaaaa\") === 6\n  */\nconst receiveNonSpaceCharsAndLinesAndWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of words\n  in the string that are not spaces and lines in the string that are not spaces.\n\n  receiveNonSpaceWordsAndLinesAndWords(\"name of  string\") === 2\n  receiveNonSpaceWordsAndLinesAndWords(\"aaaaaaa\") === 1\n  */\nconst receiveNonSpaceWordsAndLinesAndWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of characters\n  in the string that are not spaces and ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - need;\n  const leftCarrots = remaining - number;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // TODO: Implement the sufficeAlgebra function\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from it.\n  If the string contains no duplicate characters, return an empty string.\n  Examples\n  removeDuplicates(\"abcabc\") returns \"abc\"\n  removeDuplicates(\"abca\") returns \"\"\n  removeDuplicates(\"abcaa\") returns \"a\"\n  removeDuplicates(\"abcaaa\") returns \"aa\"\n  removeDuplicates(\"abcaaaa\") returns \"aaa\"\n  removeDuplicates(\"abcaaaaa\") returns \"aaaa\"\n  removeDuplicates(\"abcaaaaaa\") returns \"aaaaa\"\n  removeDuplicates(\"abcaaaaaaa\") returns \"aaaaaa\"\n  removeDuplicates(\"abcaaaaaaaa\") returns \"aaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaab\") returns \"aaaaaaab\"\n  removeDuplicates(\"abcaaaaaaaabb\") returns \"aaaaaaabb\"\n  removeDuplicates(\"abcaaaaaaaabbb\") returns \"aaaaaaabbb\"\n  removeDuplicates(\"abcaaaaaaaabbbc\") returns \"aaaaaaabbbc\"\n  removeDuplicates(\"abcaaaaaaaabbbcc\") returns \"aaaaaaabbbcc\"\n  removeDuplicates(\"abcaaaaaaaabbbccc\") returns \"aaaaaaabbbccc\"\n  removeDuplicates(\"abcaaaaaaaabbbccca\") returns \"aaaaaaabbbccca\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaa\") returns \"aaaaaaabbbcccaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaa\") returns \"aaaaaaabbbcccaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaa\") returns \"aaaaaaabbbcccaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaa\") returns \"aaaaaaabbbcccaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaa\") returns \"aaaaaaabbbcccaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaa\") returns \"aaaaaaabbbcccaaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaa\") returns \"aaaaaaabbbcccaaaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaab\") returns \"aaaaaaabbbcccaaaaaaaab\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabb\") returns \"aaaaaaabbbcccaaaaaaaabb\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbb\") returns \"aaaaaaabbbcccaaaaaaaabbb\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbc\") returns \"aaaaaaabbbcccaaaaaaaabbbc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcc\") returns \"aaaaaaabbbcccaaaaaaaabbbcc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbccc\") returns \"aaaaaaabbbcccaaaaaaaabbbccc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbccca\") returns \"aaaaaaabbbcccaaaaaaaabbbccca\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaab\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaab\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabb\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabb\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbb\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbb\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbc\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcc\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccc\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccc\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccca\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccca\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaa\"\n  removeDuplicates(\"abcaaaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaaa\") returns \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaaa\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha256 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha256Hash = crypto.createHash('sha256');\n  sha256Hash.update(text);\n  return sha256Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512Hash = crypto.createHash('sha512');\n  sha512Hash.update(text);\n  return sha512Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha3 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3Hash = crypto.createHash('sha3');\n  sha3Hash.update(text);\n  return sha3Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512Hash = crypto.createHash('sha512');\n  sha512Hash.update(text);\n  return sha512Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha3 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3Hash = crypto.createHash('sha3');\n  sha3Hash.update(text);\n  return sha3Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512Hash = crypto.createHash('sha512');\n  sha512Hash.update(text);\n  return sha512Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha3 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3Hash = crypto.createHash('sha3');\n  sha3Hash.update(text);\n  return sha3Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512Hash = crypto.createHash('sha512');\n  sha512Hash.update(text);\n  return sha512Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha3 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha3Hash = crypto.createHash('sha3');\n  sha3Hash.update(text);\n  return sha3Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = text => {\n  if (!text) {\n    return null;\n  }\n\n  const sha512Hash = crypto.createHash('sha512');\n  sha512Hash.update(text);\n  return sha512Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const evenDigits = a.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return evenDigits.slice(0, b)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits minus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits minus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits minus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits minus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits minus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n  renderInteger(-10) => []\n  */\nconst renderInteger = n => {\n  const digits = n.toString().split('')\n   .map((digit, i) => digit * Math.pow(10, i))\n   .filter((digit) => digit % 2 === 0)\n   .sort((a, b) => a - b)\n  return digits.slice(0, digits.length - 1)\n}\n\n/*\n  Given a positive integer n, return the sum of its digits plus one if the\n  number is odd.\n\n  For example:\n  renderInteger(12) => [1, 1, 2]\n  renderInteger(9) => [9, 1]\n  renderInteger(10) => [10]\n  renderInteger(0) => [0]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = {};\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_number = parseInt(music_note.slice(0, music_note_length));\n\n    if (music_note_number in music_notes_map) {\n      music_notes_map[music_note_number] += 1;\n    } else {\n      music_notes_map[music_note_number] = 1;\n    }\n  }\n\n  const music_notes_lengths = Object.keys(music_notes_map).map(key => music_notes_map[key]);\n  const music_notes_lengths_sum = music_notes_lengths.reduce((acc, val) => acc + val, 0);\n\n  return music_notes_lengths_sum;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicScale = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = {};\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_number = parseInt(music_note.slice(0, music_note_length));\n\n    if (music_note_number in music_notes_map) {\n      music_notes_map[music_note_number] += 1;\n    } else {\n      music_notes_map[music_note_number] = 1;\n    }\n  }\n\n  const music_notes_lengths = Object.keys(music_notes_map).map(key => music_notes_map[key]);\n  const music_notes_lengths_sum = music_notes_lengths.reduce((acc, val) => acc + val, 0);\n\n  return music_notes_lengths_sum;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicScale = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = {};\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_number = parseInt(music_note.slice(0, music_note_length));\n\n    if (music_note_number in music_notes_map) {\n      music_notes_map[music_note_number] += 1;\n    } else {\n      music_notes_map[music_note_number] = 1;\n    }\n  }\n\n  const music_notes_lengths = Object.keys(music_notes_map).map(key => music_notes_map[key]);\n  const music_notes_lengths_sum = music_notes_lengths.reduce((acc, val) => acc + val, 0);\n\n  return music_notes_lengths_sum;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicScale = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = {};\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_number = parseInt(music_note.slice(0, music_note_length));\n\n    if (music_note_number in music_notes_map) {\n      music_notes_map[music_note_number] += 1;\n    } else {\n      music_notes_map[music_note_number] = 1;\n    }\n  }\n\n  const music_notes_lengths = Object.keys(music_notes_map).map(key => music_notes_map[key]);\n  const music_notes_lengths_sum = music_notes_lengths.reduce((acc, val) => acc + val, 0);\n\n  return music_notes_lengths_sum;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicScale = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = {};\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_number = parseInt(music_note.slice(0, music_note_length));\n\n    if (music_note_number in music_notes_map) {\n      music_notes_map[music_note_number] += 1;\n    } else {\n      music_notes_map[music_note_number] = 1;\n    }\n  }\n\n  const music_notes_lengths = Object.keys(music_notes_map).map(key => music_notes_map[key]);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i += substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n};\n\n// Tests\nconst tests = [\n  {\n    name:'sortNumbers',\n    fn: sortNumbers,\n    args: ['one two three four five six seven eight nine'],\n    expect: 'one two three four five six seven eight nine'\n  }\n];\n\n// Run tests\ntests.forEach((test) => {\n  test.fn.apply(null, [test.args]);\n});</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine'));\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nfunction sortNumbers(numbers) {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four fi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(decimal)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(integer)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  return [smallest, largest];\n};\n\n/**\n * Given a chemical element (as a string) return the corresponding chemical symbol\n * >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C'\n  >>> receiveChemicalSymbol(\"C\")\n  'C", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isInteger(value))\n}\n\n/* Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFloat(value))\n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* Return string with first letter capitalized\n  >>> capitalize('abc')\n  'Abc'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> lowercase('abc')\n  'abc'\n  */\nconst lowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> uppercase('abc')\n  'ABC'\n  */\nconst uppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLower('abc')\n  'Abc'\n  */\nconst capitalizeAndLower = (string) => {\n  return capitalize(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpper = (string) => {\n  return capitalize(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpper = (string) => {\n  return capitalizeAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLower('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLower = (string) => {\n  return capitalizeAndLower(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLower(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpper = (string) => {\n  return capitalizeAndUpperAndLower(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'ABC'\n  */\nconst capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper(uppercase(string));\n};\n\n/* Return string with first letter capitalized and first letter lowercase\n  >>> capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper('abc')\n  'Abc'\n  */\nconst capitalizeAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper = (string) => {\n  return capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper(lowercase(string));\n};\n\n/* Return string with first letter capitalized and first letter uppercase\n  >>> capitalizeAndUpperAndLowerAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor > maxDivisor) {\n        maxDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      currentDivisor++;\n      if (currentDivisor < minDivisor) {\n        minDivisor = currentDivisor;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize3(8)\n  [2, 2, 2]\n  >>> factorize3(25)\n  [5, 5]\n  >>> factorize3(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize4(8)\n  [2, 2, 2]\n  >>> factorize4(25)\n  [5, 5]\n  >>> factorize4(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize5(8)\n  [2, 2, 2]\n  >>> factorize5(25)\n  [5, 5]\n  >>> factorize5(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize6(8)\n  [2, 2, 2]\n  >>> factorize6(25)\n  [5, 5]\n  >>> factorize6(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize7(8)\n  [2, 2, 2]\n  >>> factorize7(25)\n  [5, 5]\n  >>> factorize7(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize8(8)\n  [2, 2, 2]\n  >>> factorize8(25)\n  [5, 5]\n  >>> factorize8(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize9(8)\n  [2, 2, 2]\n  >>> factorize9(25)\n  [5, 5]\n  >>> factorize9(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize10(8)\n  [2, 2, 2]\n  >>> factorize10(25)\n  [5, 5]\n  >>> factorize10(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize11(8)\n  [2, 2, 2]\n  >>> factorize11(25)\n  [5, 5]\n  >>> factorize11(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number) === -1) {\n      unique.push(number);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThan = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number) === -1) {\n      unique.push(number);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThan([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThan = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number) === -1) {\n      unique.push(number);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicateLessThanOrEqualTo = (numbers) => {\n  const unique = [];\n  numbers.forEach((number) => {\n    if (unique.indexOf(number)!== -1) {\n      unique.splice(unique.indexOf(number), 1);\n    }\n  });\n  return unique;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicateLessThanOrEqualTo([1, 2, 3, 2, 4])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[À-ž]/g, function (character) {\n      return character.toUpperCase();\n    })\n   .replace(/[À-ž]/g, function (character) {\n      return character.toLowerCase();\n    });\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with each character capitalized.\n * \n * >>> capitalize('hello')\n * 'Hello'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert string into array of characters\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  */\nconst toChars = (str) => {\n  return str.split(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst toCharsStr = (chars) => {\n  return chars.join(\"\");\n};\n\n/* Convert array of characters into a string\n  >>> toCharsStr(['a', 'b', 'c'])\n  'abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'c", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with TestDriven.\nconst belowZeroSolution = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution2 = (operations) => {\n  return operations.some((operation) => operation < 0);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution3 = (operations) => {\n  return operations.every((operation) => operation < 0);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution4 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution5 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution6 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution7 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution8 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution9 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution10 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution11 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution12 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution13 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution14 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution15 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution16 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution17 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution18 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution19 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution20 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution21 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution22 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution23 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution24 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution25 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution26 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution27 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution28 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution29 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution30 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, false);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution31 = (operations) => {\n  return operations.reduce((acc, operation) => acc || operation < 0, true);\n};\n\n// Below's a more concise solution. Run it with TestDriven.\nconst belowZeroSolution32 = (operations) => {\n  return operations.reduce((acc, operation) => acc || ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 6]\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n  */\nconst catchNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return only numbers in the list.\n  >>> catchNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 6]\n  >>> catchNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n  */\nconst catchNumbers = (l) => {\n  return l.filter((n) =>!isNaN(n))\n}\n\n/*Return only strings in the list.\n  >>> catchStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchStrings = (l) => {\n  return l.filter((n) => typeof n === \"string\")\n}\n\n/*Return only booleans in the list.\n  >>> catchBooleans([true, false])\n  [true, false]\n  >>> catchBooleans([true, false, true])\n  [true, false, true]\n  */\nconst catchBooleans = (l) => {\n  return l.filter((n) => typeof n === \"boolean\")\n}\n\n/*Return only arrays in the list.\n  >>> catchArrays([1, 2, 3])\n  [1, 2]\n  >>> catchArrays([1, 2, 3, true, false])\n  [1, 2]\n  >>> catchArrays([1, 2, 3, true, false, true, false])\n  [1, 2]\n  */\nconst catchArrays = (l) => {\n  return l.filter((n) => Array.isArray(n))\n}\n\n/*Return only objects in the list.\n  >>> catchObjects([1, 2, 3])\n  [1]\n  >>> catchObjects([1, 2, 3, true, false])\n  [1]\n  >>> catchObjects([1, 2, 3, true, false, true, false])\n  [1]\n  */\nconst catchObjects = (l) => {\n  return l.filter((n) => typeof n === \"object\")\n}\n\n/*Return only functions in the list.\n  >>> catchFunctions([1, 2, 3])\n  [1]\n  >>> catchFunctions([1, 2, 3, true, false])\n  [1]\n  >>> catchFunctions([1, 2, 3, true, false, true, false])\n  [1]\n  */\nconst catchFunctions = (l) => {\n  return l.filter((n) => typeof n === \"function\")\n}\n\n/*Return only nulls in the list.\n  >>> catchNulls([1, 2, 3])\n  [1, 2]\n  >>> catchNulls([1, 2, 3, true, false])\n  [1, 2]\n  >>> catchNulls([1, 2, 3, true, false, true, false])\n  [1, 2]\n  */\nconst catchNulls = (l) => {\n  return l.filter((n) => n === null)\n}\n\n/*Return only undefineds in the list.\n  >>> catchUndefined([1, 2, 3])\n  [1, 2]\n  >>> catchUndefined([1, 2, 3, true, false])\n  [1, 2]\n  >>> catchUndefined([1, 2, 3, true, false, true, false])\n  [1, 2]\n  */\nconst catchUndefined = (l) => {\n  return l.filter((n) => n === undefined)\n}\n\n/*Return only NaNs in the list.\n  >>> catchNaNs([1, 2, 3])\n  [1, 2]\n  >>> catchNaNs([1, 2, 3, true, false])\n  [1, 2]\n  >>> catchNaNs([1, 2, 3, true, false, true, false])\n  [1, 2]\n  */\nconst catchNaNs = (l) => {\n  return l.filter((n) => isNaN(n))\n}\n\n/*Return only NaNs in the list.\n  >>> catchNaNs([1, 2, 3])\n  [1, 2]\n  >>> catchNaNs([1, 2, 3, true, false])\n  [1, 2]\n  >>> catchNaNs([1, 2, 3, true, false, true, false])\n  [1, 2]\n  */\nconst catchNaNs = (l) => {\n  return l.filter((n) =>!isNaN(n))\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty strings in the list.\n  >>> catchEmptyStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> catchEmptyStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst catchEmptyStrings = (l) => {\n  return l.filter((n) => n.trim().length === 0)\n}\n\n/*Return only empty ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n < 2) return false\n  if (n < 4) return true\n  if (n % 2 == 0) return false\n  if (n % 3 == 0) return true\n  if (n % 5 == 0) return false\n  if (n % 7 == 0) return true\n  if (n % 11 == 0) return false\n  if (n % 13 == 0) return true\n  if (n % 17 == 0) return false\n  if (n % 19 == 0) return true\n  if (n % 23 == 0) return false\n  if (n % 29 == 0) return true\n  if (n % 31 == 0) return false\n  if (n % 37 == 0) return true\n  if (n % 41 == 0) return false\n  if (n % 43 == 0) return true\n  if (n % 47 == 0) return false\n  if (n % 53 == 0) return true\n  if (n % 59 == 0) return false\n  if (n % 61 == 0) return true\n  if (n % 67 == 0) return false\n  if (n % 71 == 0) return true\n  if (n % 73 == 0) return false\n  if (n % 79 == 0) return true\n  if (n % 83 == 0) return false\n  if (n % 89 == 0) return true\n  if (n % 97 == 0) return false\n  if (n % 101 == 0) return true\n  if (n % 103 == 0) return false\n  if (n % 107 == 0) return true\n  if (n % 111 == 0) return false\n  if (n % 127 == 0) return true\n  if (n % 131 == 0) return false\n  if (n % 139 == 0) return true\n  if (n % 147 == 0) return false\n  if (n % 151 == 0) return true\n  if (n % 157 == 0) return false\n  if (n % 163 == 0) return true\n  if (n % 169 == 0) return false\n  if (n % 173 == 0) return true\n  if (n % 177 == 0) return false\n  if (n % 181 == 0) return true\n  if (n % 187 == 0) return false\n  if (n % 191 == 0) return true\n  if (n % 193 == 0) return false\n  if (n % 197 == 0) return true\n  if (n % 199 == 0) return false\n  if (n % 201 == 0) return true\n  if (n % 207 == 0) return false\n  if (n % 211 == 0) return true\n  if (n % 213 == 0) return false\n  if (n % 217 == 0) return true\n  if (n % 223 == 0) return false\n  if (n % 229 == 0) return true\n  if (n % 233 == 0) return false\n  if (n % 239 == 0) return true\n  if (n % 241 == 0) return false\n  if (n % 243 == 0) return true\n  if (n % 247 == 0) return false\n  if (n % 251 == 0) return true\n  if (n % 257 == 0) return false\n  if (n % 263 == 0) return true\n  if (n % 269 == 0) return false\n  if (n % 271 == 0) return true\n  if (n % 277 == 0) return false\n  if (n % 281 == 0) return true\n  if (n % 283 == 0) return false\n  if (n % 287 == 0) return true\n  if (n % 291 == 0) return false\n  if (n % 297 == 0) return true\n  if (n % 301 == 0) return false\n  if (n % 303 == 0) return true\n  if (n % 307 == 0) return false\n  if (n % 311 == 0) return true\n  if (n % 313 == 0) return false\n  if (n % 315 == 0) return true\n  if (n % 317 == 0) return false\n  if (n % 321 == 0) return true\n  if (n % 323 == 0) return false\n  if (n % 329 == 0) return true\n  if (n % 331 == 0) return false\n  if (n % 337 == 0) return true\n  if (n % 341 == 0) return false\n  if (n % 347 == 0) return true\n  if (n % 351 == 0) return false\n  if (n % 357 == 0) return true\n  if (n % 363 == 0) return true\n  if (n % 369 == 0) return false\n  if (n % 371 == 0) return true\n  if (n % 377 == 0) return false\n  if (n % 381 == 0) return true\n  if (n % 387 == 0) return false\n  if (n % 391 == 0) return true\n  if (n % 397 == 0) return false\n  if (n % 401 == 0) return true\n  if (n % 403 == 0) return false\n  if (n % 407 == 0) return true\n  if (n % 411 == 0) return false\n  if (n % 413 == 0) return true\n  if (n % 419 == 0) return false\n  if (n % 421 == 0) return true\n  if (n % 423 == 0) return false\n  if (n % 429 == 0) return true\n  if (n % 433 == 0) return false\n  if (n % 439 == 0) return true\n  if (n % 441 == 0) return false\n  if (n % 447 == 0) return true\n  if (n % 451 == 0) return false\n  if (n % 457 == 0) return true\n  if (n % 461 == 0) return false\n  if (n % 467 == 0) return true\n  if (n % 471 == 0) return false\n  if (n % 477 == 0) return true\n  if (n % 481 == 0) return false\n  if (n % 487 == 0) return true\n  if (n % 491 == 0) return false\n  if (n % 497 == 0) return true\n  if (n % 501 == 0) return false\n  if (n % 507 == 0) return true\n  if (n % 511 == 0) return false\n  if (n % 513 == 0) return true\n  if (n % 519 == 0) return false\n  if (n % 521 == 0) return true\n  if (n % 523 == 0) return false\n  if (n % 529 == 0) return true\n  if (n % 533 == 0) return false\n  if (n % 539 == 0) return true\n  if (n % 541 == 0) return false\n  if (n % 547 == 0) return true\n  if (n % 551 == 0) return false\n  if (n % 557 == 0) return true\n  if (n % 561 == 0) return false\n  if (n % 567 == 0) return true\n  if (n % 571 == 0) return false\n  if (n % 577 == 0) return true\n  if (n % 581 == 0) return false\n  if (n % 587 == 0) return true\n  if (n % 591 == 0) return false\n  if (n % 607 == 0) return true\n  if (n % 611 == 0) return false\n  if (n % 617 == 0) return true\n  if (n % 623 == 0) return false\n  if (n % 629 == 0) return true\n  if (n % 637 == 0) return false\n  if (n % 641 == 0) return true\n  if (n % 647 == 0) return false\n  if (n % 651 == 0) return true\n  if (n % 657 == 0) return false\n  if (n % 663 == 0) return true\n  if (n % 669 == 0) return false\n  if (n % 671 == 0) return true\n  if (n % 677 == 0) return false\n  if (n % 681 == 0) return true\n  if (n % 687 == 0) return false\n  if (n % 691 == 0) return true\n  if (n % 697 == 0) return false\n  if (n % 701 == 0) return true\n  if (n % 707 == 0) return false\n  if (n % 711 == 0) return true\n  if (n % 717 == 0) return false\n  if (n % 721 == 0) return true\n  if (n % 727 == 0) return false\n  if (n % 731 == 0) return true\n  if (n % 737 == 0) return false\n  if (n % 741 == 0) return true\n  if (n % 747 == 0) return false\n  if (n % 751 == 0) return true\n  if (n % 757 == 0) return false\n  if (n % 761 == 0) return true\n  if (n % 767 == 0) return false\n  if (n % 771 == 0) return true\n  if (n % 777 == 0) return false\n  if (n % 781 == 0) return true\n  if (n % 787 == 0) return false\n  if (n % 791 == 0) return true\n  if (n % 797", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeroPoints = [];\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoints.push(i);\n    }\n  }\n  if (maxCoefficient === 0) {\n    return null;\n  }\n  const zeroIndex = zeroPoints[zeroPoints.length - 1];\n  const zeroX = xs[zeroIndex];\n  const zeroY = poly(xs, zeroX);\n  return { x: zeroX, y: zeroY };\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds maximum coefficient of xs.\n  findMax returns only maximum coefficient of xs even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  const maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds minimum coefficient of xs.\n  findMin returns only minimum coefficient of xs even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  const minCoefficient = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < minCoefficient) {\n      minCoefficient = xs[i];\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot finds root of polynomial with coefficients xs.\n  findRoot returns only root of polynomial with coefficients xs even if there are many.\n  Moreover, findRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  const zeroPoints = [];\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoints.push(i);\n    }\n  }\n  if (maxCoefficient === 0) {\n    return null;\n  }\n  const zeroIndex = zeroPoints[zeroPoints.length - 1];\n  const zeroX = xs[zeroIndex];\n  const zeroY = poly(xs, zeroX);\n  const zeroYRoot = zeroY - zeroX;\n  const zeroXRoot = zeroX - zeroY;\n  const zeroXRootRoot = zeroXRoot * zeroXRoot;\n  const zeroXRootRootRoot = zeroXRootRoot * zeroXRootRoot;\n  const zeroXRootRootRootRoot = zeroXRootRootRoot * zeroXRootRootRoot;\n  const zeroXRootRootRootRootRoot = zeroXRootRootRootRoot * zeroXRootRootRootRoot;\n  const zeroXRootRootRootRootRootRoot = zeroXRootRootRootRootRoot * zeroXRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRoot = zeroXRootRootRootRootRootRoot * zeroXRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroXRootRootRootRootRootRootRootRoot;\n  const zeroXRootRootRootRootRootRootRootRoot = zeroXRootRootRootRootRootRootRootRootRoot * zeroX", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourty, while its values at the indicies that are divisible by fourty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFourty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 40 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fifty, while its values at the indicies that are divisible by fifty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 50 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by sixty, while its values at the indicies that are divisible by sixty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSixty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSixty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 60 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seventy, while its values at the indicies that are divisible by seventy are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventy([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventy([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "<|endoftext|>/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique20 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique21 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique22 = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  return Math.max(...l)\n}\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElement = (l) => {\n  return Math.min(...l)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst soapElement = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are di", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order.\n  >>> sortAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortAsc([5, 6, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst sortAsc = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order.\n  >>> sortDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortDesc = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the first element of l.\n  >>> sortByFirst([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFirst([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortByFirst = (l) => {\n  return l.sort((a, b) => a - b[0]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the first element of l.\n  >>> sortByFirstDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFirstDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortByFirstDesc = (l) => {\n  return l.sort((a, b) => b[0] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the second element of l.\n  >>> sortBySecond([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySecond([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortBySecond = (l) => {\n  return l.sort((a, b) => a - b[1]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the second element of l.\n  >>> sortBySecondDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortBySecondDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortBySecondDesc = (l) => {\n  return l.sort((a, b) => b[1] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the third element of l.\n  >>> sortByThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByThird([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortByThird = (l) => {\n  return l.sort((a, b) => a - b[2]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the third element of l.\n  >>> sortByThirdDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByThirdDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortByThirdDesc = (l) => {\n  return l.sort((a, b) => b[2] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the fourth element of l.\n  >>> sortByFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFourth([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortByFourth = (l) => {\n  return l.sort((a, b) => a - b[3]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the fourth element of l.\n  >>> sortByFourthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFourthDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortByFourthDesc = (l) => {\n  return l.sort((a, b) => b[3] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the fifth element of l.\n  >>> sortByFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFifth([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortByFifth = (l) => {\n  return l.sort((a, b) => a - b[4]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the fifth element of l.\n  >>> sortByFifthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFifthDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortByFifthDesc = (l) => {\n  return l.sort((a, b) => b[4] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the sixth element of l.\n  >>> sortBySixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySixth([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortBySixth = (l) => {\n  return l.sort((a, b) => a - b[5]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the sixth element of l.\n  >>> sortBySixthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortBySixthDesc([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortBySixthDesc = (l) => {\n  return l.sort((a, b) => b[5] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the seventh element of l.\n  >>> sortBySeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySeventh([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortBySeventh = (l) => {\n  return l.sort((a, b) => a - b[6]);\n};\n\n/*This function takes a list l and returns a list l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 6) {\n    groups.push(s.slice(i, i + 6));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 7) {\n    groups.push(s.slice(i, i + 7));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 8) {\n    groups.push(s.slice(i, i + 8));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 9) {\n    groups.push(s.slice(i, i + 9));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ten characters.\n  */\nconst encodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 10); i++) {\n    groups.push(s.slice(10 * i, Math.min((10 * i + 10), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 10)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "<|endoftext|>/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  if (n < 2) return n;\n  if (n === 2) return 1;\n  if (n % 2 === 0) return premierFib(n - 1) + premierFib(n - 2);\n  return premierFib(n - 1) + premierFib(n - 2);\n};\n\n/*\n  fibonacci returns n-th number that is a Fibonacci number.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  17711\n  >>> fibonacci(23)\n  28657\n  >>> fibonacci(24)\n  46368\n  >>> fibonacci(25)\n  75025\n  >>> fibonacci(26)\n  121393\n  >>> fibonacci(27)\n  196418\n  >>> fibonacci(28)\n  317811\n  >>> fibonacci(29)\n  514229\n  >>> fibonacci(30)\n  832040\n  >>> fibonacci(31)\n  1346269\n  >>> fibonacci(32)\n  2178309\n  >>> fibonacci(33)\n  3524578\n  >>> fibonacci(34)\n  5702887\n  >>> fibonacci(35)\n  9495376\n  >>> fibonacci(36)\n  14930352\n  >>> fibonacci(37)\n  24157817\n  >>> fibonacci(38)\n  39088169\n  >>> fibonacci(39)\n  63245986\n  >>> fibonacci(40)\n  102334155\n  >>> fibonacci(41)\n  165580141\n  >>> fibonacci(42)\n  267914296\n  >>> fibonacci(43)\n  433494437\n  >>> fibonacci(44)\n  701408733\n  >>> fibonacci(45)\n  1134903170\n  >>> fibonacci(46)\n  1836311903\n  >>> fibonacci(47)\n  2971215073\n  >>> fibonacci(48)\n  4807526976\n  >>> fibonacci(49)\n  7778742049\n  >>> fibonacci(50)\n  12586269025\n  >>> fibonacci(51)\n  20365011074\n  >>> fibonacci(52)\n  32951280099\n  >>> fibonacci(53)\n  53316291171\n  >>> fibonacci(54)\n  86267571272\n  >>> fibonacci(55)\n  134750138071\n  >>> fibonacci(56)\n  217830980863\n  >>> fibonacci(57)\n  352457812539\n  >>> fibonacci(58)\n  570288709663\n  >>> fibonacci(59)\n  949537588072\n  >>> fibonacci(60)\n  1493035392291\n  >>> fibonacci(61)\n  2415781701099\n  >>> fibonacci(62)\n  3908816957817\n  >>> fibonacci(63)\n  6324598612229\n  >>> fibonacci(64)\n  10233415186421\n  >>> fibonacci(65)\n  16558014290089\n  >>> fibonacci(66)\n  26791429624693\n  >>> fibonacci(67)\n  43349443716821\n  >>> fibonacci(68)\n  70140873343777\n  >>> fibonacci(69)\n  113490317991167\n  >>> fibonacci(70)\n  183631190310067\n  >>> fibonacci(71)\n  297121507317263\n  >>> fibonacci(72)\n  480752697665351\n  >>> fibonacci(73)\n  777874204939173\n  >>> fibonacci(74)\n  1258626902590797\n  >>> fibonacci(75)\n  2036501107428641\n  >>> fibonacci(76)\n  3295128009908719\n  >>> fibonacci(77)\n  5331629117101393\n  >>> fibonacci(78)\n  8626757127257721\n  >>> fibonacci(79)\n  13475013807161589\n  >>> fibonacci(80)\n  21783098086302083\n  >>> fibonacci(81)\n  35245781253941964\n  >>> fibonacci(82)\n  57028870966346429\n  >>> fibonacci(83)\n  94953758807199763\n  >>> fibonacci(84)\n  149303539229162869\n  >>> fibonacci(85)\n  241578170109981191\n  >>> fibonacci(86)\n  390881695781715887\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst entailAbsoluteDeviationWithOutliers = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedianWithOutliers = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst entailAbsoluteDeviationModeWithOutliers = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst entailAbsoluteDeviationWithOutliersMedian = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst entailAbsoluteDeviationWithOutliersMedianMode = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst entailAbsoluteDeviationWithOutliersMode = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst entailAbsoluteDeviationWithOutliersMedianMode = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst entailAbsoluteDeviationWithOutliersMedianModeWithOutliers = (numbers) => {\n  const median = getMedian(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst entailAbsoluteDeviationWithOutliersModeWithOutliers = (numbers) => {\n  const mode = getMode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset (with outliers).\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst entailAbsoluteDe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "<|endoftext|>/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(cars[i].x - cars[j].x) < cars[i].radius + cars[j].radius &&\n        Math.abs(cars[i].y - cars[j].y) < cars[i].radius + cars[j].radius &&\n        Math.abs(cars[i].z - cars[j].z) < cars[i].radius + cars[j].radius\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision2 = (\n  n,\n  car1,\n  car2,\n  car3,\n  car4,\n  car5,\n  car6,\n  car7,\n  car8,\n  car9,\n  car10,\n  car11,\n  car12,\n  car13,\n  car14,\n  car15,\n  car16,\n  car17,\n  car18,\n  car19,\n  car20,\n  car21,\n  car22,\n  car23,\n  car24,\n  car25,\n  car26,\n  car27,\n  car28,\n  car29,\n  car30,\n  car31,\n  car32,\n  car33,\n  car34,\n  car35,\n  car36,\n  car37,\n  car38,\n  car39,\n  car40,\n  car41,\n  car42,\n  car43,\n  car44,\n  car45,\n  car46,\n  car47,\n  car48,\n  car49,\n  car50,\n  car51,\n  car52,\n  car53,\n  car54,\n  car55,\n  car56,\n  car57,\n  car58,\n  car59,\n  car60,\n  car61,\n  car62,\n  car63,\n  car64,\n  car65,\n  car66,\n  car67,\n  car68,\n  car69,\n  car70,\n  car71,\n  car72,\n  car73,\n  car74,\n  car75,\n  car76,\n  car77,\n  car78,\n  car79,\n  car80,\n  car81,\n  car82,\n  car83,\n  car84,\n  car85,\n  car86,\n  car87,\n  car88,\n  car89,\n  car90,\n  car91,\n  car92,\n  car93,\n  car94,\n  car95,\n  car96,\n  car97,\n  car98,\n  car99,\n  car100,\n  car101,\n  car102,\n  car103,\n  car104,\n  car105,\n  car106,\n  car107,\n  car108,\n  car109,\n  car110,\n  car111,\n  car112,\n  car113,\n  car114,\n  car115,\n  car116,\n  car117,\n  car118,\n  car119,\n  car120,\n  car121,\n  car122,\n  car123,\n  car124,\n  car125,\n  car126,\n  car127,\n  car128,\n  car129,\n  car130,\n  car131,\n  car132,\n  car133,\n  car134,\n  car135,\n  car136,\n  car137,\n  car138,\n  car139,\n  car140,\n  car141,\n  car142,\n  car143,\n  car144,\n  car145,\n  car146,\n  car147,\n  car148,\n  car149,\n  car150,\n  car151,\n  car152,\n  car153,\n  car154,\n  car155,\n  car156,\n  car157,\n  car158,\n  car159,\n  car160,\n  car161,\n  car162,\n  car163,\n  car164,\n  car165,\n  car166,\n  car167,\n  car168,\n  car169,\n  car170,\n  car171,\n  car172,\n  car173,\n  car174,\n  car175,\n  car176,\n  car177,\n  car178,\n  car179,\n  car180,\n  car181,\n  car182,\n  car183,\n  car184,\n  car185,\n  car186,\n  car187,\n  car188,\n  car189,\n  car190,\n  car191,\n  car192,\n  car193,\n  car194,\n  car195,\n  car196,\n  car197,\n  car198,\n  car199,\n  car200,\n  car201,\n  car202,\n  car203,\n  car204,\n  car205,\n  car206,\n  car207,\n  car208,\n  car209,\n  car210,\n  car211,\n  car212,\n  car213,\n  car214,\n  car215,\n  car216,\n  car217,\n  car218,\n  car219,\n  car220,\n  car221,\n  car222,\n  car223,\n  car224,\n  car225,\n  car226,\n  car227,\n  car228,\n  car229,\n  car230,\n  car231,\n  car232,\n  car233,\n  car234,\n  car235,\n  car236,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 1, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult3List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div3List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mult4List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult4List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 4);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div4List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 4);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult5List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 5);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div5List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 5);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 6.\n  >>> mult6List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult6List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 6);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 6.\n  >>> div6List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div6List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 6);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 7.\n  >>> mult7List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult7List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 7);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 7.\n  >>> div7List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div7List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 7);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 8.\n  >>> mult8List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult8List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult8List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 8);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 8.\n  >>> div8List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div8List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div8List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 8);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 9.\n  >>> mult9List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult9List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst mult9List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 9);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 9.\n  >>> div9List([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> div9List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 6, 9, 3, 12, 123]\n  */\nconst div9List = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 9);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 10.\n  >>> mult10List([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> mult10List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "<|endoftext|>/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  copulateUnionToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> copulateUnionToOne([1, 3, 5, 0])\n  false\n  >>> copulateUnionToOne([1, 3, -2, 1])\n  false\n  >>> copulateUnionToOne([1, 2, 3, 7])\n  false\n  >>> copulateUnionToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToOne([1])\n  false\n  */\nconst copulateUnionToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  copulateUnionToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> copulateUnionToTwo([1, 3, 5, 0])\n  false\n  >>> copulateUnionToTwo([1, 3, -2, 1])\n  false\n  >>> copulateUnionToTwo([1, 2, 3, 7])\n  false\n  >>> copulateUnionToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToTwo([1])\n  false\n  */\nconst copulateUnionToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  copulateUnionToThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> copulateUnionToThree([1, 3, 5, 0])\n  false\n  >>> copulateUnionToThree([1, 3, -2, 1])\n  false\n  >>> copulateUnionToThree([1, 2, 3, 7])\n  false\n  >>> copulateUnionToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToThree([1])\n  false\n  */\nconst copulateUnionToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  copulateUnionToFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> copulateUnionToFour([1, 3, 5, 0])\n  false\n  >>> copulateUnionToFour([1, 3, -2, 1])\n  false\n  >>> copulateUnionToFour([1, 2, 3, 7])\n  false\n  >>> copulateUnionToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToFour([1])\n  false\n  */\nconst copulateUnionToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  copulateUnionToFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> copulateUnionToFive([1, 3, 5, 0])\n  false\n  >>> copulateUnionToFive([1, 3, -2, 1])\n  false\n  >>> copulateUnionToFive([1, 2, 3, 7])\n  false\n  >>> copulateUnionToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToFive([1])\n  false\n  */\nconst copulateUnionToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  copulateUnionToSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> copulateUnionToSix([1, 3, 5, 0])\n  false\n  >>> copulateUnionToSix([1, 3, -2, 1])\n  false\n  >>> copulateUnionToSix([1, 2, 3, 7])\n  false\n  >>> copulateUnionToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToSix([1])\n  false\n  */\nconst copulateUnionToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  copulateUnionToSeven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> copulateUnionToSeven([1, 3, 5, 0])\n  false\n  >>> copulateUnionToSeven([1, 3, -2, 1])\n  false\n  >>> copulateUnionToSeven([1, 2, 3, 7])\n  false\n  >>> copulateUnionToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToSeven([1])\n  false\n  */\nconst copulateUnionToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  copulateUnionToEight takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to eight, and false otherwise.\n  >>> copulateUnionToEight([1, 3, 5, 0])\n  false\n  >>> copulateUnionToEight([1, 3, -2, 1])\n  false\n  >>> copulateUnionToEight([1, 2, 3, 7])\n  false\n  >>> copulateUnionToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToEight([1])\n  false\n  */\nconst copulateUnionToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  copulateUnionToNine takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to nine, and false otherwise.\n  >>> copulateUnionToNine([1, 3, 5, 0])\n  false\n  >>> copulateUnionToNine([1, 3, -2, 1])\n  false\n  >>> copulateUnionToNine([1, 2, 3, 7])\n  false\n  >>> copulateUnionToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToNine([1])\n  false\n  */\nconst copulateUnionToNine = (l) => {\n  let sum = 0;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBaseString = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseString(8, 3)\n  '22'\n  >>> varietyBaseString(8, 2)\n  '1000'\n  >>> varietyBaseString(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZero(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWithZero(8, 3)\n  '22'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWithZero(8, 2)\n  '1000'\n  >>> varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWith(7, 2)\n  '111'\n  */\nconst varietyBaseStringWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = a * Math.sqrt(3) / 2;\n  return area > h? area : h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  } else if (n <= 2) {\n    return n;\n  } else if (n <= 4) {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5);\n  }\n};\n\n/*\n  Problem #6\n  Write a function that takes in an array of numbers and returns the sum of all the numbers in the array.\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[len / 2];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  let maxCount = 0;\n  let maxItem = null;\n  for (const val in counts) {\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      maxItem = val;\n    }\n  }\n  return maxItem", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase().split('').reverse().join('')) {\n    return true;\n  }\n  return isPalindromeRecursive(text.substr(1));\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> isPalindromeIteration('aaaaa')\n  true\n  >>> isPalindromeIteration('zbcd')\n  false\n  */\nconst isPalindromeIteration = (text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIteration('')\n  true\n  >>> isPalindromeIteration('aba')\n  true\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp(): arguments must be non-negative and smaller than p');\n  }\n  return ((n % p) + p) % p;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, -5)\n  2\n  >>> modpow(2, 3, 0)\n  1\n  >>> modpow(2, -1, 5)\n  1\n  >>> modpow(2, -1, -5)\n  0\n  >>> modpow(2, -1, 0)\n  1\n  */\nconst modpow = (n, p, m) => {\n  if (n < 0 || p < 0 || n < p || p < 0 || n % p!== 0) {\n    throw new RangeError('modpow(): arguments must be non-negative and smaller than p');\n  }\n  if (m === undefined) {\n    m = p;\n  }\n  if (m < 0) {\n    m = p + m;\n  }\n  if (m > p) {\n    m = p;\n  }\n  if (m % 2 === 0) {\n    return modp(m, p);\n  }\n  if (m === p) {\n    return 1;\n  }\n  if (m === -1) {\n    return modp(-m, p);\n  }\n  if (m === 0) {\n    return n;\n  }\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if (n === -1) {\n    return modp(-n, p);\n  }\n  if (n === 1) {\n    return modp(n, p);\n  }\n  if (n === 2) {\n    return modp(n - 1, p);\n  }\n  if (n === -2) {\n    return modp(-n - 1, p);\n  }\n  if (n % 2 === 0) {\n    return modpow(n, p, p);\n  }\n  if (n % 2 === 1) {\n    return modpow(n, p, m);\n  }\n  if (n % 2 === -1) {\n    return modpow(n, p, p);\n  }\n  if (n % 2 === 0) {\n    return modpow(n, p, m);\n  }\n  if (n % 2 === 1) {\n    return modpow(n, p, m);\n  }\n  if (n % 2 === -1) {\n    return modpow(n, p, p);\n  }\n};\n\n/*\n  >>> modpow(10, 3, 5)\n  5\n  >>> modpow(10, 3, -5)\n  0\n  >>> modpow(10, 3, 0)\n  1\n  >>> modpow(10, -1, 5)\n  1\n  >>> modpow(10, -1, -5)\n  0\n  >>> modpow(10, -1, 0)\n  1\n  */\nconst modpow10 = (n, m) => {\n  if (n < 0 || m < 0) {\n    throw new RangeError('modpow10(): arguments must be non-negative');\n  }\n  if (m === undefined) {\n    m = n;\n  }\n  if (m === 0) {\n    return 1;\n  }\n  if (m === 1) {\n    return n;\n  }\n  if (m === -1) {\n    return -modpow10(-n, 1);\n  }\n  if (m === 2) {\n    return modpow10(n - 1, 1);\n  }\n  if (m === -2) {\n    return -modpow10(-n - 1, 1);\n  }\n  if (n % 2 === 0) {\n    return modpow10(n, 2);\n  }\n  if (n % 2 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 2 === -1) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 2 === 0) {\n    return modpow10(n, 2);\n  }\n  if (n % 2 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 2 === -1) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 3 === 0) {\n    return modpow10(n, 3);\n  }\n  if (n % 3 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 3 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 3 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 3 === 0) {\n    return modpow10(n, 3);\n  }\n  if (n % 3 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 3 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 3 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 4 === 0) {\n    return modpow10(n, 4);\n  }\n  if (n % 4 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 4 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 4 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 5 === 0) {\n    return modpow10(n, 5);\n  }\n  if (n % 5 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 5 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 5 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 6 === 0) {\n    return modpow10(n, 6);\n  }\n  if (n % 6 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 6 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 6 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 7 === 0) {\n    return modpow10(n, 7);\n  }\n  if (n % 7 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 7 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 7 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 8 === 0) {\n    return modpow10(n, 8);\n  }\n  if (n % 8 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 8 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 8 === -2) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 9 === 0) {\n    return modpow10(n, 9);\n  }\n  if (n % 9 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 9 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 9 === -3) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 10 === 0) {\n    return modpow10(n, 10);\n  }\n  if (n % 10 === 1) {\n    return modpow10(n, 1);\n  }\n  if (n % 10 === 2) {\n    return modpow10(n, 2);\n  }\n  if (n % 10 === -3) {\n    return -modpow10(-n, 2);\n  }\n  if (n % 10 === 4) {\n    return modpow10(n, 4);\n  }\n  if (n % 10 === -5) {\n    return -modpow10(-n, 4);\n  }\n  if (n % 10 === -6) {\n    return modpow10(n, 6);\n  }\n  if (n % 10 === -7) {\n    return -modpow10(-n, 6);\n  }\n  if (n % 10 === -8) {\n    return modpow10(n, 8);\n  }\n  if (n % 10 === -9) {\n    return -modpow10(-n, 8);\n  }\n  if (n % 10 === -10) {\n    return modpow10(n, 10);\n  }\n  if (n % 10 === -11) {\n    return -modpow10(-n, 10);\n  }\n  if (n % 10 === -12) {\n    return modpow10(n, 12);\n  }\n  if (n % 10 === -13) {\n    return -modpow10(-n, 12);\n  }\n  if (n % 10 === -14) {\n    return modpow10(n, 14);\n  }\n  if (n % 10 === -15) {\n    return -modpow10(-n, 14);\n  }\n  if (n % 10 === -16) {\n    return modpow10(n, 16);\n  }\n  if (n % 10 === -17) {\n    return -modpow", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length;\n  if (length === 0) {\n    return [];\n  }\n  const result = [];\n  let index = 0;\n  while (index < length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    index += 1;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of `list`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The array to consider.\n * @return {Array} The last `n` elements of `list`.\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = /*#__PURE__*/ _curry2((n, list) => dropRight(n, list));\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = /*#__PURE__*/ _curry2((fn, list) => takeLastWhile(fn, list));\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLast, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = /*#__PURE__*/ _curry2((fn, list) => takeLastWhile(fn, list));\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLast, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropWhile = /*#__PURE__*/ _curry2((fn, list) => drop(prependWhile(fn, list), list));\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropWhile(isNotFour, [1, 2, 3, 4]); //=> [3, 4]\n *\n *      R.dropWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropWhile = /*#__PURE__*/ _curry2((fn, list) => dropWhile(fn, list));\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.distinctBy(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.distinctBy(strEq)([{}, {}]);       //=> [{}]\n *      R.distinctBy(strEq)([{foo:1, bar:1}, {foo:1, bar:2}]); //=> [{foo:1, bar:1}]\n */\nconst distinctBy = /*#__PURE__*/ _curry2(function distinctBy(pred, list) {\n  const result = [];\n  const values = [];\n  let idx = 0;\n  const len = list.length;\n  while (idx < len) {\n    const val = list[idx];\n    const computed = pred(val, idx, list);\n    if (!computed || _contains(result, val)) {\n      result[result.length] = val;\n    } else {\n      values[valuesIdx] = val;\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Returns a new list containing only one copy of each ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 4 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "<|endoftext|>/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  'aaaaa'\n  >>> removeVowel('aaBAA')\n  'BAA'\n  >>> removeVowel('zbcd')\n  'zbc'\n  */\nconst removeVowel = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  'aaaaa'\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  'aaaaa'\n  >>> removeNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  'aaaaa'\n  >>> removePunctuation('aaBAA')\n  'aaBAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  'aaaaa'\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeNewline is a function that takes string and returns string without newline.\n  >>> removeNewline('')\n  ''\n  >>> removeNewline(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewline('abcdef')\n  'abcdef'\n  >>> removeNewline('aaaaa')\n  'aaaaa'\n  >>> removeNewline('aaBAA')\n  'aaBAA'\n  >>> removeNewline('zbcd')\n  'zbc'\n  */\nconst removeNewline = (text) => {\n  return text.replace(/\\n/g, '');\n};\n\n/*\n  removeNewlines is a function that takes string and returns string without newlines.\n  >>> removeNewlines('')\n  ''\n  >>> removeNewlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewlines('abcdef')\n  'abcdef'\n  >>> removeNewlines('aaaaa')\n  'aaaaa'\n  >>> removeNewlines('aaBAA')\n  'aaBAA'\n  >>> removeNewlines('zbcd')\n  'zbc'\n  */\nconst removeNewlines = (text) => {\n  return text.replace(/[\\r\\n]/g, '');\n};\n\n/*\n  removeSpaces is a function that takes string and returns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  'aaaaa'\n  >>> removeSpaces('aaBAA')\n  'aaBAA'\n  >>> removeSpaces('zbcd')\n  'zbc'\n  */\nconst removeSpaces = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeNewlineAndSpaces is a function that takes string and returns string without newline and spaces.\n  >>> removeNewlineAndSpaces('')\n  ''\n  >>> removeNewlineAndSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewlineAndSpaces('abcdef')\n  'abcdef'\n  >>> removeNewlineAndSpaces('aaaaa')\n  'aaaaa'\n  >>> removeNewlineAndSpaces('aaBAA')\n  'aaBAA'\n  >>> removeNewlineAndSpaces('zbcd')\n  'zbc'\n  */\nconst removeNewlineAndSpaces = (text) => {\n  return text.replace(/[\\r\\n ]/g, '');\n};\n\n/*\n  removeNewlineAndSpaces is a function that takes string and returns string without newline and spaces.\n  >>> removeNewlineAndSpaces('')\n  ''\n  >>> removeNewlineAndSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNewlineAndSpaces('abcdef')\n  'abcdef'\n  >>> removeNewlineAndSpaces('aaaaa')\n  'aaaaa'\n  >>> removeNewlineAndSpaces('aaBAA')\n  'aaBAA'\n  >>> removeNewlineAndSpaces('zbcd')\n  'zbc'\n  */\nconst removeNewlineAndSpaces = (text) => {\n  return text.replace(/[\\r\\n ]/g, '');\n};\n\n/*\n  removeNewlineAndSpaces is a function that takes string and returns string without newline and spaces.\n  >>> removeNewlineAndSpaces('')\n  ''\n  >>> removeNewlineAndSpaces(\"abcdef\\nghijklm\")", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> aboveAndBelow([1, 2, 4, 10], 100, 5)\n  false\n  >>> aboveAndBelow([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst aboveAndBelow = (l, t, delta) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Multiply two numbers x and y\n  >>> lend(2, 3)\n  6\n  >>> lend(5, 7)\n  21\n  */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  3\n  */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of x divided by y\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  3\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*Get the sign of x\n  >>> lend(2, 3)\n  -1\n  >>> lend(5, 7)\n  1\n  */\nconst sign = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of x\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the floor of x\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  2\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> lend(2, 3)\n  3\n  >>> lend(5, 7)\n  5\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  2\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of x\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  2\n  */\nconst trunc = (x) => {\n  return Math.trunc(x);\n};\n\n/*Get the natural logarithm of x\n  >>> lend(2, 3)\n  0\n  >>> lend(5, 7)\n  1\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of x\n  >>> lend(2, 3)\n  0\n  >>> lend(5, 7)\n  1\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base 2 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the base 2 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base e logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst loge = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base e logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*Get the base 2 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst exp2 = (x) => {\n  return Math.exp2(x);\n};\n\n/*Get the base 2 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst exp10 = (x) => {\n  return Math.exp10(x);\n};\n\n/*Get the base 10 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst expm1 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the base 10 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst expm2 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the base e exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst expm10 = (x) => {\n  return Math.expm1(x);\n};\n\n/*Get the natural logarithm of x\n  >>> lend(2, 3)\n  0\n  >>> lend(5, 7)\n  1\n  */\nconst ln2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the natural logarithm of x\n  >>> lend(2, 3)\n  0\n  >>> lend(5, 7)\n  1\n  */\nconst ln10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the natural logarithm of x\n  >>> lend(2, 3)\n  0\n  >>> lend(5, 7)\n  1\n  */\nconst logn = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base 2 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logn2 = (x) => {\n  return Math.log2(x);\n};\n\n/*Get the base 2 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logn10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logn1 = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base 10 logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb10 = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base e logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb2 = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base e logarithm of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb1 = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base 10 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb10e = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base 10 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb1e = (x) => {\n  return Math.log10(x);\n};\n\n/*Get the base e exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb1ee = (x) => {\n  return Math.log(x);\n};\n\n/*Get the base 2 exponential of x\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst logb2e = (x) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[^>]*>/g);\n  const closingBrackets = brackets.match(/<[^>]*>/g);\n\n  if (openingBrackets && closingBrackets) {\n    const openingBracketsCount = openingBrackets.length;\n    const closingBracketsCount = closingBrackets.length;\n\n    if (openingBracketsCount === closingBracketsCount) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n};\n\n/**\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n  >>> rightBracketing(\"<<><>>\")\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "<|endoftext|>/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let flat = true;\n  for (let i = 0; i < l.length; i++) {\n    if (flat) {\n      flat = l[i] > l[i + 1];\n    } else {\n      flat = l[i] < l[i + 1];\n    }\n  }\n  return flat;\n};\n\n/*Return true is list elements are increasing or decreasing.\n  >>> increasing([1, 2, 4, 20])\n  true\n  >>> increasing([1, 20, 4, 10])\n  false\n  >>> increasing([4, 1, 0, -10])\n  true\n  */\nconst increasing = (l) => {\n  let increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (increasing) {\n      increasing = l[i] < l[i + 1];\n    } else {\n      increasing = l[i] > l[i + 1];\n    }\n  }\n  return increasing;\n};\n\n/*Return true is list elements are decreasing or increasing.\n  >>> decreasing([1, 2, 4, 20])\n  true\n  >>> decreasing([1, 20, 4, 10])\n  false\n  >>> decreasing([4, 1, 0, -10])\n  true\n  */\nconst decreasing = (l) => {\n  let decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (decreasing) {\n      decreasing = l[i] > l[i + 1];\n    } else {\n      decreasing = l[i] < l[i + 1];\n    }\n  }\n  return decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  false\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] < l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  false\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] > l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  false\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] > l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  false\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] < l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  false\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] > l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  false\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] < l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  false\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_decreasing) {\n      strictly_decreasing = l[i] > l[i + 1];\n    } else {\n      strictly_decreasing = l[i] < l[i + 1];\n    }\n  }\n  return strictly_decreasing;\n};\n\n/*Return true is list elements are strictly increasing or strictly decreasing.\n  >>> strictly_increasing([1, 2, 4, 20])\n  true\n  >>> strictly_increasing([1, 20, 4, 10])\n  false\n  >>> strictly_increasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_increasing = (l) => {\n  let strictly_increasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (strictly_increasing) {\n      strictly_increasing = l[i] < l[i + 1];\n    } else {\n      strictly_increasing = l[i] > l[i + 1];\n    }\n  }\n  return strictly_increasing;\n};\n\n/*Return true is list elements are strictly decreasing or strictly increasing.\n  >>> strictly_decreasing([1, 2, 4, 20])\n  true\n  >>> strictly_decreasing([1, 20, 4, 10])\n  false\n  >>> strictly_decreasing([4, 1, 0, -10])\n  true\n  */\nconst strictly_decreasing = (l) => {\n  let strictly_decreasing = true;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "<|endoftext|>/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique fine elements for two lists.\n  >>> fine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> fine([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst fine = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2[j++]);\n    }\n  }\n  while (i < l1.length) {\n    l3.push(l1[i++]);\n  }\n  while (j < l2.length) {\n    l3.push(l2[j++]);\n  }\n  return l3;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l3.push(l1[i++]);\n    } else {\n      l3.push(l2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigPrimeFactor(13195)\n  13\n  >>> bigPrimeFactor(2048)\n  3\n  */\nconst bigPrimeFactor = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return i\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> factors(13195)\n  4\n  >>> factors(2048)\n  2\n  */\nconst factors = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactors(13195)\n  4\n  >>> primeFactors(2048)\n  2\n  */\nconst primeFactors = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactors(13195)\n  4\n  >>> primeFactors(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> primeFactorsOf(13195)\n  4\n  >>> primeFactorsOf(2048)\n  2\n  */\nconst primeFactorsOf = (n) => {\n  let factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  return factors\n}\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/[^()]+/g);\n  const max_level = Math.max.apply(null, paren_groups);\n  return paren_groups.map(level => level === max_level? level : max_level);\n};\n\n/**\n * Parse a string representing a mathematical expression and return the parsed expression.\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '(5+3)*6' -> [5, 3, 6]\n * E.g. '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "<|endoftext|>/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i += 1) {\n    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== bracket) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBrackets(\"(())\")\n * true\n * >>> hasBrackets(\"()\")\n * false\n * >>> hasBrackets(\"(()\")\n * false\n * >>> hasBrackets(\"(()())\")\n * false\n */\nconst hasBrackets = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBrackets(\"(())\")\n * true\n * >>> hasBrackets(\"()\")\n * false\n * >>> hasBrackets(\"(()\")\n * false\n * >>> hasBrackets(\"(()())\")\n * false\n */\nconst hasBracketsNoParens = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBracketsNoParens(\"(())\")\n * true\n * >>> hasBracketsNoParens(\"()\")\n * false\n * >>> hasBracketsNoParens(\"(()\")\n * false\n * >>> hasBracketsNoParens(\"(()())\")\n * false\n */\nconst hasBracketsNoParensNoBrackets = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBracketsNoParensNoBrackets(\"(())\")\n * true\n * >>> hasBracketsNoParensNoBrackets(\"()\")\n * false\n * >>> hasBracketsNoParensNoBrackets(\"(()\")\n * false\n * >>> hasBracketsNoParensNoBrackets(\"(()())\")\n * false\n */\nconst hasBracketsNoParensNoBracketsNoParens = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBracketsNoParensNoBracketsNoParens(\"(())\")\n * true\n * >>> hasBracketsNoParensNoBracketsNoParens(\"()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParens(\"(()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParens(\"(()())\")\n * false\n */\nconst hasBracketsNoParensNoBracketsNoParensNoBrackets = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBracketsNoParensNoBracketsNoParensNoBrackets(\"(())\")\n * true\n * >>> hasBracketsNoParensNoBracketsNoParensNoBrackets(\"()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParensNoBrackets(\"(()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParensNoBrackets(\"(()())\")\n * false\n */\nconst hasBracketsNoParensNoBracketsNoParensNoBracketsNoParens = (str) => {\n  const stack = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const char = str[i];\n    if (char === \"(\") {\n      stack.push(char);\n    } else if (char === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const openingBracket = stack.pop();\n      if (openingBracket!== char) {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check whether the given string has any \"(\" in the string and no \")\"\n * in the string.\n *\n * >>> hasBracketsNoParensNoBracketsNoParensNoBracketsNoParens(\"(())\")\n * true\n * >>> hasBracketsNoParensNoBracketsNoParensNoBracketsNoParens(\"()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParensNoBracketsNoParens(\"(()\")\n * false\n * >>> hasBracketsNoParensNoBracketsNoParensNoBracketsNoParens(\"(()())\")\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = [\n    xs[0] * derivative(xs.slice(1)),\n    xs[1] * derivative(xs.slice(1)),\n  ]\n  for (let i = 2; i < n; i++) {\n    d[i] = d[i] + d[i-1]\n  }\n  return d\n}\n\n/* Return sum of all elements in an array.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 0])\n  6\n  >>> sum([1, 2, 3, 0])\n  6\n  >>> sum([1, 2, 3, 0])\n  6\n  */\nconst sum = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += xs[i]\n  }\n  return s\n}\n\n/* Return product of all elements in an array.\n  >>> product([1, 2, 3])\n  6\n  >>> product([1, 2, 3, 0])\n  6\n  >>> product([1, 2, 3, 0])\n  6\n  >>> product([1, 2, 3, 0])\n  6\n  */\nconst product = (xs) => {\n  let p = 1\n  for (let i = 0; i < xs.length; i++) {\n    p *= xs[i]\n  }\n  return p\n}\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3])\n  1.5\n  >>> mean([1, 2, 3, 0])\n  1.5\n  >>> mean([1, 2, 3, 0])\n  1.5\n  >>> mean([1, 2, 3, 0])\n  1.5\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length\n}\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 0])\n  2\n  >>> median([1, 2, 3, 0])\n  2\n  >>> median([1, 2, 3, 0])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length\n  if (n % 2 === 0) {\n    const m = xs[n / 2]\n    return m < xs[0]? m : xs[0]\n  }\n  const m = xs[(n - 1) / 2]\n  return m < xs[n / 2]? m : xs[n / 2]\n}\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([1, 2, 3, 0])\n  1\n  >>> mode([1, 2, 3, 0])\n  1\n  >>> mode([1, 2, 3, 0])\n  1\n  */\nconst mode = (xs) => {\n  const m = {}\n  let max = 0\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i]\n    if (m.hasOwnProperty(x)) {\n      m[x] = m[x] + 1\n    } else {\n      m[x] = 1\n    }\n    if (m[x] > max) {\n      max = m[x]\n    }\n  }\n  return max\n}\n\n/* Return standard deviation of all elements in an array.\n  >>> stddev([1, 2, 3])\n  1.1180339887498949\n  >>> stddev([1, 2, 3, 0])\n  1.1180339887498949\n  >>> stddev([1, 2, 3, 0])\n  1.1180339887498949\n  >>> stddev([1, 2, 3, 0])\n  1.1180339887498949\n  */\nconst stddev = (xs) => {\n  const n = xs.length\n  const mean = xs.reduce((acc, x) => acc + x, 0) / n\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / n\n  return Math.sqrt(variance)\n}\n\n/* Return sum of squared elements in an array.\n  >>> sumsq([1, 2, 3])\n  9\n  >>> sumsq([1, 2, 3, 0])\n  9\n  >>> sumsq([1, 2, 3, 0])\n  9\n  >>> sumsq([1, 2, 3, 0])\n  9\n  */\nconst sumsq = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.pow(xs[i], 2)\n  }\n  return s\n}\n\n/* Return sum of absolute squared elements in an array.\n  >>> sumabssq([1, 2, 3])\n  9\n  >>> sumabssq([1, 2, 3, 0])\n  9\n  >>> sumabssq([1, 2, 3, 0])\n  9\n  >>> sumabssq([1, 2, 3, 0])\n  9\n  */\nconst sumabssq = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.abs(xs[i] * xs[i])\n  }\n  return s\n}\n\n/* Return sum of squared differences between elements in an array.\n  >>> sumsqdiff([1, 2, 3])\n  9\n  >>> sumsqdiff([1, 2, 3, 0])\n  9\n  >>> sumsqdiff([1, 2, 3, 0])\n  9\n  >>> sumsqdiff([1, 2, 3, 0])\n  9\n  */\nconst sumsqdiff = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += (xs[i] - mean(xs)) * (xs[i] - mean(xs))\n  }\n  return s\n}\n\n/* Return sum of absolute squared differences between elements in an array.\n  >>> sumabssqdiff([1, 2, 3])\n  9\n  >>> sumabssqdiff([1, 2, 3, 0])\n  9\n  >>> sumabssqdiff([1, 2, 3, 0])\n  9\n  >>> sumabssqdiff([1, 2, 3, 0])\n  9\n  */\nconst sumabssqdiff = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.abs((xs[i] - mean(xs)) * (xs[i] - mean(xs)))\n  }\n  return s\n}\n\n/* Return sum of squared absolute differences between elements in an array.\n  >>> sumsqabsddiff([1, 2, 3])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  */\nconst sumsqabsddiff = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.abs((xs[i] - mean(xs)) * (xs[i] - mean(xs)))\n  }\n  return s\n}\n\n/* Return sum of squared absolute differences between elements in an array.\n  >>> sumsqabsddiff([1, 2, 3])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  */\nconst sumsqabsddiff = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.abs((xs[i] - mean(xs)) * (xs[i] - mean(xs)))\n  }\n  return s\n}\n\n/* Return sum of squared absolute differences between elements in an array.\n  >>> sumsqabsddiff([1, 2, 3])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  */\nconst sumsqabsddiff = (xs) => {\n  let s = 0\n  for (let i = 0; i < xs.length; i++) {\n    s += Math.abs((xs[i] - mean(xs)) * (xs[i] - mean(xs)))\n  }\n  return s\n}\n\n/* Return sum of squared absolute differences between elements in an array.\n  >>> sumsqabsddiff([1, 2, 3])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  >>> sumsqabsddiff([1, 2, 3, 0])\n  9\n  */\nconst sumsqabsddiff = (xs) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// TESTS\n\nconst testFibFib = (n) => {\n  console.log(`fibfib(n) = ${fibfib(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib2 = (n) => {\n  console.log(`fibfib(n) = ${fibfib2(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib3 = (n) => {\n  console.log(`fibfib(n) = ${fibfib3(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib4 = (n) => {\n  console.log(`fibfib(n) = ${fibfib4(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib5 = (n) => {\n  console.log(`fibfib(n) = ${fibfib5(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib6 = (n) => {\n  console.log(`fibfib(n) = ${fibfib6(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib7 = (n) => {\n  console.log(`fibfib(n) = ${fibfib7(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib8 = (n) => {\n  console.log(`fibfib(n) = ${fibfib8(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib9 = (n) => {\n  console.log(`fibfib(n) = ${fibfib9(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib10 = (n) => {\n  console.log(`fibfib(n) = ${fibfib10(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib11 = (n) => {\n  console.log(`fibfib(n) = ${fibfib11(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib12 = (n) => {\n  console.log(`fibfib(n) = ${fibfib12(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib13 = (n) => {\n  console.log(`fibfib(n) = ${fibfib13(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib14 = (n) => {\n  console.log(`fibfib(n) = ${fibfib14(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib15 = (n) => {\n  console.log(`fibfib(n) = ${fibfib15(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib16 = (n) => {\n  console.log(`fibfib(n) = ${fibfib16(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib17 = (n) => {\n  console.log(`fibfib(n) = ${fibfib17(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib18 = (n) => {\n  console.log(`fibfib(n) = ${fibfib18(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib19 = (n) => {\n  console.log(`fibfib(n) = ${fibfib19(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib20 = (n) => {\n  console.log(`fibfib(n) = ${fibfib20(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib21 = (n) => {\n  console.log(`fibfib(n) = ${fibfib21(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib22 = (n) => {\n  console.log(`fibfib(n) = ${fibfib22(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib23 = (n) => {\n  console.log(`fibfib(n) = ${fibfib23(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib24 = (n) => {\n  console.log(`fibfib(n) = ${fibfib24(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib25 = (n) => {\n  console.log(`fibfib(n) = ${fibfib25(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib26 = (n) => {\n  console.log(`fibfib(n) = ${fibfib26(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib27 = (n) => {\n  console.log(`fibfib(n) = ${fibfib27(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib28 = (n) => {\n  console.log(`fibfib(n) = ${fibfib28(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib29 = (n) => {\n  console.log(`fibfib(n) = ${fibfib29(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib30 = (n) => {\n  console.log(`fibfib(n) = ${fibfib30(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib31 = (n) => {\n  console.log(`fibfib(n) = ${fibfib31(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib32 = (n) => {\n  console.log(`fibfib(n) = ${fibfib32(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib33 = (n) => {\n  console.log(`fibfib(n) = ${fibfib33(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib34 = (n) => {\n  console.log(`fibfib(n) = ${fibfib34(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib35 = (n) => {\n  console.log(`fibfib(n) = ${fibfib35(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib36 = (n) => {\n  console.log(`fibfib(n) = ${fibfib36(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib37 = (n) => {\n  console.log(`fibfib(n) = ${fibfib37(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib38 = (n) => {\n  console.log(`fibfib(n) = ${fibfib38(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib39 = (n) => {\n  console.log(`fibfib(n) = ${fibfib39(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib40 = (n) => {\n  console.log(`fibfib(n) = ${fibfib40(n)}, n = ${n}`);\n};\n\n// TESTS\n\nconst testFibFib41 = (n) => {\n  console.log(`fibfib(n) = ${fibfib41(n)}, n = ${", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "<|endoftext|>/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount2 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount2(\"abcde\")\n  2\n  >>> vowelCount2(\"ACEDY\")\n  3\n  */\nconst vowelCount2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount3 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount3(\"abcde\")\n  2\n  >>> vowelCount3(\"ACEDY\")\n  3\n  */\nconst vowelCount3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount4 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount4(\"abcde\")\n  2\n  >>> vowelCount4(\"ACEDY\")\n  3\n  */\nconst vowelCount4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount5 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount5(\"abcde\")\n  2\n  >>> vowelCount5(\"ACEDY\")\n  3\n  */\nconst vowelCount5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount6 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount6(\"abcde\")\n  2\n  >>> vowelCount6(\"ACEDY\")\n  3\n  */\nconst vowelCount6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount7 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount7(\"abcde\")\n  2\n  >>> vowelCount7(\"ACEDY\")\n  3\n  */\nconst vowelCount7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount8 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount8(\"abcde\")\n  2\n  >>> vowelCount8(\"ACEDY\")\n  3\n  */\nconst vowelCount8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount9 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount9(\"abcde\")\n  2\n  >>> vowelCount9(\"ACEDY\")\n  3\n  */\nconst vowelCount9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount10 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount10(\"abcde\")\n  2\n  >>> vowelCount10(\"ACEDY\")\n  3\n  */\nconst vowelCount10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount11 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount11(\"abcde\")\n  2\n  >>> vowelCount11(\"ACEDY\")\n  3\n  */\nconst vowelCount11 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > length\n  if (shift < 0) return str.reverse(); // shift < 0\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += str.charAt(i) + str.charAt(i + shift);\n  }\n  return result;\n};\n\n/*\n  Return the first n elements of the given array, ignoring the first element if\n  the array has fewer than n elements.\n  >>> first([1,2,3,4,5,6,7,8,9])\n  [1,2,3]\n  >>> first([1,2,3,4,5,6,7,8,9], 2)\n  [1,2]\n  >>> first([1,2,3,4,5,6,7,8,9], 3)\n  [1,2,3]\n  >>> first([1,2,3,4,5,6,7,8,9], 4)\n  [1,2,3,4]\n  >>> first([1,2,3,4,5,6,7,8,9], 5)\n  [1,2,3,4,5]\n  >>> first([1,2,3,4,5,6,7,8,9], 6)\n  [1,2,3,4,5,6]\n  >>> first([1,2,3,4,5,6,7,8,9], 7)\n  [1,2,3,4,5,6,7]\n  >>> first([1,2,3,4,5,6,7,8,9], 8)\n  [1,2,3,4,5,6,7,8]\n  >>> first([1,2,3,4,5,6,7,8,9], 9)\n  [1,2,3,4,5,6,7,8,9]\n  */\nconst first = (array, n = 1) => {\n  if (array.length < n) return array; // n < array.length\n  return array.slice(0, n);\n};\n\n/*\n  Return the last n elements of the given array, ignoring the last element if\n  the array has fewer than n elements.\n  >>> last([1,2,3,4,5,6,7,8,9])\n  [8,7,6,5,4,3,2,1]\n  >>> last([1,2,3,4,5,6,7,8,9], 2)\n  [7,6,5,4,3,2,1]\n  >>> last([1,2,3,4,5,6,7,8,9], 3)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 4)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 5)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 6)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 7)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 8)\n  [6,7,8,9,5,4,3,2]\n  >>> last([1,2,3,4,5,6,7,8,9], 9)\n  [6,7,8,9,5,4,3,2]\n  */\nconst last = (array, n = 1) => {\n  if (array.length < n) return array; // n < array.length\n  return array.slice(-n);\n};\n\n/*\n  Return the sum of the given array of numbers.\n  >>> sum([1,2,3,4,5,6,7,8,9])\n  45\n  >>> sum([1,2,3,4,5,6,7,8,9], 2)\n  55\n  >>> sum([1,2,3,4,5,6,7,8,9], 3)\n  66\n  >>> sum([1,2,3,4,5,6,7,8,9], 4)\n  77\n  >>> sum([1,2,3,4,5,6,7,8,9], 5)\n  88\n  >>> sum([1,2,3,4,5,6,7,8,9], 6)\n  99\n  >>> sum([1,2,3,4,5,6,7,8,9], 7)\n  108\n  >>> sum([1,2,3,4,5,6,7,8,9], 8)\n  117\n  >>> sum([1,2,3,4,5,6,7,8,9], 9)\n  129\n  */\nconst sum = (array) => {\n  let total = 0;\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total;\n};\n\n/*\n  Return the product of the given array of numbers.\n  >>> product([1,2,3,4,5,6,7,8,9])\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 2)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 3)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 4)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 5)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 6)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 7)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 8)\n  3628800\n  >>> product([1,2,3,4,5,6,7,8,9], 9)\n  3628800\n  */\nconst product = (array) => {\n  let product = 1;\n  for (let i = 0; i < array.length; i++) {\n    product *= array[i];\n  }\n  return product;\n};\n\n/*\n  Return the mean of the given array of numbers.\n  >>> mean([1,2,3,4,5,6,7,8,9])\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 2)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 3)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 4)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 5)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 6)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 7)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 8)\n  3.6\n  >>> mean([1,2,3,4,5,6,7,8,9], 9)\n  3.6\n  */\nconst mean = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n};\n\n/*\n  Return the median of the given array of numbers.\n  >>> median([1,2,3,4,5,6,7,8,9])\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 2)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 3)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 4)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 5)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 6)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 7)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 8)\n  4\n  >>> median([1,2,3,4,5,6,7,8,9], 9)\n  4\n  */\nconst median = (array) => {\n  let middle = Math.floor(array.length / 2);\n  let lower = array.slice(0, middle);\n  let upper = array.slice(middle);\n  return lower.length < middle.length? lower : upper;\n};\n\n/*\n  Return the mode of the given array of numbers.\n  >>> mode([1,2,3,4,5,6,7,8,9])\n  [1,2,3]\n  >>> mode([1,2,3,4,5,6,7,8,9], 2)\n  [1,2,3]\n  >>> mode([1,2,3,4,5,6,7,8,9], 3)\n  [1,2,3]\n  >>> mode([1,2,3,4,5,6,7,8,9], 4)\n  [1,2,3,4]\n  >>> mode([1,2,3,4,5,6,7,8,9], 5)\n  [1,2,3,4,5]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  const evenValueIndex = evenValues.reduce((acc, val) => {\n    acc[val] = acc[val]? acc[val] + 1 : 1;\n    return acc;\n  }, {});\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestEvenIndex = evenValueIndex[smallestEvenValue];\n  const smallestIndex = evenValues.reduce((acc, val) => {\n    if (val === smallestEvenValue) {\n      return Math.min(acc, smallestEvenIndex);\n    }\n    return acc;\n  }, 0);\n  return [smallestEvenValue, smallestIndex];\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOdds = (arr) => {\n  const oddValues = arr.filter((val) => val % 2 === 1);\n  const oddValueIndex = oddValues.reduce((acc, val) => {\n    acc[val] = acc[val]? acc[val] + 1 : 1;\n    return acc;\n  }, {});\n  const smallestOddValue = Math.max(...oddValues);\n  const smallestOddIndex = oddValueIndex[smallestOddValue];\n  const smallestIndex = oddValues.reduce((acc, val) => {\n    if (val === smallestOddValue) {\n      return Math.max(acc, smallestOddIndex);\n    }\n    return acc;\n  }, 0);\n  return [smallestOddValue, smallestIndex];\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOddsIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2 === 1);\n  const oddValueIndex = oddValues.reduce((acc, val) => {\n    acc[val] = acc[val]? acc[val] + 1 : 1;\n    return acc;\n  }, {});\n  const smallestOddValue = Math.max(...oddValues);\n  const smallestOddIndex = oddValueIndex[smallestOddValue];\n  const smallestIndex = oddValues.reduce((acc, val) => {\n    if (val === smallestOddValue) {\n      return Math.max(acc, smallestOddIndex);\n    }\n    return acc;\n  }, 0);\n  return [smallestOddValue, smallestIndex];\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustleOddsIndex2 = (arr) => {\n  const oddValues = arr.filter((val) => val % 2 === 1);\n  const oddValueIndex = oddValues.reduce((acc, val) => {\n    acc[val] = acc[val]? acc[val] + 1 : 1;\n    return acc;\n  }, {});\n  const smallestOddValue = Math.max(...oddValues);\n  const smallestOddIndex = oddValueIndex[smallestOddValue];\n  const smallestIndex = oddValues.reduce((acc, val) => {\n    if (val === smallestOddValue) {\n      return Math.max(acc, smallestOddIndex);\n    }\n    return acc;\n  }, 0);\n  return [smallestOddValue, smalle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  const freq = {};\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (freq[num] === undefined) {\n      freq[num] = 1;\n    } else {\n      freq[num] += 1;\n    }\n  }\n  for (let num in freq) {\n    if (freq[num] > 0) return num;\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers representing a phone number. The phone number consists of 10 digits,\n  each digit 0-9. You are required to convert each digit of the phone number to a single integer and\n  then find the sum of all possible phone numbers that can be made with those digits.\n  Examples:\n      phoneNumberToInt(\"0111222333\") == 123\n      phoneNumberToInt(\"0111222334\") == 123\n      phoneNumberToInt(\"0111222335\") == 123\n      phoneNumberToInt(\"0111222336\") == 123\n      phoneNumberToInt(\"0111222337\") == 123\n      phoneNumberToInt(\"0111222338\") == 123\n      phoneNumberToInt(\"0111222339\") == 123\n      phoneNumberToInt(\"0111222340\") == 123\n      phoneNumberToInt(\"0111222341\") == 123\n      phoneNumberToInt(\"0111222342\") == 123\n      phoneNumberToInt(\"0111222343\") == 123\n      phoneNumberToInt(\"0111222344\") == 123\n      phoneNumberToInt(\"0111222345\") == 123\n      phoneNumberToInt(\"0111222346\") == 123\n      phoneNumberToInt(\"0111222347\") == 123\n      phoneNumberToInt(\"0111222348\") == 123\n      phoneNumberToInt(\"0111222349\") == 123\n      phoneNumberToInt(\"0111222350\") == 123\n      phoneNumberToInt(\"0111222351\") == 123\n      phoneNumberToInt(\"0111222352\") == 123\n      phoneNumberToInt(\"0111222353\") == 123\n      phoneNumberToInt(\"0111222354\") == 123\n      phoneNumberToInt(\"0111222355\") == 123\n      phoneNumberToInt(\"0111222356\") == 123\n      phoneNumberToInt(\"0111222357\") == 123\n      phoneNumberToInt(\"0111222358\") == 123\n      phoneNumberToInt(\"0111222359\") == 123\n      phoneNumberToInt(\"0111222360\") == 123\n      phoneNumberToInt(\"0111222361\") == 123\n      phoneNumberToInt(\"0111222362\") == 123\n      phoneNumberToInt(\"0111222363\") == 123\n      phoneNumberToInt(\"0111222364\") == 123\n      phoneNumberToInt(\"0111222365\") == 123\n      phoneNumberToInt(\"0111222366\") == 123\n      phoneNumberToInt(\"0111222367\") == 123\n      phoneNumberToInt(\"0111222368\") == 123\n      phoneNumberToInt(\"0111222369\") == 123\n      phoneNumberToInt(\"0111222370\") == 123\n      phoneNumberToInt(\"0111222371\") == 123\n      phoneNumberToInt(\"0111222372\") == 123\n      phoneNumberToInt(\"0111222373\") == 123\n      phoneNumberToInt(\"0111222374\") == 123\n      phoneNumberToInt(\"0111222375\") == 123\n      phoneNumberToInt(\"0111222376\") == 123\n      phoneNumberToInt(\"0111222377\") == 123\n      phoneNumberToInt(\"0111222378\") == 123\n      phoneNumberToInt(\"0111222379\") == 123\n      phoneNumberToInt(\"0111222380\") == 123\n      phoneNumberToInt(\"0111222381\") == 123\n      phoneNumberToInt(\"0111222382\") == 123\n      phoneNumberToInt(\"0111222383\") == 123\n      phoneNumberToInt(\"0111222384\") == 123\n      phoneNumberToInt(\"0111222385\") == 123\n      phoneNumberToInt(\"0111222386\") == 123\n      phoneNumberToInt(\"0111222387\") == 123\n      phoneNumberToInt(\"0111222388\") == 123\n      phoneNumberToInt(\"0111222389\") == 123\n      phoneNumberToInt(\"0111222390\") == 123\n      phoneNumberToInt(\"0111222391\") == 123\n      phoneNumberToInt(\"0111222392\") == 123\n      phoneNumberToInt(\"0111222393\") == 123\n      phoneNumberToInt(\"0111222394\") == 123\n      phoneNumberToInt(\"0111222395\") == 123\n      phoneNumberToInt(\"0111222396\") == 123\n      phoneNumberToInt(\"0111222397\") == 123\n      phoneNumberToInt(\"0111222398\") == 123\n      phoneNumberToInt(\"0111222399\") == 123\n      phoneNumberToInt(\"0111222400\") == 123\n      phoneNumberToInt(\"0111222401\") == 123\n      phoneNumberToInt(\"0111222402\") == 123\n      phoneNumberToInt(\"0111222403\") == 123\n      phoneNumberToInt(\"0111222404\") == 123\n      phoneNumberToInt(\"0111222405\") == 123\n      phoneNumberToInt(\"0111222406\") == 123\n      phoneNumberToInt(\"0111222407\") == 123\n      phoneNumberToInt(\"0111222408\") == 123\n      phoneNumberToInt(\"0111222409\") == 123\n      phoneNumberToInt(\"0111222410\") == 123\n      phoneNumberToInt(\"0111222411\") == 123\n      phoneNumberToInt(\"0111222412\") == 123\n      phoneNumberToInt(\"0111222413\") == 123\n      phoneNumberToInt(\"0111222414\") == 123\n      phoneNumberToInt(\"0111222415\") == 123\n      phoneNumberToInt(\"0111222416\") == 123\n      phoneNumberToInt(\"0111222417\") == 123\n      phoneNumberToInt(\"0111222418\") == 123\n      phoneNumberToInt(\"0111222419\") == 123\n      phoneNumberToInt(\"0111222420\") == 123\n      phoneNumberToInt(\"0111222421\") == 123\n      phoneNumberToInt(\"0111222422\") == 123\n      phoneNumberToInt(\"0111222423\") == 123\n      phoneNumberToInt(\"0111222424\") == 123\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filteredStrings.push(strings[i]);\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in reverse order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverse = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in ascending order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListAsc = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in descending order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListDesc = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in ascending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListAscWithDup = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in descending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [4, 3, 2, 1]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListDescWithDup = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in ascending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListAscWithDupReverse = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in descending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [4, 3, 2, 1]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListDescWithDupReverse = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in ascending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListAscWithDupAsc = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in descending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [4, 3, 2, 1]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListDescWithDupAsc = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return 1;\n    if (a > b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in ascending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n  foreignSortList([5, 5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListAscWithDupDesc = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in descending order with duplicates.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const [a, b, c] = sides;\n  if (a > b && a > c) {\n    return a + b + c;\n  }\n  if (b > a && b > c) {\n    return b + c + a;\n  }\n  if (c > a && c > b) {\n    return c + a + b;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > b && d > c) {\n    return d + a + b + c;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > b && d > c) {\n    return d + a + b + c;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > b && d > c) {\n    return d + a + b + c;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > b && d > c) {\n    return d + a + b + c;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > b && d > c) {\n    return d + a + b + c;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumCircumference(3, 4, 5) == 12.00\n  triangulumCircumference(1, 2, 10) == -1\n  */\nconst triangulumCircumference = (a, b, c, d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))) => {\n  const sides = [a, b, c, d];\n  const [a, b, c, d] = sides;\n  if (a > b && a > c && a > d) {\n    return a + b + c + d;\n  }\n  if (b > a && b > c && b > d) {\n    return b + c + d + a;\n  }\n  if (c > a && c > b && c > d) {\n    return c + d + a + b;\n  }\n  if (d > a && d > ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  return maxSum <= max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else if (arr[mid] < arr[min]) {\n      min = mid + 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min + ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst2;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi') ➞ 8\n  countChar('hihihihihihihihihi') ➞ 9\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string appears in the string.\n\n  Examples\n  countChar('hi') ➞ 0\n  countChar('hihi') ➞ 2\n  countChar('hihihi') ➞ 3\n  countChar('hihihihi') ➞ 4\n  countChar('hihihihihi') ➞ 5\n  countChar('hihihihihihi') ➞ 6\n  countChar('hihihihihihihi') ➞ 7\n  countChar('hihihihihihihihi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 2 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 1 prime number\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 0 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 4 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 2 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 1 prime number\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 0 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] <= a) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 4 prime numbers\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isElementaryWorldPower(x, n / 2);\n  }\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = hexNumArray2.length;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = hexNumArray3.length;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = hexNumArray4.length;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = hexNumArray5.length;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = hexNumArray6.length;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = hexNumArray7.length;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = hexNumArray8.length;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = hexNumArray9.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = hexNumArrayE.length;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = hexNumArrayF.length;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = hexNumArrayG.length;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = hexNumArrayH.length;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = hexNumArrayI.length;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = hexNumArrayJ.length;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = hexNumArrayK.length;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = hexNumArrayL.length;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = hexNumArrayM.length;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = hexNumArrayN.length;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = hexNumArrayO.length;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = hexNumArrayP.length;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = hexNumArrayQ.length;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = hexNumArrayR.length;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = hexNumArrayS.length;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = hexNumArrayT.length;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = hexNumArrayU.length;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = hexNumArrayV.length;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = hexNumArrayW.length;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = hexNumArrayX.length;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = hexNumArrayY.length;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = hexNumArrayZ.length;\n  let hexNumArrayA1 = [];\n  let hexNumArrayA1Length = hexNumArrayA1.length;\n  let hexNumArrayA2 = [];\n  let hexNumArrayA2Length = hexNumArrayA2.length;\n  let hexNumArrayA3 = [];\n  let hexNumArrayA3Length = hexNumArrayA3.length;\n  let hexNumArrayA4 = [];\n  let hexNumArrayA4Length = hexNumArrayA4.length;\n  let hexNumArrayA5 = [];\n  let hexNumArrayA5Length = hexNumArrayA5.length;\n  let hexNumArrayA6 = [];\n  let hexNumArrayA6Length = hexNumArrayA6.length;\n  let hexNumArrayA7 = [];\n  let hexNumArrayA7Length = hexNumArrayA7.length;\n  let hexNumArrayA8 = [];\n  let hexNumArrayA8Length = hexNumArrayA8.length;\n  let hexNumArrayA9 = [];\n  let hexNumArrayA9Length = hexNumArrayA9.length;\n  let hexNumArrayA10 = [];\n  let hexNumArrayA10Length = hexNumArrayA10.length;\n  let hexNumArrayA11 = [];\n  let hexNumArrayA11Length = hexNumArrayA11.length;\n  let hexNumArrayA12 = [];\n  let hexNumArrayA12Length = hexNumArrayA12.length;\n  let hexNumArrayA13 = [];\n  let hexNumArrayA13Length = hexNumArrayA13.length;\n  let hexNumArrayA14 = [];\n  let hexNumArrayA14Length = hexNumArrayA14.length;\n  let hexNumArrayA15 = [];\n  let hexNumArrayA15Length = hexNumArrayA15.length;\n  let hexNumArrayA16 = [];\n  let hexNumArrayA16Length = hexNumArrayA16.length;\n  let hexNumArrayA17 = [];\n  let hexNumArrayA17Length = hexNumArrayA17.length;\n  let hexNumArrayA18 = [];\n  let hexNumArrayA18Length = hexNumArrayA18.length;\n  let hexNumArrayA19 = [];\n  let hexNumArrayA19Length = hexNumArrayA19.length;\n  let hexNumArrayA20 = [];\n  let hexNumArrayA20Length = hexNumArrayA20.length;\n  let hexNumArrayA21 = [];\n  let hexNumArrayA21Length = hexNumArrayA21.length;\n  let hexNumArrayA22 = [];\n  let hexNumArrayA22Length = hexNumArrayA22.length;\n  let hexNumArrayA23 = [];\n  let hexNumArrayA23Length = hexNumArrayA23.length;\n  let hexNumArrayA24 = [];\n  let hexNumArrayA24Length = hexNumArrayA24.length;\n  let hexNumArrayA25 = [];\n  let hexNumArrayA25Length = hexNumArrayA25.length;\n  let hexNumArrayA26 = [];\n  let hexNumArrayA26Length = hexNumArrayA26.length;\n  let hexNumArrayA27 = [];\n  let hexNumArrayA27Length = hexNumArrayA27.length;\n  let hexNumArrayA28 = [];\n  let hexNumArrayA28Length = hexNumArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinaryHelper = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    decimalToBinaryHelper(decimal / 2);\n    binary += decimalToBinaryHelper(decimal % 2);\n  };\n  decimalToBinaryHelper(decimal);\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryToDecimalHelper = (binary) => {\n    if (binary === '0') {\n      return 0;\n    }\n    if (binary === '1') {\n      return 1;\n    }\n    binaryToDecimalHelper(binary.slice(0, -1));\n    decimal += binaryToDecimalHelper(binary.slice(-1));\n  };\n  binaryToDecimalHelper(binary);\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary.\n\n  Examples:\n  decimalToBinary(15)   # returns \"1111\"\n  decimalToBinary(32)   # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinaryHelper = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    decimalToBinaryHelper(decimal / 2);\n    binary += decimalToBinaryHelper(decimal % 2);\n  };\n  decimalToBinaryHelper(decimal);\n  return binary;\n};\n\n/*\n  Write a function that converts binary to hexadecimal.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") // returns \"f\"\n  binaryToHexadecimal(\"100000\") // returns \"10\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  let binaryToHexadecimalHelper = (binary) => {\n    if (binary === '0') {\n      return '0';\n    }\n    if (binary === '1') {\n      return '1';\n    }\n    binaryToHexadecimalHelper(binary.slice(0, -1));\n    hexadecimal += binaryToHexadecimalHelper(binary.slice(-1));\n  };\n  binaryToHexadecimalHelper(binary);\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts hexadecimal to binary.\n\n  Examples:\n  hexadecimalToBinary(\"f\")   // returns \"1111\"\n  hexadecimalToBinary(\"10\")  // returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let hexadecimalToBinaryHelper = (hexadecimal) => {\n    if (hexadecimal === '0') {\n      return '0';\n    }\n    if (hexadecimal === '1') {\n      return '1';\n    }\n    hexadecimalToBinaryHelper(hexadecimal.slice(0, -1));\n    binary += hexadecimalToBinaryHelper(hexadecimal.slice(-1));\n  };\n  hexadecimalToBinaryHelper(hexadecimal);\n  return binary;\n};\n\n/*\n  Write a function that converts binary to octal.\n\n  Examples:\n  binaryToOctal(\"1111\") // returns \"7\"\n  binaryToOctal(\"100000\") // returns \"17\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  let binaryToOctalHelper = (binary) => {\n    if (binary === '0') {\n      return '0';\n    }\n    if (binary === '1') {\n      return '7';\n    }\n    binaryToOctalHelper(binary.slice(0, -1));\n    octal += binaryToOctalHelper(binary.slice(-1));\n  };\n  binaryToOctalHelper(binary);\n  return octal;\n};\n\n/*\n  Write a function that converts octal to binary.\n\n  Examples:\n  octalToBinary(\"7\")   // returns \"1111\"\n  octalToBinary(\"17\")  // returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  let octalToBinaryHelper = (octal) => {\n    if (octal === '0') {\n      return '0';\n    }\n    if (octal === '7') {\n      return '1';\n    }\n    octalToBinaryHelper(octal.slice(0, -1));\n    binary += octalToBinaryHelper(octal.slice(-1));\n  };\n  octalToBinaryHelper(octal);\n  return binary;\n};\n\n/*\n  Write a function that converts decimal to hexadecimal.\n\n  Examples:\n  decimalToHexadecimal(15)   // returns \"15\"\n  decimalToHexadecimal(32)   // returns \"10\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalToHexadecimalHelper = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    decimalToHexadecimalHelper(decimal / 16);\n    hexadecimal += decimalToHexadecimalHelper(decimal % 16);\n  };\n  decimalToHexadecimalHelper(decimal);\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts hexadecimal to decimal.\n\n  Examples:\n  hexadecimalToDecimal(\"15\")   // returns 15\n  hexadecimalToDecimal(\"10\")  // returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  let hexadecimalToDecimalHelper = (hexadecimal) => {\n    if (hexadecimal === '0') {\n      return 0;\n    }\n    if (hexadecimal === '1') {\n      return 1;\n    }\n    hexadecimalToDecimalHelper(hexadecimal.slice(0, -1));\n    decimal += hexadecimalToDecimalHelper(hexadecimal.slice(-1));\n  };\n  hexadecimalToDecimalHelper(hexadecimal);\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to octal.\n\n  Examples:\n  decimalToOctal(15)   // returns \"7\"\n  decimalToOctal(32)   // returns \"17\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let decimalToOctalHelper = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '7';\n    }\n    decimalToOctalHelper(decimal / 8);\n    octal += decimalToOctalHelper(decimal % 8);\n  };\n  decimalToOctalHelper(decimal);\n  return octal;\n};\n\n/*\n  Write a function that converts octal to decimal.\n\n  Examples:\n  octalToDecimal(\"7\")   // returns 15\n  octalToDecimal(\"17\")  // returns 32\n  */\nconst octalToDecimal = (octal) => {\n  let decimal = 0;\n  let octalToDecimalHelper = (octal) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the original list and a product of all the integers in the original list multiplied by a constant integer.\n  >>> kernelSum([2, 4, 6, 8], 2)\n  [4, 8, 12, 16]\n  */\nconst kernelSum = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum, numbers.length * int];\n};\n\n/* Given a list of integers, return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z and A-Z.\n  Return true if it contains only letters a-z and A-Z, otherwise return false.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(aBc) => true\n  isOnlyLetters(abC) => false\n  isOnlyLetters(abdE) => false\n  isOnlyLetters(abdEf) => false\n  isOnlyLetters(abdEfG) => false\n  isOnlyLetters(abdEfGc) => false\n  isOnlyLetters(abdEfGcH) => false\n  isOnlyLetters(abdEfGcHj) => false\n  isOnlyLetters(abdEfGcHjK) => false\n  isOnlyLetters(abdEfGcHjKl) => false\n  isOnlyLetters(abdEfGcHjKlM) => false\n  isOnlyLetters(abdEfGcHjKlMno) => false\n  isOnlyLetters(abdEfGcHjKlMnoP) => false\n  isOnlyLetters(abdEfGcHjKlMnoPq) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqR) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsT) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTv) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvY) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYz) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzA) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAb) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbc) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcd) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdE) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEf) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfg) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgH) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHi) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHij) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijK) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKL) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLM) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMn) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMno) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoP) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPq) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqr) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrt) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrst) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstv) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvY) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvYz) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvYzA) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvYzAb) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvYzAbc) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijKLMnoPqrstvYzAbcd) => false\n  isOnlyLetters(abdEfGcHjKlMnoPqRsTvYzAbcdEfgHijK", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 10);\n  let sumOfGrades = gradesArray.reduce((acc, cur) => acc + cur);\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C+');\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C');\n    } else if (grades[i] >= 1) {\n      letterGrades.push('C-');\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push('D+');\n    } else if (grades[i] >= 0) {\n      letterGrades.push('D');\n    } else {\n      letterGrades.push('D-');\n    }\n  }\n  return letterGrades;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels\n  in the string. Vowels are any character that appears more than once in\n  the string. For example, the string \"abracadabra\" has five vowels.\n*/\nconst vowelsCount = (str) => {\n  let vowelsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.includes(str[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of consonants\n  in the string. Consonants are any character that appears exactly once\n  in the string. For example, the string \"abracadabra\" has six consonants.\n*/\nconst consonantsCount = (str) => {\n  let consonantsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.includes(str[i])) {\n      consonantsCount++;\n    }\n  }\n  return consonantsCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words\n  in the string. Words are separated by spaces. For example, the string\n  \"abc def ghi\" has three words.\n*/\nconst wordsCount = (str) => {\n  let wordsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      wordsCount++;\n    }\n  }\n  return wordsCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences\n  in the string. Sentences are separated by one or more periods. For example,\n  the string \"This is a sentence\" has five sentences.\n*/\nconst sentencesCount = (str) => {\n  let sentencesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '.') {\n      sentencesCount++;\n    }\n  }\n  return sentencesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of syllables\n  in the string. Syllables are any character that appears at least two\n  times in the string. For example, the string \"abracadabra\" has eight syllables.\n*/\nconst syllablesCount = (str) => {\n  let syllablesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.includes(str[i])) {\n      syllablesCount++;\n    }\n  }\n  return syllablesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words\n  in the string. Words are separated by spaces. For example, the string\n  \"abc def ghi\" has three words.\n*/\nconst wordsCount = (str) => {\n  let wordsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      wordsCount++;\n    }\n  }\n  return wordsCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences\n  in the string. Sentences are separated by one or more periods. For example,\n  the string \"This is a sentence\" has five sentences.\n*/\nconst sentencesCount = (str) => {\n  let sentencesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '.') {\n      sentencesCount++;\n    }\n  }\n  return sentencesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of syllables\n  in the string. Syllables are any character that appears at least two\n  times in the string. For example, the string \"abracadabra\" has eight syllables.\n*/\nconst syllablesCount = (str) => {\n  let syllablesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.includes(str[i])) {\n      syllablesCount++;\n    }\n  }\n  return syllablesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words\n  in the string. Words are separated by spaces. For example, the string\n  \"abc def ghi\" has three words.\n*/\nconst wordsCount = (str) => {\n  let wordsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      wordsCount++;\n    }\n  }\n  return wordsCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences\n  in the string. Sentences are separated by one or more periods. For example,\n  the string \"This is a sentence\" has five sentences.\n*/\nconst sentencesCount = (str) => {\n  let sentencesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '.') {\n      sentencesCount++;\n    }\n  }\n  return sentencesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of syllables\n  in the string. Syllables are any character that appears at least two\n  times in the string. For example, the string \"abracadabra\" has eight syllables.\n*/\nconst syllablesCount = (str) => {\n  let syllablesCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.includes(str[i])) {\n      syllablesCount++;\n    }\n  }\n  return syllablesCount;\n};\n\n/*\n  Write a function that takes a string and returns the number of words\n  in the string. Words are separated by spaces. For example, the string\n  \"abc def ghi\" has three words.\n*/\nconst wordsCount = (str) => {\n  let wordsCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      wordsCount++;\n    }\n  }\n  return wordsCount", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let primeNumbers = []\n  let primeNumbersLength = 0\n  let primeNumbersLength2 = 0\n  let primeNumbersLength3 = 0\n  let primeNumbersLength4 = 0\n  let primeNumbersLength5 = 0\n  let primeNumbersLength6 = 0\n  let primeNumbersLength7 = 0\n  let primeNumbersLength8 = 0\n  let primeNumbersLength9 = 0\n  let primeNumbersLength10 = 0\n  let primeNumbersLength11 = 0\n  let primeNumbersLength12 = 0\n  let primeNumbersLength13 = 0\n  let primeNumbersLength14 = 0\n  let primeNumbersLength15 = 0\n  let primeNumbersLength16 = 0\n  let primeNumbersLength17 = 0\n  let primeNumbersLength18 = 0\n  let primeNumbersLength19 = 0\n  let primeNumbersLength20 = 0\n  let primeNumbersLength21 = 0\n  let primeNumbersLength22 = 0\n  let primeNumbersLength23 = 0\n  let primeNumbersLength24 = 0\n  let primeNumbersLength25 = 0\n  let primeNumbersLength26 = 0\n  let primeNumbersLength27 = 0\n  let primeNumbersLength28 = 0\n  let primeNumbersLength29 = 0\n  let primeNumbersLength30 = 0\n  let primeNumbersLength31 = 0\n  let primeNumbersLength32 = 0\n  let primeNumbersLength33 = 0\n  let primeNumbersLength34 = 0\n  let primeNumbersLength35 = 0\n  let primeNumbersLength36 = 0\n  let primeNumbersLength37 = 0\n  let primeNumbersLength38 = 0\n  let primeNumbersLength39 = 0\n  let primeNumbersLength40 = 0\n  let primeNumbersLength41 = 0\n  let primeNumbersLength42 = 0\n  let primeNumbersLength43 = 0\n  let primeNumbersLength44 = 0\n  let primeNumbersLength45 = 0\n  let primeNumbersLength46 = 0\n  let primeNumbersLength47 = 0\n  let primeNumbersLength48 = 0\n  let primeNumbersLength49 = 0\n  let primeNumbersLength50 = 0\n  let primeNumbersLength51 = 0\n  let primeNumbersLength52 = 0\n  let primeNumbersLength53 = 0\n  let primeNumbersLength54 = 0\n  let primeNumbersLength55 = 0\n  let primeNumbersLength56 = 0\n  let primeNumbersLength57 = 0\n  let primeNumbersLength58 = 0\n  let primeNumbersLength59 = 0\n  let primeNumbersLength60 = 0\n  let primeNumbersLength61 = 0\n  let primeNumbersLength62 = 0\n  let primeNumbersLength63 = 0\n  let primeNumbersLength64 = 0\n  let primeNumbersLength65 = 0\n  let primeNumbersLength66 = 0\n  let primeNumbersLength67 = 0\n  let primeNumbersLength68 = 0\n  let primeNumbersLength69 = 0\n  let primeNumbersLength70 = 0\n  let primeNumbersLength71 = 0\n  let primeNumbersLength72 = 0\n  let primeNumbersLength73 = 0\n  let primeNumbersLength74 = 0\n  let primeNumbersLength75 = 0\n  let primeNumbersLength76 = 0\n  let primeNumbersLength77 = 0\n  let primeNumbersLength78 = 0\n  let primeNumbersLength79 = 0\n  let primeNumbersLength80 = 0\n  let primeNumbersLength81 = 0\n  let primeNumbersLength82 = 0\n  let primeNumbersLength83 = 0\n  let primeNumbersLength84 = 0\n  let primeNumbersLength85 = 0\n  let primeNumbersLength86 = 0\n  let primeNumbersLength87 = 0\n  let primeNumbersLength88 = 0\n  let primeNumbersLength89 = 0\n  let primeNumbersLength90 = 0\n  let primeNumbersLength91 = 0\n  let primeNumbersLength92 = 0\n  let primeNumbersLength93 = 0\n  let primeNumbersLength94 = 0\n  let primeNumbersLength95 = 0\n  let primeNumbersLength96 = 0\n  let primeNumbersLength97 = 0\n  let primeNumbersLength98 = 0\n  let primeNumbersLength99 = 0\n  let primeNumbersLength100 = 0\n  let primeNumbersLength101 = 0\n  let primeNumbersLength102 = 0\n  let primeNumbersLength103 = 0\n  let primeNumbersLength104 = 0\n  let primeNumbersLength105 = 0\n  let primeNumbersLength106 = 0\n  let primeNumbersLength107 = 0\n  let primeNumbersLength108 = 0\n  let primeNumbersLength109 = 0\n  let primeNumbersLength110 = 0\n  let primeNumbersLength111 = 0\n  let primeNumbersLength112 = 0\n  let primeNumbersLength113 = 0\n  let primeNumbersLength114 = 0\n  let primeNumbersLength115 = 0\n  let primeNumbersLength116 = 0\n  let primeNumbersLength117 = 0\n  let primeNumbersLength118 = 0\n  let primeNumbersLength119 = 0\n  let primeNumbersLength120 = 0\n  let primeNumbersLength121 = 0\n  let primeNumbersLength122 = 0\n  let primeNumbersLength123 = 0\n  let primeNumbersLength124 = 0\n  let primeNumbersLength125 = 0\n  let primeNumbersLength126 = 0\n  let primeNumbersLength127 = 0\n  let primeNumbersLength128 = 0\n  let primeNumbersLength129 = 0\n  let primeNumbersLength130 = 0\n  let primeNumbersLength131 = 0\n  let primeNumbersLength132 = 0\n  let primeNumbersLength133 = 0\n  let primeNumbersLength134 = 0\n  let primeNumbersLength135 = 0\n  let primeNumbersLength136 = 0\n  let primeNumbersLength137 = 0\n  let primeNumbersLength138 = 0\n  let primeNumbersLength139 = 0\n  let primeNumbersLength140 = 0\n  let primeNumbersLength141 = 0\n  let primeNumbersLength142 = 0\n  let primeNumbersLength143 = 0\n  let primeNumbersLength144 = 0\n  let primeNumbersLength145 = 0\n  let primeNumbersLength146 = 0\n  let primeNumbersLength147 = 0\n  let primeNumbersLength148 = 0\n  let primeNumbersLength149 = 0\n  let primeNumbersLength150 = 0\n  let primeNumbersLength151 = 0\n  let primeNumbersLength152 = 0\n  let primeNumbersLength153 = 0\n  let primeNumbersLength154 = 0\n  let primeNumbersLength155 = 0\n  let primeNumbersLength156 = 0\n  let primeNumbersLength157 = 0\n  let primeNumbersLength158 = 0\n  let primeNumbersLength159 = 0\n  let primeNumbersLength160 = 0\n  let primeNumbersLength161 = 0\n  let primeNumbersLength162 = 0\n  let primeNumbersLength163 = 0\n  let primeNumbersLength164 = 0\n  let primeNumbersLength165 = 0\n  let primeNumbersLength166 = 0\n  let primeNumbersLength167 = 0\n  let primeNumbersLength168 = 0\n  let primeNumbersLength169 = 0\n  let primeNumbersLength170 = 0\n  let primeNumbersLength171 = 0\n  let primeNumbersLength172 = 0\n  let primeNumbersLength173 = 0\n  let primeNumbersLength174 = 0\n  let primeNumbersLength175 = 0\n  let primeNumbersLength176 = 0\n  let primeNumbersLength177 = 0\n  let primeNumbersLength178 = 0\n  let primeNumbersLength179 = 0\n  let primeNumbersLength180 = 0\n  let primeNumbersLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd16 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd17 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd18 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd19 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd20 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd21 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd22 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd23 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd24 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd25 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd26 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of positive integers that start or end with 1.\n  */\nconst beginOneEnd27 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] + lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lend2 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2!== 0 && lst[oddIndex] % 2 === 0) {\n      lst[evenIndex] = lst[evenIndex] + lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at even indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 6, 2, 7]\n  */\nconst reverse = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at odd indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst reverse2 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2!== 0 && lst[oddIndex] % 2 === 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at even indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 6, 2, 7]\n  */\nconst reverse3 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] + lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at odd indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst reverse4 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2!== 0 && lst[oddIndex] % 2 === 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at even indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 6, 2, 7]\n  */\nconst reverse5 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at odd indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst reverse6 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2!== 0 && lst[oddIndex] % 2 === 0) {\n      lst[evenIndex] = lst[evenIndex] + lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at even indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 6, 2, 7]\n  */\nconst reverse7 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] + lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at odd indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst reverse8 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2!== 0 && lst[oddIndex] % 2 === 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements that are at even indices..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) ==> [4, 6, 2, 7]\n  */\nconst reverse9 = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2!== 0) {\n      lst[evenIndex] = lst[evenIndex] - lst[oddIndex];\n      lst[oddIndex] = 0;\n      evenIndex++;\n      oddIndex++;\n    } else {\n      evenIndex++;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. reverse the element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = words.map((word) => {\n    const newWord = word.split('').sort().reverse().join('');\n    return newWord;\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const res = [];\n  const row = [];\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([rowIndex, colIndex]);\n      rowIndex++;\n      colIndex = 0;\n      row.push(lst[i]);\n    } else {\n      colIndex++;\n      row.push(lst[i]);\n    }\n  }\n  \n  res.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  \n  res.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n    return 0;\n  });\n  \n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  catchCol([], 1) == []\n  catchCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchCol = (lst, x) => {\n  const res = [];\n  const row = [];\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([rowIndex, colIndex]);\n      rowIndex++;\n      colIndex = 0;\n      row.push(lst[i]);\n    } else {\n      colIndex++;\n      row.push(lst[i]);\n    }\n  }\n  \n  res.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n    return 0;\n  });\n  \n  res.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  \n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchAll([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  catchAll([], 1) == []\n  catchAll([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3), (2, 1)]\n  */\nconst catchAll = (lst, x) => {\n  const res = [];\n  const row = [];\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([rowIndex, colIndex]);\n      rowIndex++;\n      colIndex = 0;\n      row.push(lst[i]);\n    } else {\n      colIndex++;\n      row.push(lst[i]);\n    }\n  }\n  \n  res.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n    return 0;\n  });\n  \n  res.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  \n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchAll2([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  catchAll2([], 1) == []\n  catchAll2([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3), (2, 1)]\n  */\nconst catchAll2 = (lst, x) => {\n  const res = [];\n  const row = [];\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([rowIndex, colIndex]);\n      rowIndex++;\n      colIndex = 0;\n      row.push(lst[i]);\n    } else {\n      colIndex++;\n      row.push(lst[i]);\n    }\n  }\n  \n  res.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n    return 0;\n  });\n  \n  res.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  \n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchAll3([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  catchAll3([], 1) == []\n  catchAll3([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3), (2, 1)]\n  */\nconst catchAll3 = (lst, x) => {\n  const res = [];\n  const row = [];\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  \n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  const sortedArray = [];\n  let sum = 0;\n  for (let i = 0; i < newArray.length; i++) {\n    sum += newArray[i];\n  }\n  if (sum % 2 === 0) {\n    sortedArray = newArray.sort((a, b) => a - b);\n  } else {\n    sortedArray = newArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\nexport { sortArray };\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % 2 === 0) {\n    return arr.sort((a, b) => a - b);\n  } else {\n    return arr.sort((a, b) => b - a);\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n  newAlphabet.push('z')\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let currentIndex;\n  let currentSum;\n  let currentSumOfSquares;\n  let currentSumOfProducts;\n  let currentProduct;\n  let currentProductOfSquares;\n  let currentProductOfProducts;\n  let currentProductOfSums;\n  let currentProductOfSumsOfSquares;\n  let currentProductOfSumsOfProducts;\n  let currentProductOfSumsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares;\n  let currentProductOfSumsOfProductsOfProductsOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return smallest\n}\n\n/*\n  You are given a list of integers. Write a function that returns the index of the first occurrence of the number in the list.\n  Return -1 if the number is not in the list.\n  \n  indexOf([5, 1, 4, 3, 2], 4) == 1\n  indexOf([5, 1, 4, 3, 2], 5) == -1\n  indexOf([5, 1, 4, 3, 2], 6) == -1\n  indexOf([5, 1, 4, 3, 2], 7) == -1\n  indexOf([5, 1, 4, 3, 2], 8) == -1\n  indexOf([5, 1, 4, 3, 2], 9) == -1\n  indexOf([5, 1, 4, 3, 2], 10) == -1\n  indexOf([5, 1, 4, 3, 2], 11) == -1\n  indexOf([5, 1, 4, 3, 2], 12) == -1\n  indexOf([5, 1, 4, 3, 2], 13) == -1\n  indexOf([5, 1, 4, 3, 2], 14) == -1\n  indexOf([5, 1, 4, 3, 2], 15) == -1\n  indexOf([5, 1, 4, 3, 2], 16) == -1\n  indexOf([5, 1, 4, 3, 2], 17) == -1\n  indexOf([5, 1, 4, 3, 2], 18) == -1\n  indexOf([5, 1, 4, 3, 2], 19) == -1\n  indexOf([5, 1, 4, 3, 2], 20) == -1\n  indexOf([5, 1, 4, 3, 2], 21) == -1\n  indexOf([5, 1, 4, 3, 2], 22) == -1\n  indexOf([5, 1, 4, 3, 2], 23) == -1\n  indexOf([5, 1, 4, 3, 2], 24) == -1\n  indexOf([5, 1, 4, 3, 2], 25) == -1\n  indexOf([5, 1, 4, 3, 2], 26) == -1\n  indexOf([5, 1, 4, 3, 2], 27) == -1\n  indexOf([5, 1, 4, 3, 2], 28) == -1\n  indexOf([5, 1, 4, 3, 2], 29) == -1\n  indexOf([5, 1, 4, 3, 2], 30) == -1\n  indexOf([5, 1, 4, 3, 2], 31) == -1\n  indexOf([5, 1, 4, 3, 2], 32) == -1\n  indexOf([5, 1, 4, 3, 2], 33) == -1\n  indexOf([5, 1, 4, 3, 2], 34) == -1\n  indexOf([5, 1, 4, 3, 2], 35) == -1\n  indexOf([5, 1, 4, 3, 2], 36) == -1\n  indexOf([5, 1, 4, 3, 2], 37) == -1\n  indexOf([5, 1, 4, 3, 2], 38) == -1\n  indexOf([5, 1, 4, 3, 2], 39) == -1\n  indexOf([5, 1, 4, 3, 2], 40) == -1\n  indexOf([5, 1, 4, 3, 2], 41) == -1\n  indexOf([5, 1, 4, 3, 2], 42) == -1\n  indexOf([5, 1, 4, 3, 2], 43) == -1\n  indexOf([5, 1, 4, 3, 2], 44) == -1\n  indexOf([5, 1, 4, 3, 2], 45) == -1\n  indexOf([5, 1, 4, 3, 2], 46) == -1\n  indexOf([5, 1, 4, 3, 2], 47) == -1\n  indexOf([5, 1, 4, 3, 2], 48) == -1\n  indexOf([5, 1, 4, 3, 2], 49) == -1\n  indexOf([5, 1, 4, 3, 2], 50) == -1\n  indexOf([5, 1, 4, 3, 2], 51) == -1\n  indexOf([5, 1, 4, 3, 2], 52) == -1\n  indexOf([5, 1, 4, 3, 2], 53) == -1\n  indexOf([5, 1, 4, 3, 2], 54) == -1\n  indexOf([5, 1, 4, 3, 2], 55) == -1\n  indexOf([5, 1, 4, 3, 2], 56) == -1\n  indexOf([5, 1, 4, 3, 2], 57) == -1\n  indexOf([5, 1, 4, 3, 2], 58) == -1\n  indexOf([5, 1, 4, 3, 2], 59) == -1\n  indexOf([5, 1, 4, 3, 2], 60) == -1\n  indexOf([5, 1, 4, 3, 2], 61) == -1\n  indexOf([5, 1, 4, 3, 2], 62) == -1\n  indexOf([5, 1, 4, 3, 2], 63) == -1\n  indexOf([5, 1, 4, 3, 2], 64) == -1\n  indexOf([5, 1, 4, 3, 2], 65) == -1\n  indexOf([5, 1, 4, 3, 2], 66) == -1\n  indexOf([5, 1, 4, 3, 2], 67) == -1\n  indexOf([5, 1, 4, 3, 2], 68) == -1\n  indexOf([5, 1, 4, 3, 2], 69) == -1\n  indexOf([5, 1, 4, 3, 2], 70) == -1\n  indexOf([5, 1, 4, 3, 2], 71) == -1\n  indexOf([5, 1, 4, 3, 2], 72) == -1\n  indexOf([5, 1, 4, 3, 2], 73) == -1\n  indexOf([5, 1, 4, 3, 2], 74) == -1\n  indexOf([5, 1, 4, 3, 2], 75) == -1\n  indexOf([5, 1, 4, 3, 2], 76) == -1\n  indexOf([5, 1, 4, 3, 2], 77) == -1\n  indexOf([5, 1, 4, 3, 2], 78) == -1\n  indexOf([5, 1, 4, 3, 2], 79) == -1\n  indexOf([5, 1, 4, 3, 2], 80) == -1\n  indexOf([5, 1, 4, 3, 2], 81) == -1\n  indexOf([5, 1, 4, 3, 2], 82) == -1\n  indexOf([5, 1, 4, 3, 2], 83) == -1\n  indexOf([5, 1, 4, 3, 2], 84) == -1\n  indexOf([5, 1, 4, 3, 2], 85) == -1\n  indexOf([5, 1, 4, 3, 2], 86) == -1\n  indexOf([5, 1, 4, 3, 2], 87) == -1\n  indexOf([5, 1, 4, 3, 2], 88) == -1\n  indexOf([5, 1, 4, 3, 2], 89) == -1\n  indexOf([5, 1, 4, 3, 2], 90) == -1\n  indexOf([5, 1, 4, 3, 2], 91) == -1\n  indexOf([5, 1, 4, 3, 2], 92) == -1\n  indexOf([5, 1, 4, 3, 2], 93) == -1\n  indexOf([5, 1, 4, 3, 2], 94) == -1\n  indexOf([5, 1, 4, 3, 2], 95) == -1\n  indexOf([5, 1, 4, 3, 2], 96) == -1\n  indexOf([5, 1, 4, 3, 2], 97) == -1\n  indexOf([5, 1, 4, 3, 2], 98) == -1\n  indexOf([5, 1, 4, 3, 2], 99) == -1\n  indexOf([5, 1, 4, 3, 2], 100) == -1\n  indexOf([5, 1, 4, 3, 2], 101) == -1\n  indexOf([5, 1, 4, 3, 2], 102) == -1\n  indexOf([5, 1, 4, 3, 2], 103) == -1\n  indexOf([5, 1, 4, 3, 2], 104) == -1\n  indexOf([5, 1, 4, 3, 2], 105) == -1\n  indexOf([5, 1, 4, 3, 2], 106) == -1\n  indexOf([5, 1, 4, 3, 2], 107) == -1\n  indexOf([5, 1, 4, 3, 2], 108) == -1\n  indexOf([5, 1, 4, 3, 2], 109) == -1\n  indexOf([5, 1, 4, 3, 2], 110) == -1\n  indexOf([5, 1, 4, 3, 2], 111) == -1\n  indexOf([5, 1, 4, 3, 2], 112) == -1\n  indexOf([5, 1, 4, 3, 2], 113) == -1\n  indexOf([5, 1, 4, 3, 2], 114) == -1\n  indexOf([5, 1, 4, 3, 2], 115) == -1\n  indexOf([5, 1, 4, 3, 2], 116) == -1\n  indexOf([5, 1, 4, 3, 2], 117) == -1\n  indexOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  anyFloat(5, 2, 7) ➞ true\n  anyFloat(3, 2, 2) ➞ false\n  anyFloat(3, -2, 1) ➞ true\n  anyFloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyFloat = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are decimals.\n  Returns false in any other cases.\n  Examples\n  anyDecimal(5, 2, 7) ➞ true\n  anyDecimal(3, 2, 2) ➞ false\n  anyDecimal(3, -2, 1) ➞ true\n  anyDecimal(3.6, -2.2, 2) ➞ false\n  */\nconst anyDecimal = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strings.\n  Returns false in any other cases.\n  Examples\n  anyString(5, 2, 7) ➞ true\n  anyString(3, 2, 2) ➞ false\n  anyString(3, -2, 1) ➞ true\n  anyString(3.6, -2.2, 2) ➞ false\n  */\nconst anyString = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are booleans.\n  Returns false in any other cases.\n  Examples\n  anyBoolean(5, 2, 7) ➞ true\n  anyBoolean(3, 2, 2) ➞ false\n  anyBoolean(3, -2, 1) ➞ true\n  anyBoolean(3.6, -2.2, 2) ➞ false\n  */\nconst anyBoolean = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are arrays.\n  Returns false in any other cases.\n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are objects.\n  Returns false in any other cases.\n  Examples\n  anyObject(5, 2, 7) ➞ true\n  anyObject(3, 2, 2) ➞ false\n  anyObject(3, -2, 1) ➞ true\n  anyObject(3.6, -2.2, 2) ➞ false\n  */\nconst anyObject = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are null.\n  Returns false in any other cases.\n  Examples\n  anyNull(5, 2, 7) ➞ true\n  anyNull(3, 2, 2) ➞ false\n  anyNull(3, -2, 1) ➞ true\n  anyNull(3.6, -2.2, 2) ➞ false\n  */\nconst anyNull = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are undefined.\n  Returns false in any other cases.\n  Examples\n  anyUndefined(5, 2, 7) ➞ true\n  anyUndefined(3, 2, 2) ➞ false\n  anyUndefined(3, -2, 1) ➞ true\n  anyUndefined(3.6, -2.2, 2) ➞ false\n  */\nconst anyUndefined = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are NaNs.\n  Returns false in any other cases.\n  Examples\n  anyNaN(5, 2, 7) ➞ true\n  anyNaN(3, 2, 2) ➞ false\n  anyNaN(3, -2, 1) ➞ true\n  anyNaN(3.6, -2.2, 2) ➞ false\n  */\nconst anyNaN = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      const letterIndex = letter.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)\n      encodedMessage += String.fromCharCode(letterIndex + 2)\n    }\n  }\n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  't", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = primeFactors(lst[i])\n    if (prime.length > largestPrime) {\n      largestPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++) {\n      if (prime[j] > largestPrime) {\n        largestPrime = prime[j];\n      }\n    }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n};\n\n/*You are given a list of integers and a number k. You need to find all numbers in the list that divide evenly into k.\n  You need to return the sum of all these numbers.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 5 you should return 10\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 8 you should return 21\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 7 you should return 10\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 6 you should return 15\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 4 you should return 5\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 2 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 1 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 10 you should return 10\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 11 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 12 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 13 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 14 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 15 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 16 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 17 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 18 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 19 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 20 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 21 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 22 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 23 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 24 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 25 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 26 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 27 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 28 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 29 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 30 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 31 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 32 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 33 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 34 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 35 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 36 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 37 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 38 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 39 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 40 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 41 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 42 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 43 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 44 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 45 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 46 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 47 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 48 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 49 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 50 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 51 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 52 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 53 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 54 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 55 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 56 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 57 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 58 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 59 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 60 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 61 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 62 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 63 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 64 you should return 0\n  For lst = [0,1,2,3,4,5,6,7,8,9,10] and k = 65 you should return 0\n  For lst = [0,1,2,3,4,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toLowerCase()) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case \n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers that are not\n  prime numbers.\n  for example:\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17,19]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  considerNotPrimes([2,3,5,7,11,13,17]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > b) {\n    return breed(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < b) {\n    return breed(b, a % b);\n  }\n  return a % b;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  considerVowels('aBCdEf') returns 3\n  considerVowels('abcdefg') returns 0\n  considerVowels('dBBE') returns 0\n  */\nconst considerVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 2\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 1\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  considerConsonantsOdd('aBCdEf') returns 3\n  considerConsonantsOdd('abcdefg') returns 0\n  considerConsonantsOdd('dBBE') returns 0\n  */\nconst considerConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  considerVowelsOdd('aBCdEf') returns 3\n  considerVowelsOdd('abcdefg') returns 0\n  considerVowelsOdd('dBBE') returns 0\n  */\nconst considerVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  considerVowelsEven('aBCdEf') returns 3\n  considerVowelsEven('abcdefg') returns 0\n  considerVowelsEven('dBBE') returns 0\n  */\nconst considerVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  considerConsonantsEven('aBCdEf') returns 3\n  considerConsonantsEven('abcdefg') returns 0\n  considerConsonantsEven('dBBE') returns 0\n  */\nconst considerConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  considerConsonantsEven('aBCdEf') returns 3\n  considerConsonantsEven('abcdefg') returns 0\n  considerConsonantsEven('dBBE') returns 0\n  */\nconst considerConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  considerConsonantsOdd('aBCdEf') returns 3\n  considerConsonantsOdd('abcdefg') returns 0\n  considerConsonantsOdd('dBBE') returns 0\n  */\nconst considerConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  considerConsonantsEven('aBCdEf') returns 3\n  considerConsonantsEven('abcdefg') returns 0\n  considerConsonantsEven('dBBE') returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers + 1 : integers\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * decimal to it. If the number is equidistant from two decimals, round it\n * away from zero.\n * Examples\n * >>> closeDecimal(\"10.5\")\n * 10.5\n * >>> closeDecimal(\"15.3\")\n * 15.3\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two decimals, the one you should return is the one that is the\n * farthest from zero. For example closeDecimal(\"14.5\") should\n * return 14.4 and closeDecimal(\"-14.5\") should return -14.4.\n */\nconst closeDecimal = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? number : number - 0.01\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * hexadecimal to it. If the number is equidistant from two hexadecimals,\n * round it away from zero.\n * Examples\n * >>> closeHexadecimal(\"10.5\")\n * \"A\"\n * >>> closeHexadecimal(\"15.3\")\n * \"F\"\n * >>> closeHexadecimal(\"14.5\")\n * \"A\"\n * >>> closeHexadecimal(\"-14.5\")\n * \"F\"\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two hexadecimals, the one you should return is the one that is the\n * farthest from zero. For example closeHexadecimal(\"14.5\") should\n * return \"A\" and closeHexadecimal(\"-14.5\") should return \"F\".\n */\nconst closeHexadecimal = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers : integers + 0x10\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * octal to it. If the number is equidistant from two octals, round it\n * away from zero.\n * Examples\n * >>> closeOctal(\"10.5\")\n * \"10\"\n * >>> closeOctal(\"15.3\")\n * \"15\"\n * >>> closeOctal(\"14.5\")\n * \"14\"\n * >>> closeOctal(\"-14.5\")\n * \"-14\"\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two octals, the one you should return is the one that is the\n * farthest from zero. For example closeOctal(\"14.5\") should\n * return \"14\" and closeOctal(\"-14.5\") should return \"-14\".\n */\nconst closeOctal = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers : integers + 0o7\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * binary to it. If the number is equidistant from two binaries, round it\n * away from zero.\n * Examples\n * >>> closeBinary(\"10.5\")\n * \"10\"\n * >>> closeBinary(\"15.3\")\n * \"11\"\n * >>> closeBinary(\"14.5\")\n * \"10\"\n * >>> closeBinary(\"-14.5\")\n * \"-10\"\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two binaries, the one you should return is the one that is the\n * farthest from zero. For example closeBinary(\"14.5\") should\n * return \"10\" and closeBinary(\"-14.5\") should return \"-10\".\n */\nconst closeBinary = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers : integers + 1\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * hexadecimal to it. If the number is equidistant from two hexadecimals,\n * round it away from zero.\n * Examples\n * >>> closeHexadecimal(\"10.5\")\n * \"A\"\n * >>> closeHexadecimal(\"15.3\")\n * \"F\"\n * >>> closeHexadecimal(\"14.5\")\n * \"A\"\n * >>> closeHexadecimal(\"-14.5\")\n * \"F\"\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two hexadecimals, the one you should return is the one that is the\n * farthest from zero. For example closeHexadecimal(\"14.5\") should\n * return \"A\" and closeHexadecimal(\"-14.5\") should return \"F\".\n */\nconst closeHexadecimal = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers : integers + 0x10\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * octal to it. If the number is equidistant from two octals, round it\n * away from zero.\n * Examples\n * >>> closeOctal(\"10.5\")\n * \"10\"\n * >>> closeOctal(\"15.3\")\n * \"15\"\n * >>> closeOctal(\"14.5\")\n * \"14\"\n * >>> closeOctal(\"-14.5\")\n * \"-14\"\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two octals, the one you should return is the one that is the\n * farthest from zero. For example closeOctal(\"14.5\") should\n * return \"14\" and closeOctal(\"-14.5\") should return \"-14\".\n */\nconst closeOctal = (value) => {\n  const number = parseFloat(value)\n  const integers = Math.floor(number)\n  const fraction = number - integers\n  const roundTowardZero = fraction >= 0.5\n  return roundTowardZero? integers : integers + 0o7\n}\n\n/**\n * Takes a value (string) representing a number and returns the closest\n * binary to it. If the number is equidistant from two binaries, round it\n * away from zero.\n * Examples\n * >>> closeBinary(\"10.5\")\n * \"10\"\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
